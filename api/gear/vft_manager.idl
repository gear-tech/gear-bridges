type InitConfig = struct {
  erc20_manager_address: h160,
  gear_bridge_builtin: actor_id,
  eth_client: actor_id,
  config: Config,
};

type Config = struct {
  gas_for_token_ops: u64,
  gas_for_reply_deposit: u64,
  gas_for_submit_receipt: u64,
  gas_to_send_request_to_builtin: u64,
  reply_timeout: u32,
  gas_for_request_bridging: u64,
};

type Error = enum {
  SendFailure,
  ReplyFailure,
  BurnTokensDecode,
  TransferFromDecode,
  BuiltinDecode,
  MintTokensDecode,
  ReplyTimeout,
  NoCorrespondingEthAddress,
  ReplyHook,
  MessageNotFound,
  InvalidMessageStatus,
  MessageFailed,
  BurnTokensFailed,
  LockTokensFailed,
  BridgeBuiltinMessageFailed,
  TokensRefunded,
  NotEthClient,
  NotEnoughGas,
  NoCorrespondingVaraAddress,
  NotSupportedEvent,
  AlreadyProcessed,
  TransactionTooOld,
};

type TokenSupply = enum {
  Ethereum,
  Gear,
};

type MessageInfo = struct {
  status: MessageStatus,
  details: TxDetails,
};

type MessageStatus = enum {
  SendingMessageToBridgeBuiltin,
  BridgeResponseReceived: opt u256,
  WaitingReplyFromBuiltin,
  BridgeBuiltinStep,
  SendingMessageToBurnTokens,
  TokenBurnCompleted: bool,
  WaitingReplyFromBurn,
  SendingMessageToMintTokens,
  TokenMintCompleted,
  WaitingReplyFromMint,
  MintTokensStep,
  SendingMessageToLockTokens,
  TokenLockCompleted: bool,
  WaitingReplyFromLock,
  SendingMessageToUnlockTokens,
  TokenUnlockCompleted,
  WaitingReplyFromUnlock,
  UnlockTokensStep,
  MessageProcessedWithSuccess: u256,
};

type TxDetails = enum {
  RequestBridging: struct { vara_token_id: actor_id, sender: actor_id, amount: u256, receiver: h160 },
  SubmitReceipt: struct { vara_token_id: actor_id, receiver: actor_id, amount: u256 },
};

constructor {
  New : (init_config: InitConfig);
};

service VftManager {
  HandleInterruptedTransfer : (msg_id: message_id) -> result (struct { u256, h160 }, Error);
  MapVaraToEthAddress : (vara_token_id: actor_id, eth_token_id: h160, supply_type: TokenSupply) -> null;
  RemoveVaraToEthAddress : (vara_token_id: actor_id) -> null;
  /// Request bridging of tokens from gear to ethereum. It involves locking/burning
  /// `vft` tokens (specific operation depends on the token supply type) and sending
  /// request to the bridge built-in actor.
  RequestBridging : (sender: actor_id, vara_token_id: actor_id, amount: u256, receiver: h160) -> result (struct { u256, h160 }, Error);
  /// Submit rlp-encoded transaction receipt. This receipt is decoded under the hood
  /// and checked that it's a valid receipt from tx send to `ERC20Manager` contract.
  /// This entrypoint can be called only by `ethereum-event-client`.
  SubmitReceipt : (slot: u64, transaction_index: u64, receipt_rlp: vec u8) -> result (null, Error);
  UpdateConfig : (config: Config) -> null;
  UpdateErc20ManagerAddress : (new_erc20_manager_address: h160) -> null;
  UpdateEthClient : (eth_client_new: actor_id) -> null;
  query Admin : () -> actor_id;
  query Erc20ManagerAddress : () -> h160;
  query EthClient : () -> actor_id;
  query GearBridgeBuiltin : () -> actor_id;
  query GetConfig : () -> Config;
  query MsgTrackerState : () -> vec struct { message_id, MessageInfo };
  query VaraToEthAddresses : () -> vec struct { actor_id, h160, TokenSupply };

  events {
    TokenMappingAdded: struct { vara_token_id: actor_id, eth_token_id: h160 };
    TokenMappingRemoved: struct { vara_token_id: actor_id, eth_token_id: h160 };
    BridgingRequested: struct { nonce: u256, vara_token_id: actor_id, amount: u256, sender: actor_id, receiver: h160 };
  }
};

