{"abi":[{"type":"constructor","inputs":[],"stateMutability":"nonpayable"},{"type":"receive","stateMutability":"payable"},{"type":"function","name":"allowance","inputs":[{"name":"owner","type":"address","internalType":"address"},{"name":"spender","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"approve","inputs":[{"name":"spender","type":"address","internalType":"address"},{"name":"value","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"nonpayable"},{"type":"function","name":"balanceOf","inputs":[{"name":"account","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"decimals","inputs":[],"outputs":[{"name":"","type":"uint8","internalType":"uint8"}],"stateMutability":"view"},{"type":"function","name":"deposit","inputs":[],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"name","inputs":[],"outputs":[{"name":"","type":"string","internalType":"string"}],"stateMutability":"view"},{"type":"function","name":"symbol","inputs":[],"outputs":[{"name":"","type":"string","internalType":"string"}],"stateMutability":"view"},{"type":"function","name":"totalSupply","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"transfer","inputs":[{"name":"to","type":"address","internalType":"address"},{"name":"value","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"nonpayable"},{"type":"function","name":"transferFrom","inputs":[{"name":"from","type":"address","internalType":"address"},{"name":"to","type":"address","internalType":"address"},{"name":"value","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"nonpayable"},{"type":"function","name":"withdraw","inputs":[{"name":"value","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"event","name":"Approval","inputs":[{"name":"owner","type":"address","indexed":true,"internalType":"address"},{"name":"spender","type":"address","indexed":true,"internalType":"address"},{"name":"value","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"Deposit","inputs":[{"name":"to","type":"address","indexed":true,"internalType":"address"},{"name":"value","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"Transfer","inputs":[{"name":"from","type":"address","indexed":true,"internalType":"address"},{"name":"to","type":"address","indexed":true,"internalType":"address"},{"name":"value","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"Withdrawal","inputs":[{"name":"from","type":"address","indexed":true,"internalType":"address"},{"name":"value","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"error","name":"ERC20InsufficientAllowance","inputs":[{"name":"spender","type":"address","internalType":"address"},{"name":"allowance","type":"uint256","internalType":"uint256"},{"name":"needed","type":"uint256","internalType":"uint256"}]},{"type":"error","name":"ERC20InsufficientBalance","inputs":[{"name":"sender","type":"address","internalType":"address"},{"name":"balance","type":"uint256","internalType":"uint256"},{"name":"needed","type":"uint256","internalType":"uint256"}]},{"type":"error","name":"ERC20InvalidApprover","inputs":[{"name":"approver","type":"address","internalType":"address"}]},{"type":"error","name":"ERC20InvalidReceiver","inputs":[{"name":"receiver","type":"address","internalType":"address"}]},{"type":"error","name":"ERC20InvalidSender","inputs":[{"name":"sender","type":"address","internalType":"address"}]},{"type":"error","name":"ERC20InvalidSpender","inputs":[{"name":"spender","type":"address","internalType":"address"}]}],"bytecode":{"object":"0x60806040523461031757604080519081016001600160401b0381118282101761022a576040908152600d82526c2bb930b83832b21022ba3432b960991b602083015280519081016001600160401b0381118282101761022a5760405260048152630ae8aa8960e31b602082015281516001600160401b03811161022a57600354600181811c9116801561030d575b602082101461020c57601f81116102aa575b50602092601f821160011461024957928192935f9261023e575b50508160011b915f199060031b1c1916176003555b80516001600160401b03811161022a57600454600181811c91168015610220575b602082101461020c57601f81116101a9575b50602091601f8211600114610149579181925f9261013e575b50508160011b915f199060031b1c1916176004555b6040516107ad908161031c8239f35b015190505f8061011a565b601f1982169260045f52805f20915f5b85811061019157508360019510610179575b505050811b0160045561012f565b01515f1960f88460031b161c191690555f808061016b565b91926020600181928685015181550194019201610159565b60045f527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b601f830160051c81019160208410610202575b601f0160051c01905b8181106101f75750610101565b5f81556001016101ea565b90915081906101e1565b634e487b7160e01b5f52602260045260245ffd5b90607f16906100ef565b634e487b7160e01b5f52604160045260245ffd5b015190505f806100b9565b601f1982169360035f52805f20915f5b868110610292575083600195961061027a575b505050811b016003556100ce565b01515f1960f88460031b161c191690555f808061026c565b91926020600181928685015181550194019201610259565b60035f527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b601f830160051c81019160208410610303575b601f0160051c01905b8181106102f8575061009f565b5f81556001016102eb565b90915081906102e2565b90607f169061008d565b5f80fdfe6080806040526004361015610024575b50361561001a575f80fd5b61002261066d565b005b5f3560e01c90816306fdde031461053d57508063095ea7b3146104bb57806318160ddd1461049e57806323b872dd146103bf5780632e1a7d4d14610297578063313ce5671461027c57806370a082311461024557806395d89b4114610141578063a9059cbb14610110578063d0e30db0146100fd5763dd62ed3e146100a9575f61000f565b346100f95760403660031901126100f9576100c261061f565b6100ca610635565b6001600160a01b039182165f908152600160209081526040808320949093168252928352819020549051908152f35b5f80fd5b5f3660031901126100f95761002261066d565b346100f95760403660031901126100f95761013661012c61061f565b6024359033610716565b602060405160018152f35b346100f9575f3660031901126100f9576040515f6004548060011c9060018116801561023b575b6020831081146102275782855290811561020357506001146101a5575b6101a1836101958185038261064b565b604051918291826105f5565b0390f35b91905060045f527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b915f905b8082106101e957509091508101602001610195610185565b9192600181602092548385880101520191019092916101d1565b60ff191660208086019190915291151560051b840190910191506101959050610185565b634e487b7160e01b5f52602260045260245ffd5b91607f1691610168565b346100f95760203660031901126100f9576001600160a01b0361026661061f565b165f525f602052602060405f2054604051908152f35b346100f9575f3660031901126100f957602060405160128152f35b346100f95760203660031901126100f95760043533156103ac57335f525f6020528060405f205481811061039357335f525f6020520360405f205580600254036002555f6040518281527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60203392a35f80808084335af13d1561038e573d67ffffffffffffffff811161037a576040519061033d601f8201601f19166020018361064b565b81525f60203d92013e5b156100f9576040519081527f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b6560203392a2005b634e487b7160e01b5f52604160045260245ffd5b610347565b63391434e360e21b5f523360045260245260445260645ffd5b634b637e8f60e11b5f525f60045260245ffd5b346100f95760603660031901126100f9576103d861061f565b6103e0610635565b6001600160a01b0382165f818152600160209081526040808320338452909152902054909260443592915f19811061041e575b506101369350610716565b83811061048357841561047057331561045d57610136945f52600160205260405f2060018060a01b0333165f526020528360405f209103905584610413565b634a1406b160e11b5f525f60045260245ffd5b63e602df0560e01b5f525f60045260245ffd5b8390637dc7a0d960e11b5f523360045260245260445260645ffd5b346100f9575f3660031901126100f9576020600254604051908152f35b346100f95760403660031901126100f9576104d461061f565b602435903315610470576001600160a01b031690811561045d57335f52600160205260405f20825f526020528060405f20556040519081527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560203392a3602060405160018152f35b346100f9575f3660031901126100f9575f6003548060011c906001811680156105eb575b60208310811461022757828552908115610203575060011461058d576101a1836101958185038261064b565b91905060035f527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b915f905b8082106105d157509091508101602001610195610185565b9192600181602092548385880101520191019092916105b9565b91607f1691610561565b602060409281835280519182918282860152018484015e5f828201840152601f01601f1916010190565b600435906001600160a01b03821682036100f957565b602435906001600160a01b03821682036100f957565b90601f8019910116810190811067ffffffffffffffff82111761037a57604052565b3315610703576002543481018091116106ef57600255335f525f60205260405f203481540190556040513481525f7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60203393a36040513481527fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c60203392a2565b634e487b7160e01b5f52601160045260245ffd5b63ec442f0560e01b5f525f60045260245ffd5b6001600160a01b03169081156103ac576001600160a01b031691821561070357815f525f60205260405f205481811061079457817fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92602092855f525f84520360405f2055845f525f825260405f20818154019055604051908152a3565b8263391434e360e21b5f5260045260245260445260645ffd","sourceMap":"462:2395:92:-:0;;;;;;;;;;;;-1:-1:-1;;;;;462:2395:92;;;;;;;;;;;;;;;-1:-1:-1;;;462:2395:92;;;;;;;;;-1:-1:-1;;;;;462:2395:92;;;;;;;;;;1178:15;462:2395;;-1:-1:-1;;;462:2395:92;1178:15;;;462:2395;;-1:-1:-1;;;;;462:2395:92;;;;1648:13:44;462:2395:92;;;;;;;;;;;-1:-1:-1;462:2395:92;;;;;;;;;;;-1:-1:-1;462:2395:92;;;;;;;;;;;;;;-1:-1:-1;462:2395:92;;;;;;;;;;;;;1648:13:44;462:2395:92;;;;;1648:13:44;462:2395:92;;;;-1:-1:-1;;;;;462:2395:92;;;;1178:15;462:2395;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;462:2395:92;;;;;;;;;;;;;1648:13:44;462:2395:92;;;;;1178:15;462:2395;;;;;;;;;;;;;;;-1:-1:-1;462:2395:92;;;;;;;;;;1178:15;-1:-1:-1;462:2395:92;;-1:-1:-1;462:2395:92;;-1:-1:-1;462:2395:92;;;;;;;;;;;;;;;;;;;;1178:15;462:2395;;;;;;;;;;1648:13:44;462:2395:92;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1178:15;-1:-1:-1;462:2395:92;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;462:2395:92;;;;;;;;;-1:-1:-1;462:2395:92;;;;;;;;-1:-1:-1;462:2395:92;;1178:15;462:2395;;-1:-1:-1;462:2395:92;;;;;;;;;;;;-1:-1:-1;462:2395:92;;1178:15;462:2395;;-1:-1:-1;462:2395:92;;;;;-1:-1:-1;462:2395:92;;;;;;;;;;1648:13:44;-1:-1:-1;462:2395:92;;-1:-1:-1;462:2395:92;;-1:-1:-1;462:2395:92;;;;;;;;;;;;;;;;;;;;;1648:13:44;462:2395:92;;;;;;;;;;1648:13:44;462:2395:92;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1648:13:44;-1:-1:-1;462:2395:92;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;462:2395:92;;;;;;;;;-1:-1:-1;462:2395:92;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"0x6080806040526004361015610024575b50361561001a575f80fd5b61002261066d565b005b5f3560e01c90816306fdde031461053d57508063095ea7b3146104bb57806318160ddd1461049e57806323b872dd146103bf5780632e1a7d4d14610297578063313ce5671461027c57806370a082311461024557806395d89b4114610141578063a9059cbb14610110578063d0e30db0146100fd5763dd62ed3e146100a9575f61000f565b346100f95760403660031901126100f9576100c261061f565b6100ca610635565b6001600160a01b039182165f908152600160209081526040808320949093168252928352819020549051908152f35b5f80fd5b5f3660031901126100f95761002261066d565b346100f95760403660031901126100f95761013661012c61061f565b6024359033610716565b602060405160018152f35b346100f9575f3660031901126100f9576040515f6004548060011c9060018116801561023b575b6020831081146102275782855290811561020357506001146101a5575b6101a1836101958185038261064b565b604051918291826105f5565b0390f35b91905060045f527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b915f905b8082106101e957509091508101602001610195610185565b9192600181602092548385880101520191019092916101d1565b60ff191660208086019190915291151560051b840190910191506101959050610185565b634e487b7160e01b5f52602260045260245ffd5b91607f1691610168565b346100f95760203660031901126100f9576001600160a01b0361026661061f565b165f525f602052602060405f2054604051908152f35b346100f9575f3660031901126100f957602060405160128152f35b346100f95760203660031901126100f95760043533156103ac57335f525f6020528060405f205481811061039357335f525f6020520360405f205580600254036002555f6040518281527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60203392a35f80808084335af13d1561038e573d67ffffffffffffffff811161037a576040519061033d601f8201601f19166020018361064b565b81525f60203d92013e5b156100f9576040519081527f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b6560203392a2005b634e487b7160e01b5f52604160045260245ffd5b610347565b63391434e360e21b5f523360045260245260445260645ffd5b634b637e8f60e11b5f525f60045260245ffd5b346100f95760603660031901126100f9576103d861061f565b6103e0610635565b6001600160a01b0382165f818152600160209081526040808320338452909152902054909260443592915f19811061041e575b506101369350610716565b83811061048357841561047057331561045d57610136945f52600160205260405f2060018060a01b0333165f526020528360405f209103905584610413565b634a1406b160e11b5f525f60045260245ffd5b63e602df0560e01b5f525f60045260245ffd5b8390637dc7a0d960e11b5f523360045260245260445260645ffd5b346100f9575f3660031901126100f9576020600254604051908152f35b346100f95760403660031901126100f9576104d461061f565b602435903315610470576001600160a01b031690811561045d57335f52600160205260405f20825f526020528060405f20556040519081527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560203392a3602060405160018152f35b346100f9575f3660031901126100f9575f6003548060011c906001811680156105eb575b60208310811461022757828552908115610203575060011461058d576101a1836101958185038261064b565b91905060035f527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b915f905b8082106105d157509091508101602001610195610185565b9192600181602092548385880101520191019092916105b9565b91607f1691610561565b602060409281835280519182918282860152018484015e5f828201840152601f01601f1916010190565b600435906001600160a01b03821682036100f957565b602435906001600160a01b03821682036100f957565b90601f8019910116810190811067ffffffffffffffff82111761037a57604052565b3315610703576002543481018091116106ef57600255335f525f60205260405f203481540190556040513481525f7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60203393a36040513481527fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c60203392a2565b634e487b7160e01b5f52601160045260245ffd5b63ec442f0560e01b5f525f60045260245ffd5b6001600160a01b03169081156103ac576001600160a01b031691821561070357815f525f60205260405f205481811061079457817fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92602092855f525f84520360405f2055845f525f825260405f20818154019055604051908152a3565b8263391434e360e21b5f5260045260245260445260645ffd","sourceMap":"462:2395:92:-:0;;;;;;;;;;-1:-1:-1;462:2395:92;;;;;;;;;2794:61;;:::i;:::-;462:2395;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;462:2395:92;;;;;;:::i;:::-;;;:::i;:::-;-1:-1:-1;;;;;462:2395:92;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;462:2395:92;;;;;;:::i;:::-;;;;;;-1:-1:-1;;462:2395:92;;;;3388:5:44;462:2395:92;;:::i;:::-;;;735:10:54;;3388:5:44;:::i;:::-;462:2395:92;;;;;;;;;;;;;-1:-1:-1;;462:2395:92;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;462:2395:92;;-1:-1:-1;462:2395:92;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;462:2395:92;;;;;;;;;;;;;;;;;;;;-1:-1:-1;462:2395:92;;-1:-1:-1;462:2395:92;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;462:2395:92;;;;-1:-1:-1;;;;;462:2395:92;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;462:2395:92;;;;;;;2761:2:44;462:2395:92;;;;;;;;;-1:-1:-1;;462:2395:92;;;;;;735:10:54;7958:21:44;7954:89;;735:10:54;462:2395:92;;;;;;;;;;6244:19:44;;;6240:115;;735:10:54;462:2395:92;;;;;;;;;;;6714:21:44;462:2395:92;;6714:21:44;462:2395:92;;;;;;;6987:25:44;462:2395:92;735:10:54;6987:25:44;;462:2395:92;735:10:54;;;;;2469:27:92;;462:2395;;;;;;;;;;;;;;;;;-1:-1:-1;;462:2395:92;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;2538:23;462:2395;735:10:54;2538:23:92;;462:2395;;;;;;;;;;;;;;;;6240:115:44;6290:50;;;462:2395:92;6290:50:44;735:10:54;462:2395:92;;;;;;;;6290:50:44;7954:89;8002:30;;;462:2395:92;8002:30:44;462:2395:92;;;;;8002:30:44;462:2395:92;;;;;;-1:-1:-1;;462:2395:92;;;;;;:::i;:::-;;;:::i;:::-;-1:-1:-1;;;;;462:2395:92;;;;;;;;;;;;;;;735:10:54;462:2395:92;;;;;;;;;;;;;;-1:-1:-1;;10484:36:44;;10480:309;;462:2395:92;4890:5:44;;;;;:::i;10480:309::-;10540:24;;;10536:130;;9717:19;;9713:89;;735:10:54;9815:21:44;9811:90;;4890:5;462:2395:92;;;;;;;;;;;;;;735:10:54;462:2395:92;-1:-1:-1;462:2395:92;;;;;-1:-1:-1;462:2395:92;;;;;10480:309:44;;;9811:90;9859:31;;;462:2395:92;9859:31:44;462:2395:92;;;;;9859:31:44;9713:89;9759:32;;;462:2395:92;9759:32:44;462:2395:92;;;;;9759:32:44;10536:130;10591:60;;;;;462:2395:92;10591:60:44;735:10:54;462:2395:92;;;;;;;;10591:60:44;462:2395:92;;;;;;-1:-1:-1;;462:2395:92;;;;;2881:12:44;462:2395:92;;;;;;;;;;;;;-1:-1:-1;;462:2395:92;;;;;;:::i;:::-;;;735:10:54;;9717:19:44;9713:89;;-1:-1:-1;;;;;462:2395:92;;9815:21:44;;9811:90;;735:10:54;462:2395:92;;;;;;;;;-1:-1:-1;462:2395:92;;;;;-1:-1:-1;462:2395:92;;;;;;;9989:31:44;462:2395:92;735:10:54;9989:31:44;;462:2395:92;;;;;;;;;;;;;-1:-1:-1;;462:2395:92;;;;;1837:5:44;462:2395:92;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;1837:5:44;462:2395:92;;;;;;;;;;;;-1:-1:-1;462:2395:92;;-1:-1:-1;462:2395:92;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;462:2395:92;;;;:::o;:::-;;;;-1:-1:-1;;;;;462:2395:92;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;462:2395:92;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;1617:179::-;735:10:54;7432:21:44;7428:91;;6137:21;462:2395:92;1720:9;462:2395;;;;;;;6137:21:44;462:2395:92;735:10:54;7451:1:44;462:2395:92;7451:1:44;462:2395:92;;;7451:1:44;462:2395:92;1720:9;462:2395;;;;;;;1720:9;462:2395;;7451:1:44;6987:25;462:2395:92;735:10:54;6987:25:44;;462:2395:92;;1720:9;462:2395;;1771:18;462:2395;735:10:54;1771:18:92;;1617:179::o;462:2395::-;;;;7451:1:44;462:2395:92;;;;;7451:1:44;462:2395:92;7428:91:44;7476:32;;;7451:1;7476:32;7451:1;7476:32;462:2395:92;;7451:1:44;7476:32;5297:300;-1:-1:-1;;;;;462:2395:92;;5380:18:44;;5376:86;;-1:-1:-1;;;;;462:2395:92;;5475:16:44;;5471:86;;462:2395:92;5396:1:44;462:2395:92;5396:1:44;462:2395:92;;;5396:1:44;462:2395:92;;6244:19:44;;;6240:115;;462:2395:92;6987:25:44;462:2395:92;;;;5396:1:44;462:2395:92;5396:1:44;462:2395:92;;;;5396:1:44;462:2395:92;;;5396:1:44;462:2395:92;5396:1:44;462:2395:92;;;5396:1:44;462:2395:92;;;;;;;;;;;;6987:25:44;5297:300::o;6240:115::-;6290:50;;;;5396:1;6290:50;;462:2395:92;;;;;;5396:1:44;6290:50","linkReferences":{}},"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","decimals()":"313ce567","deposit()":"d0e30db0","name()":"06fdde03","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd","withdraw(uint256)":"2e1a7d4d"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"Wrapped Ether (WETH) is represents Ether on Ethereum as ERC20 token.      Based on WETH9:      - https://etherscan.io/address/0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2#code      This smart contract tries to be as similar as possible to Ethereum mainnet WETH9.\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Deposit(address,uint256)\":{\"details\":\"Emitted when `value` Ether is wrapped into tokens for account `to`. This event indicates that `to` deposited Ether and received an equivalent amount of wrapped tokens. Note that `value` may be zero.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"},\"Withdrawal(address,uint256)\":{\"details\":\"Emitted when `value` tokens are unwrapped into Ether by account `from`. This event indicates that `from` burned wrapped tokens and received an equivalent amount of Ether. Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"constructor\":{\"details\":\"Initializes the WrappedEther contract with the token name and symbol.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"deposit()\":{\"details\":\"Deposits Ether into the contract and mints an equivalent amount of wrapped tokens to the caller. Emits a {Deposit} event indicating the recipient and the amount deposited.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"},\"withdraw(uint256)\":{\"details\":\"Burns a specified amount of wrapped tokens from the caller and withdraws the equivalent amount of Ether. Emits a {Withdrawal} event indicating the sender and the amount withdrawn. Requirements: - The caller must have at least `value` tokens. - The contract must successfully send `value` Ether to the caller. Note: - Uses a low-level call to send Ether, which forwards all available gas. - Reverts if the Ether transfer fails.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/erc20/WrappedEther.sol\":\"WrappedEther\"},\"debug\":{\"revertStrings\":\"strip\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"appendCBOR\":false,\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin-foundry-upgrades/=lib/openzeppelin-foundry-upgrades/src/\",\":script/=script/\",\":src/=src/\",\":test/=test/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x19fdfb0f3b89a230e7dbd1cf416f1a6b531a3ee5db4da483f946320fc74afc0e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3490d794728f5bfecb46820431adaff71ba374141545ec20b650bb60353fac23\",\"dweb:/ipfs/QmPsfxjVpMcZbpE7BH93DzTpEaktESigEw4SmDzkXuJ4WR\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0x86b7b71a6aedefdad89b607378eeab1dcc5389b9ea7d17346d08af01d7190994\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1dc2db8d94a21eac8efe03adf574c419b08536409b416057a2b5b95cb772c43c\",\"dweb:/ipfs/QmZfqJCKVU1ScuX2A7s8WZdQEaikwJbDH5JBrBdKTUT4Gu\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x74ed01eb66b923d0d0cfe3be84604ac04b76482a55f9dd655e1ef4d367f95bc2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5282825a626cfe924e504274b864a652b0023591fa66f06a067b25b51ba9b303\",\"dweb:/ipfs/QmeCfPykghhMc81VJTrHTC7sF6CRvaA1FXVq2pJhwYp1dV\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xd6fa4088198f04eef10c5bce8a2f4d60554b7ec4b987f684393c01bf79b94d9f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f95ee0bbd4dd3ac730d066ba3e785ded4565e890dbec2fa7d3b9fe3bad9d0d6e\",\"dweb:/ipfs/QmSLr6bHkPFWT7ntj34jmwfyskpwo97T9jZUrk5sz3sdtR\"]},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"src/erc20/WrappedEther.sol\":{\"keccak256\":\"0x08d82de5eb120606fe228a1df49cecbf7569265552d6fe0f5e6fe7a8a5103759\",\"license\":\"GPL-3.0-or-later WITH Classpath-exception-2.0\",\"urls\":[\"bzz-raw://a856ecfc70d6f8cbe86888c3736938dded84b9b310454bea8703971d41b4e104\",\"dweb:/ipfs/QmdWzQVQJQDZobHE3zNLCdeDraGWvJs2Tw7nLR3NPv4B3m\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.30+commit.73712a01"},"language":"Solidity","output":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"allowance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"}],"type":"error","name":"ERC20InsufficientAllowance"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"}],"type":"error","name":"ERC20InsufficientBalance"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"type":"error","name":"ERC20InvalidApprover"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"type":"error","name":"ERC20InvalidReceiver"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"type":"error","name":"ERC20InvalidSender"},{"inputs":[{"internalType":"address","name":"spender","type":"address"}],"type":"error","name":"ERC20InvalidSpender"},{"inputs":[{"internalType":"address","name":"owner","type":"address","indexed":true},{"internalType":"address","name":"spender","type":"address","indexed":true},{"internalType":"uint256","name":"value","type":"uint256","indexed":false}],"type":"event","name":"Approval","anonymous":false},{"inputs":[{"internalType":"address","name":"to","type":"address","indexed":true},{"internalType":"uint256","name":"value","type":"uint256","indexed":false}],"type":"event","name":"Deposit","anonymous":false},{"inputs":[{"internalType":"address","name":"from","type":"address","indexed":true},{"internalType":"address","name":"to","type":"address","indexed":true},{"internalType":"uint256","name":"value","type":"uint256","indexed":false}],"type":"event","name":"Transfer","anonymous":false},{"inputs":[{"internalType":"address","name":"from","type":"address","indexed":true},{"internalType":"uint256","name":"value","type":"uint256","indexed":false}],"type":"event","name":"Withdrawal","anonymous":false},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"stateMutability":"view","type":"function","name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"stateMutability":"view","type":"function","name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}]},{"inputs":[],"stateMutability":"payable","type":"function","name":"deposit"},{"inputs":[],"stateMutability":"view","type":"function","name":"name","outputs":[{"internalType":"string","name":"","type":"string"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"uint256","name":"value","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"withdraw"},{"inputs":[],"stateMutability":"payable","type":"receive"}],"devdoc":{"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."},"balanceOf(address)":{"details":"Returns the value of tokens owned by `account`."},"constructor":{"details":"Initializes the WrappedEther contract with the token name and symbol."},"decimals()":{"details":"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"deposit()":{"details":"Deposits Ether into the contract and mints an equivalent amount of wrapped tokens to the caller. Emits a {Deposit} event indicating the recipient and the amount deposited."},"name()":{"details":"Returns the name of the token."},"symbol()":{"details":"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{"details":"Returns the value of tokens in existence."},"transfer(address,uint256)":{"details":"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."},"transferFrom(address,address,uint256)":{"details":"See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."},"withdraw(uint256)":{"details":"Burns a specified amount of wrapped tokens from the caller and withdraws the equivalent amount of Ether. Emits a {Withdrawal} event indicating the sender and the amount withdrawn. Requirements: - The caller must have at least `value` tokens. - The contract must successfully send `value` Ether to the caller. Note: - Uses a low-level call to send Ether, which forwards all available gas. - Reverts if the Ether transfer fails."}},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/","openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts/=lib/openzeppelin-contracts/","openzeppelin-foundry-upgrades/=lib/openzeppelin-foundry-upgrades/src/","script/=script/","src/=src/","test/=test/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"none","appendCBOR":false},"compilationTarget":{"src/erc20/WrappedEther.sol":"WrappedEther"},"evmVersion":"prague","libraries":{},"viaIR":true},"sources":{"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol":{"keccak256":"0x19fdfb0f3b89a230e7dbd1cf416f1a6b531a3ee5db4da483f946320fc74afc0e","urls":["bzz-raw://3490d794728f5bfecb46820431adaff71ba374141545ec20b650bb60353fac23","dweb:/ipfs/QmPsfxjVpMcZbpE7BH93DzTpEaktESigEw4SmDzkXuJ4WR"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol":{"keccak256":"0x86b7b71a6aedefdad89b607378eeab1dcc5389b9ea7d17346d08af01d7190994","urls":["bzz-raw://1dc2db8d94a21eac8efe03adf574c419b08536409b416057a2b5b95cb772c43c","dweb:/ipfs/QmZfqJCKVU1ScuX2A7s8WZdQEaikwJbDH5JBrBdKTUT4Gu"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol":{"keccak256":"0x74ed01eb66b923d0d0cfe3be84604ac04b76482a55f9dd655e1ef4d367f95bc2","urls":["bzz-raw://5282825a626cfe924e504274b864a652b0023591fa66f06a067b25b51ba9b303","dweb:/ipfs/QmeCfPykghhMc81VJTrHTC7sF6CRvaA1FXVq2pJhwYp1dV"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"keccak256":"0xd6fa4088198f04eef10c5bce8a2f4d60554b7ec4b987f684393c01bf79b94d9f","urls":["bzz-raw://f95ee0bbd4dd3ac730d066ba3e785ded4565e890dbec2fa7d3b9fe3bad9d0d6e","dweb:/ipfs/QmSLr6bHkPFWT7ntj34jmwfyskpwo97T9jZUrk5sz3sdtR"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/utils/Context.sol":{"keccak256":"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2","urls":["bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12","dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF"],"license":"MIT"},"src/erc20/WrappedEther.sol":{"keccak256":"0x08d82de5eb120606fe228a1df49cecbf7569265552d6fe0f5e6fe7a8a5103759","urls":["bzz-raw://a856ecfc70d6f8cbe86888c3736938dded84b9b310454bea8703971d41b4e104","dweb:/ipfs/QmdWzQVQJQDZobHE3zNLCdeDraGWvJs2Tw7nLR3NPv4B3m"],"license":"GPL-3.0-or-later WITH Classpath-exception-2.0"}},"version":1},"storageLayout":{"storage":[{"astId":42199,"contract":"src/erc20/WrappedEther.sol:WrappedEther","label":"_balances","offset":0,"slot":"0","type":"t_mapping(t_address,t_uint256)"},{"astId":42205,"contract":"src/erc20/WrappedEther.sol:WrappedEther","label":"_allowances","offset":0,"slot":"1","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"},{"astId":42207,"contract":"src/erc20/WrappedEther.sol:WrappedEther","label":"_totalSupply","offset":0,"slot":"2","type":"t_uint256"},{"astId":42209,"contract":"src/erc20/WrappedEther.sol:WrappedEther","label":"_name","offset":0,"slot":"3","type":"t_string_storage"},{"astId":42211,"contract":"src/erc20/WrappedEther.sol:WrappedEther","label":"_symbol","offset":0,"slot":"4","type":"t_string_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"irOptimized":"/// @use-src 35:\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol\", 44:\"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\", 45:\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\", 48:\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\", 54:\"lib/openzeppelin-contracts/contracts/utils/Context.sol\", 92:\"src/erc20/WrappedEther.sol\"\nobject \"WrappedEther_62767\" {\n    code {\n        {\n            /// @src 92:462:2857  \"contract WrappedEther is ERC20 {...\"\n            mstore(64, memoryguard(0x80))\n            if callvalue() { revert(0, 0) }\n            let memPtr := /** @src -1:-1:-1 */ 0\n            /// @src 92:462:2857  \"contract WrappedEther is ERC20 {...\"\n            let size := /** @src -1:-1:-1 */ 0\n            /// @src 92:462:2857  \"contract WrappedEther is ERC20 {...\"\n            size := /** @src -1:-1:-1 */ 0\n            /// @src 92:462:2857  \"contract WrappedEther is ERC20 {...\"\n            let memPtr_1 := mload(64)\n            let newFreePtr := add(memPtr_1, 64)\n            if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, memPtr_1))\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(/** @src -1:-1:-1 */ 0, /** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ 0x24)\n            }\n            mstore(64, newFreePtr)\n            memPtr := memPtr_1\n            mstore(memPtr_1, 13)\n            mstore(add(memPtr_1, 32), \"Wrapped Ether\")\n            /// @src 92:1178:1193  \"\\\"Wrapped Ether\\\"\"\n            let memPtr_2 := /** @src -1:-1:-1 */ 0\n            /// @src 92:462:2857  \"contract WrappedEther is ERC20 {...\"\n            let size_1 := /** @src -1:-1:-1 */ 0\n            /// @src 92:462:2857  \"contract WrappedEther is ERC20 {...\"\n            size_1 := /** @src -1:-1:-1 */ 0\n            /// @src 92:462:2857  \"contract WrappedEther is ERC20 {...\"\n            let memPtr_3 := mload(64)\n            let newFreePtr_1 := add(memPtr_3, 64)\n            if or(gt(newFreePtr_1, sub(shl(64, 1), 1)), lt(newFreePtr_1, memPtr_3))\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ shl(224, 0x4e487b71))\n                mstore(/** @src 92:1178:1193  \"\\\"Wrapped Ether\\\"\" */ 4, /** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ 0x41)\n                revert(/** @src -1:-1:-1 */ 0, /** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ 0x24)\n            }\n            mstore(64, newFreePtr_1)\n            memPtr_2 := memPtr_3\n            mstore(memPtr_3, /** @src 92:1178:1193  \"\\\"Wrapped Ether\\\"\" */ 4)\n            mstore(add(memPtr_3, /** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ 32), /** @src 92:1178:1193  \"\\\"Wrapped Ether\\\"\" */ \"WETH\")\n            /// @src 92:462:2857  \"contract WrappedEther is ERC20 {...\"\n            let newLen := mload(memPtr_1)\n            if gt(newLen, sub(shl(64, 1), 1))\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ shl(224, 0x4e487b71))\n                mstore(/** @src 92:1178:1193  \"\\\"Wrapped Ether\\\"\" */ 4, /** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ 0x41)\n                revert(/** @src -1:-1:-1 */ 0, /** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ 0x24)\n            }\n            let _1 := sload(/** @src 44:1648:1661  \"_name = name_\" */ 0x03)\n            /// @src 92:462:2857  \"contract WrappedEther is ERC20 {...\"\n            let length := /** @src -1:-1:-1 */ 0\n            /// @src 92:462:2857  \"contract WrappedEther is ERC20 {...\"\n            length := shr(1, _1)\n            let outOfPlaceEncoding := and(_1, 1)\n            if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n            if eq(outOfPlaceEncoding, lt(length, 32))\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ shl(224, 0x4e487b71))\n                mstore(/** @src 92:1178:1193  \"\\\"Wrapped Ether\\\"\" */ 4, /** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ 0x22)\n                revert(/** @src -1:-1:-1 */ 0, /** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ 0x24)\n            }\n            if gt(length, 31)\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 44:1648:1661  \"_name = name_\" */ 0x03)\n                /// @src 92:462:2857  \"contract WrappedEther is ERC20 {...\"\n                let data := keccak256(/** @src -1:-1:-1 */ 0, /** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ 32)\n                let deleteStart := add(data, shr(5, add(newLen, 31)))\n                if lt(newLen, 32) { deleteStart := data }\n                let _2 := add(data, shr(5, add(length, 31)))\n                let start := deleteStart\n                for { } lt(start, _2) { start := add(start, 1) }\n                {\n                    sstore(start, /** @src -1:-1:-1 */ 0)\n                }\n            }\n            /// @src 92:462:2857  \"contract WrappedEther is ERC20 {...\"\n            let srcOffset := /** @src -1:-1:-1 */ 0\n            /// @src 92:462:2857  \"contract WrappedEther is ERC20 {...\"\n            srcOffset := 32\n            switch gt(newLen, 31)\n            case 1 {\n                let loopEnd := and(newLen, not(31))\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 44:1648:1661  \"_name = name_\" */ 0x03)\n                /// @src 92:462:2857  \"contract WrappedEther is ERC20 {...\"\n                let dstPtr := keccak256(/** @src -1:-1:-1 */ 0, /** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ srcOffset)\n                let i := /** @src -1:-1:-1 */ 0\n                /// @src 92:462:2857  \"contract WrappedEther is ERC20 {...\"\n                for { } lt(i, loopEnd) { i := add(i, 32) }\n                {\n                    sstore(dstPtr, mload(add(memPtr_1, srcOffset)))\n                    dstPtr := add(dstPtr, 1)\n                    srcOffset := add(srcOffset, 32)\n                }\n                if lt(loopEnd, newLen)\n                {\n                    let lastValue := mload(add(memPtr_1, srcOffset))\n                    sstore(dstPtr, and(lastValue, not(shr(and(shl(/** @src 44:1648:1661  \"_name = name_\" */ 0x03, /** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ newLen), 248), not(0)))))\n                }\n                sstore(/** @src 44:1648:1661  \"_name = name_\" */ 0x03, /** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ add(shl(1, newLen), 1))\n            }\n            default {\n                let value := /** @src -1:-1:-1 */ 0\n                /// @src 92:462:2857  \"contract WrappedEther is ERC20 {...\"\n                if newLen\n                {\n                    value := mload(add(memPtr_1, srcOffset))\n                }\n                sstore(/** @src 44:1648:1661  \"_name = name_\" */ 0x03, /** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ or(and(value, not(shr(shl(/** @src 44:1648:1661  \"_name = name_\" */ 0x03, /** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ newLen), not(0)))), shl(1, newLen)))\n            }\n            let newLen_1 := mload(memPtr_3)\n            if gt(newLen_1, sub(shl(64, 1), 1))\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ shl(224, 0x4e487b71))\n                mstore(/** @src 92:1178:1193  \"\\\"Wrapped Ether\\\"\" */ 4, /** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ 0x41)\n                revert(/** @src -1:-1:-1 */ 0, /** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ 0x24)\n            }\n            let _3 := sload(/** @src 92:1178:1193  \"\\\"Wrapped Ether\\\"\" */ 4)\n            /// @src 92:462:2857  \"contract WrappedEther is ERC20 {...\"\n            let length_1 := /** @src -1:-1:-1 */ 0\n            /// @src 92:462:2857  \"contract WrappedEther is ERC20 {...\"\n            length_1 := shr(1, _3)\n            let outOfPlaceEncoding_1 := and(_3, 1)\n            if iszero(outOfPlaceEncoding_1)\n            {\n                length_1 := and(length_1, 0x7f)\n            }\n            if eq(outOfPlaceEncoding_1, lt(length_1, 32))\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ shl(224, 0x4e487b71))\n                mstore(/** @src 92:1178:1193  \"\\\"Wrapped Ether\\\"\" */ 4, /** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ 0x22)\n                revert(/** @src -1:-1:-1 */ 0, /** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ 0x24)\n            }\n            if gt(length_1, 31)\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 92:1178:1193  \"\\\"Wrapped Ether\\\"\" */ 4)\n                /// @src 92:462:2857  \"contract WrappedEther is ERC20 {...\"\n                let data_1 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ 32)\n                let deleteStart_1 := add(data_1, shr(5, add(newLen_1, 31)))\n                if lt(newLen_1, 32) { deleteStart_1 := data_1 }\n                let _4 := add(data_1, shr(5, add(length_1, 31)))\n                let start_1 := deleteStart_1\n                for { } lt(start_1, _4) { start_1 := add(start_1, 1) }\n                {\n                    sstore(start_1, /** @src -1:-1:-1 */ 0)\n                }\n            }\n            /// @src 92:462:2857  \"contract WrappedEther is ERC20 {...\"\n            let srcOffset_1 := /** @src -1:-1:-1 */ 0\n            /// @src 92:462:2857  \"contract WrappedEther is ERC20 {...\"\n            srcOffset_1 := 32\n            switch gt(newLen_1, 31)\n            case 1 {\n                let loopEnd_1 := and(newLen_1, not(31))\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 92:1178:1193  \"\\\"Wrapped Ether\\\"\" */ 4)\n                /// @src 92:462:2857  \"contract WrappedEther is ERC20 {...\"\n                let dstPtr_1 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ srcOffset_1)\n                let i_1 := /** @src -1:-1:-1 */ 0\n                /// @src 92:462:2857  \"contract WrappedEther is ERC20 {...\"\n                for { } lt(i_1, loopEnd_1) { i_1 := add(i_1, 32) }\n                {\n                    sstore(dstPtr_1, mload(add(memPtr_3, srcOffset_1)))\n                    dstPtr_1 := add(dstPtr_1, 1)\n                    srcOffset_1 := add(srcOffset_1, 32)\n                }\n                if lt(loopEnd_1, newLen_1)\n                {\n                    let lastValue_1 := mload(add(memPtr_3, srcOffset_1))\n                    sstore(dstPtr_1, and(lastValue_1, not(shr(and(shl(/** @src 44:1648:1661  \"_name = name_\" */ 0x03, /** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ newLen_1), 248), not(0)))))\n                }\n                sstore(/** @src 92:1178:1193  \"\\\"Wrapped Ether\\\"\" */ 4, /** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ add(shl(1, newLen_1), 1))\n            }\n            default {\n                let value_1 := /** @src -1:-1:-1 */ 0\n                /// @src 92:462:2857  \"contract WrappedEther is ERC20 {...\"\n                if newLen_1\n                {\n                    value_1 := mload(add(memPtr_3, srcOffset_1))\n                }\n                sstore(/** @src 92:1178:1193  \"\\\"Wrapped Ether\\\"\" */ 4, /** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ or(and(value_1, not(shr(shl(/** @src 44:1648:1661  \"_name = name_\" */ 0x03, /** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ newLen_1), not(0)))), shl(1, newLen_1)))\n            }\n            let _5 := mload(64)\n            let _6 := datasize(\"WrappedEther_62767_deployed\")\n            codecopy(_5, dataoffset(\"WrappedEther_62767_deployed\"), _6)\n            return(_5, _6)\n        }\n    }\n    /// @use-src 44:\"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\", 54:\"lib/openzeppelin-contracts/contracts/utils/Context.sol\", 92:\"src/erc20/WrappedEther.sol\"\n    object \"WrappedEther_62767_deployed\" {\n        code {\n            {\n                /// @src 92:462:2857  \"contract WrappedEther is ERC20 {...\"\n                let _1 := memoryguard(0x80)\n                mstore(64, _1)\n                if iszero(lt(calldatasize(), 4))\n                {\n                    switch shr(224, calldataload(0))\n                    case 0x06fdde03 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let ret := 0\n                        let slotValue := sload(/** @src 44:1837:1842  \"_name\" */ 0x03)\n                        /// @src 92:462:2857  \"contract WrappedEther is ERC20 {...\"\n                        let length := 0\n                        length := shr(1, slotValue)\n                        let outOfPlaceEncoding := and(slotValue, 1)\n                        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n                        if eq(outOfPlaceEncoding, lt(length, 32))\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x22)\n                            revert(0, 0x24)\n                        }\n                        mstore(_1, length)\n                        switch outOfPlaceEncoding\n                        case 0 {\n                            mstore(add(_1, 32), and(slotValue, not(255)))\n                            ret := add(add(_1, shl(5, iszero(iszero(length)))), 32)\n                        }\n                        case 1 {\n                            mstore(0, /** @src 44:1837:1842  \"_name\" */ 0x03)\n                            /// @src 92:462:2857  \"contract WrappedEther is ERC20 {...\"\n                            let dataPos := 87903029871075914254377627908054574944891091886930582284385770809450030037083\n                            let i := 0\n                            for { } lt(i, length) { i := add(i, 32) }\n                            {\n                                mstore(add(add(_1, i), 32), sload(dataPos))\n                                dataPos := add(dataPos, 1)\n                            }\n                            ret := add(add(_1, i), 32)\n                        }\n                        finalize_allocation(_1, sub(ret, _1))\n                        let memPos := mload(64)\n                        return(memPos, sub(abi_encode_string(memPos, _1), memPos))\n                    }\n                    case 0x095ea7b3 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 64) { revert(0, 0) }\n                        let value0 := abi_decode_t_address()\n                        let value := calldataload(36)\n                        /// @src 44:9713:9802  \"if (owner == address(0)) {...\"\n                        if /** @src 44:9717:9736  \"owner == address(0)\" */ iszero(/** @src 54:735:745  \"msg.sender\" */ caller())\n                        /// @src 44:9713:9802  \"if (owner == address(0)) {...\"\n                        {\n                            /// @src 44:9759:9791  \"ERC20InvalidApprover(address(0))\"\n                            mstore(/** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ 0, /** @src 44:9759:9791  \"ERC20InvalidApprover(address(0))\" */ shl(224, 0xe602df05))\n                            /// @src 92:462:2857  \"contract WrappedEther is ERC20 {...\"\n                            mstore(4, 0)\n                            /// @src 44:9759:9791  \"ERC20InvalidApprover(address(0))\"\n                            revert(/** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ 0, 36)\n                        }\n                        let _2 := and(/** @src 44:9815:9836  \"spender == address(0)\" */ value0, /** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ sub(shl(160, 1), 1))\n                        /// @src 44:9811:9901  \"if (spender == address(0)) {...\"\n                        if /** @src 44:9815:9836  \"spender == address(0)\" */ iszero(/** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ _2)\n                        /// @src 44:9811:9901  \"if (spender == address(0)) {...\"\n                        {\n                            /// @src 44:9859:9890  \"ERC20InvalidSpender(address(0))\"\n                            mstore(/** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ 0, /** @src 44:9859:9890  \"ERC20InvalidSpender(address(0))\" */ shl(225, 0x4a1406b1))\n                            /// @src 92:462:2857  \"contract WrappedEther is ERC20 {...\"\n                            mstore(4, 0)\n                            /// @src 44:9859:9890  \"ERC20InvalidSpender(address(0))\"\n                            revert(/** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ 0, 36)\n                        }\n                        mstore(0, /** @src 54:735:745  \"msg.sender\" */ caller())\n                        /// @src 92:462:2857  \"contract WrappedEther is ERC20 {...\"\n                        mstore(32, 1)\n                        let dataSlot := keccak256(0, 64)\n                        /// @src 44:9910:9937  \"_allowances[owner][spender]\"\n                        let dataSlot_1 := /** @src -1:-1:-1 */ 0\n                        /// @src 92:462:2857  \"contract WrappedEther is ERC20 {...\"\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ _2)\n                        mstore(0x20, /** @src 44:9910:9928  \"_allowances[owner]\" */ dataSlot)\n                        /// @src 92:462:2857  \"contract WrappedEther is ERC20 {...\"\n                        dataSlot_1 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ 0x40)\n                        sstore(/** @src 44:9910:9937  \"_allowances[owner][spender]\" */ dataSlot_1, /** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ value)\n                        /// @src 44:9989:10020  \"Approval(owner, spender, value)\"\n                        let _3 := /** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ mload(64)\n                        mstore(_3, value)\n                        /// @src 44:9989:10020  \"Approval(owner, spender, value)\"\n                        log3(_3, /** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ 32, /** @src 44:9989:10020  \"Approval(owner, spender, value)\" */ 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, /** @src 54:735:745  \"msg.sender\" */ caller(), /** @src 44:9989:10020  \"Approval(owner, spender, value)\" */ _2)\n                        /// @src 92:462:2857  \"contract WrappedEther is ERC20 {...\"\n                        let memPos_1 := mload(64)\n                        mstore(memPos_1, 1)\n                        return(memPos_1, 32)\n                    }\n                    case 0x18160ddd {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let _4 := sload(/** @src 44:2881:2893  \"_totalSupply\" */ 0x02)\n                        /// @src 92:462:2857  \"contract WrappedEther is ERC20 {...\"\n                        let memPos_2 := mload(64)\n                        mstore(memPos_2, _4)\n                        return(memPos_2, 32)\n                    }\n                    case 0x23b872dd {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 96) { revert(0, 0) }\n                        let value0_1 := abi_decode_t_address()\n                        let value1 := abi_decode_address()\n                        let value_1 := calldataload(68)\n                        let _5 := and(value0_1, sub(shl(160, 1), 1))\n                        mstore(0, _5)\n                        mstore(32, 1)\n                        let dataSlot_2 := keccak256(0, 64)\n                        /// @src 44:3561:3588  \"_allowances[owner][spender]\"\n                        let dataSlot_3 := /** @src -1:-1:-1 */ 0\n                        /// @src 92:462:2857  \"contract WrappedEther is ERC20 {...\"\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ and(/** @src 54:735:745  \"msg.sender\" */ caller(), /** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ sub(shl(160, 1), 1)))\n                        mstore(0x20, /** @src 44:3561:3579  \"_allowances[owner]\" */ dataSlot_2)\n                        /// @src 92:462:2857  \"contract WrappedEther is ERC20 {...\"\n                        dataSlot_3 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ 0x40)\n                        let _6 := sload(/** @src 44:3561:3588  \"_allowances[owner][spender]\" */ dataSlot_3)\n                        /// @src 44:10480:10789  \"if (currentAllowance < type(uint256).max) {...\"\n                        if /** @src 44:10484:10520  \"currentAllowance < type(uint256).max\" */ lt(_6, /** @src 44:10503:10520  \"type(uint256).max\" */ not(0))\n                        /// @src 44:10480:10789  \"if (currentAllowance < type(uint256).max) {...\"\n                        {\n                            /// @src 44:10536:10666  \"if (currentAllowance < value) {...\"\n                            if /** @src 44:10540:10564  \"currentAllowance < value\" */ lt(_6, value_1)\n                            /// @src 44:10536:10666  \"if (currentAllowance < value) {...\"\n                            {\n                                /// @src 44:10591:10651  \"ERC20InsufficientAllowance(spender, currentAllowance, value)\"\n                                mstore(/** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ 0, /** @src 44:10591:10651  \"ERC20InsufficientAllowance(spender, currentAllowance, value)\" */ shl(225, 0x7dc7a0d9))\n                                /// @src 92:462:2857  \"contract WrappedEther is ERC20 {...\"\n                                mstore(4, /** @src 54:735:745  \"msg.sender\" */ caller())\n                                /// @src 92:462:2857  \"contract WrappedEther is ERC20 {...\"\n                                mstore(36, _6)\n                                mstore(68, value_1)\n                                /// @src 44:10591:10651  \"ERC20InsufficientAllowance(spender, currentAllowance, value)\"\n                                revert(/** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ 0, 100)\n                            }\n                            /// @src 44:9713:9802  \"if (owner == address(0)) {...\"\n                            if /** @src 44:9717:9736  \"owner == address(0)\" */ iszero(/** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ _5)\n                            /// @src 44:9713:9802  \"if (owner == address(0)) {...\"\n                            {\n                                /// @src 44:9759:9791  \"ERC20InvalidApprover(address(0))\"\n                                mstore(/** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ 0, /** @src 44:9759:9791  \"ERC20InvalidApprover(address(0))\" */ shl(224, 0xe602df05))\n                                /// @src 92:462:2857  \"contract WrappedEther is ERC20 {...\"\n                                mstore(4, 0)\n                                /// @src 44:9759:9791  \"ERC20InvalidApprover(address(0))\"\n                                revert(/** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ 0, 36)\n                            }\n                            /// @src 44:9811:9901  \"if (spender == address(0)) {...\"\n                            if /** @src 44:9815:9836  \"spender == address(0)\" */ iszero(/** @src 54:735:745  \"msg.sender\" */ caller())\n                            /// @src 44:9811:9901  \"if (spender == address(0)) {...\"\n                            {\n                                /// @src 44:9859:9890  \"ERC20InvalidSpender(address(0))\"\n                                mstore(/** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ 0, /** @src 44:9859:9890  \"ERC20InvalidSpender(address(0))\" */ shl(225, 0x4a1406b1))\n                                /// @src 92:462:2857  \"contract WrappedEther is ERC20 {...\"\n                                mstore(4, 0)\n                                /// @src 44:9859:9890  \"ERC20InvalidSpender(address(0))\"\n                                revert(/** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ 0, 36)\n                            }\n                            mstore(0, _5)\n                            mstore(32, 1)\n                            let dataSlot_4 := keccak256(0, 64)\n                            /// @src 44:9910:9937  \"_allowances[owner][spender]\"\n                            let dataSlot_5 := /** @src -1:-1:-1 */ 0\n                            /// @src 92:462:2857  \"contract WrappedEther is ERC20 {...\"\n                            mstore(/** @src -1:-1:-1 */ 0, /** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ and(/** @src 54:735:745  \"msg.sender\" */ caller(), /** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ sub(shl(160, 1), 1)))\n                            mstore(0x20, /** @src 44:9910:9928  \"_allowances[owner]\" */ dataSlot_4)\n                            /// @src 92:462:2857  \"contract WrappedEther is ERC20 {...\"\n                            dataSlot_5 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ 0x40)\n                            sstore(/** @src 44:9910:9937  \"_allowances[owner][spender]\" */ dataSlot_5, /** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ sub(/** @src 44:10732:10756  \"currentAllowance - value\" */ _6, value_1))\n                        }\n                        /// @src 44:4890:4895  \"value\"\n                        fun_transfer(value0_1, value1, value_1)\n                        /// @src 92:462:2857  \"contract WrappedEther is ERC20 {...\"\n                        let memPos_3 := mload(64)\n                        mstore(memPos_3, 1)\n                        return(memPos_3, 32)\n                    }\n                    case 0x2e1a7d4d {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        let value_2 := calldataload(4)\n                        /// @src 44:7958:7979  \"account == address(0)\"\n                        let _7 := iszero(/** @src 54:735:745  \"msg.sender\" */ caller())\n                        /// @src 44:7954:8043  \"if (account == address(0)) {...\"\n                        if /** @src 44:7958:7979  \"account == address(0)\" */ _7\n                        /// @src 44:7954:8043  \"if (account == address(0)) {...\"\n                        {\n                            /// @src 44:8002:8032  \"ERC20InvalidSender(address(0))\"\n                            mstore(/** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ 0, /** @src 44:8002:8032  \"ERC20InvalidSender(address(0))\" */ shl(225, 0x4b637e8f))\n                            /// @src 92:462:2857  \"contract WrappedEther is ERC20 {...\"\n                            mstore(4, 0)\n                            /// @src 44:8002:8032  \"ERC20InvalidSender(address(0))\"\n                            revert(/** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ 0, 36)\n                        }\n                        /// @src 44:5997:6537  \"if (from == address(0)) {...\"\n                        _7 := /** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ 0\n                        mstore(0, /** @src 54:735:745  \"msg.sender\" */ caller())\n                        /// @src 92:462:2857  \"contract WrappedEther is ERC20 {...\"\n                        mstore(32, 0)\n                        let _8 := sload(keccak256(0, 64))\n                        /// @src 44:6240:6355  \"if (fromBalance < value) {...\"\n                        if /** @src 44:6244:6263  \"fromBalance < value\" */ lt(_8, value_2)\n                        /// @src 44:6240:6355  \"if (fromBalance < value) {...\"\n                        {\n                            /// @src 44:6290:6340  \"ERC20InsufficientBalance(from, fromBalance, value)\"\n                            mstore(/** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ 0, /** @src 44:6290:6340  \"ERC20InsufficientBalance(from, fromBalance, value)\" */ shl(226, 0x391434e3))\n                            /// @src 92:462:2857  \"contract WrappedEther is ERC20 {...\"\n                            mstore(4, /** @src 54:735:745  \"msg.sender\" */ caller())\n                            /// @src 92:462:2857  \"contract WrappedEther is ERC20 {...\"\n                            mstore(36, _8)\n                            mstore(68, value_2)\n                            /// @src 44:6290:6340  \"ERC20InsufficientBalance(from, fromBalance, value)\"\n                            revert(/** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ 0, 100)\n                        }\n                        mstore(0, /** @src 54:735:745  \"msg.sender\" */ caller())\n                        /// @src 92:462:2857  \"contract WrappedEther is ERC20 {...\"\n                        mstore(32, 0)\n                        sstore(keccak256(0, 64), sub(/** @src 44:6493:6512  \"fromBalance - value\" */ _8, value_2))\n                        /// @src 92:462:2857  \"contract WrappedEther is ERC20 {...\"\n                        sstore(/** @src 44:6714:6735  \"_totalSupply -= value\" */ 0x02, /** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ sub(sload(/** @src 44:6714:6735  \"_totalSupply -= value\" */ 0x02), /** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ value_2))\n                        /// @src 44:6987:7012  \"Transfer(from, to, value)\"\n                        let _9 := /** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ mload(64)\n                        mstore(_9, value_2)\n                        /// @src 44:6987:7012  \"Transfer(from, to, value)\"\n                        log3(_9, /** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ 32, /** @src 44:6987:7012  \"Transfer(from, to, value)\" */ 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, /** @src 54:735:745  \"msg.sender\" */ caller(), /** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ 0)\n                        /// @src 92:2469:2496  \"from.call{value: value}(\\\"\\\")\"\n                        let expr_component := call(gas(), /** @src 54:735:745  \"msg.sender\" */ caller(), /** @src 92:2469:2496  \"from.call{value: value}(\\\"\\\")\" */ value_2, /** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ 0, 0, 0, 0)\n                        /// @src 92:2469:2496  \"from.call{value: value}(\\\"\\\")\"\n                        let data := /** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ 0\n                        switch returndatasize()\n                        case 0 { data := 96 }\n                        default {\n                            let _10 := returndatasize()\n                            if gt(_10, 0xffffffffffffffff)\n                            {\n                                mstore(0, shl(224, 0x4e487b71))\n                                mstore(4, 0x41)\n                                revert(0, 0x24)\n                            }\n                            let memPtr := mload(64)\n                            finalize_allocation(memPtr, add(and(add(_10, 31), not(31)), 32))\n                            mstore(memPtr, _10)\n                            data := memPtr\n                            returndatacopy(add(memPtr, 32), 0, returndatasize())\n                        }\n                        if iszero(expr_component) { revert(0, 0) }\n                        /// @src 92:2538:2561  \"Withdrawal(from, value)\"\n                        let _11 := /** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ mload(64)\n                        mstore(_11, value_2)\n                        /// @src 92:2538:2561  \"Withdrawal(from, value)\"\n                        log2(_11, /** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ 32, /** @src 92:2538:2561  \"Withdrawal(from, value)\" */ 0x7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b65, /** @src 54:735:745  \"msg.sender\" */ caller())\n                        /// @src 92:462:2857  \"contract WrappedEther is ERC20 {...\"\n                        return(0, 0)\n                    }\n                    case 0x313ce567 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let memPos_4 := mload(64)\n                        mstore(memPos_4, /** @src 44:2761:2763  \"18\" */ 0x12)\n                        /// @src 92:462:2857  \"contract WrappedEther is ERC20 {...\"\n                        return(memPos_4, 32)\n                    }\n                    case 0x70a08231 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        mstore(0, and(abi_decode_t_address(), sub(shl(160, 1), 1)))\n                        mstore(32, 0)\n                        let _12 := sload(keccak256(0, 64))\n                        let memPos_5 := mload(64)\n                        mstore(memPos_5, _12)\n                        return(memPos_5, 32)\n                    }\n                    case 0x95d89b41 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let memPtr_1 := mload(64)\n                        let ret_1 := 0\n                        let slotValue_1 := sload(4)\n                        let length_1 := 0\n                        length_1 := shr(1, slotValue_1)\n                        let outOfPlaceEncoding_1 := and(slotValue_1, 1)\n                        if iszero(outOfPlaceEncoding_1)\n                        {\n                            length_1 := and(length_1, 0x7f)\n                        }\n                        if eq(outOfPlaceEncoding_1, lt(length_1, 32))\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x22)\n                            revert(0, 0x24)\n                        }\n                        mstore(memPtr_1, length_1)\n                        switch outOfPlaceEncoding_1\n                        case 0 {\n                            mstore(add(memPtr_1, 32), and(slotValue_1, not(255)))\n                            ret_1 := add(add(memPtr_1, shl(5, iszero(iszero(length_1)))), 32)\n                        }\n                        case 1 {\n                            mstore(0, 4)\n                            let dataPos_1 := 62514009886607029107290561805838585334079798074568712924583230797734656856475\n                            let i_1 := 0\n                            for { } lt(i_1, length_1) { i_1 := add(i_1, 32) }\n                            {\n                                mstore(add(add(memPtr_1, i_1), 32), sload(dataPos_1))\n                                dataPos_1 := add(dataPos_1, 1)\n                            }\n                            ret_1 := add(add(memPtr_1, i_1), 32)\n                        }\n                        finalize_allocation(memPtr_1, sub(ret_1, memPtr_1))\n                        let memPos_6 := mload(64)\n                        return(memPos_6, sub(abi_encode_string(memPos_6, memPtr_1), memPos_6))\n                    }\n                    case 0xa9059cbb {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 64) { revert(0, 0) }\n                        let value0_2 := abi_decode_t_address()\n                        /// @src 44:3388:3393  \"value\"\n                        fun_transfer(/** @src 54:735:745  \"msg.sender\" */ caller(), /** @src 44:3388:3393  \"value\" */ value0_2, /** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ calldataload(36))\n                        let memPos_7 := mload(64)\n                        mstore(memPos_7, 1)\n                        return(memPos_7, 32)\n                    }\n                    case 0xd0e30db0 {\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        fun_deposit()\n                        return(0, 0)\n                    }\n                    case 0xdd62ed3e {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 64) { revert(0, 0) }\n                        let value0_3 := abi_decode_t_address()\n                        let value1_1 := abi_decode_address()\n                        mstore(0, and(value0_3, sub(shl(160, 1), 1)))\n                        mstore(32, /** @src 44:3561:3572  \"_allowances\" */ 0x01)\n                        /// @src 92:462:2857  \"contract WrappedEther is ERC20 {...\"\n                        let dataSlot_6 := keccak256(0, 64)\n                        /// @src 44:3561:3588  \"_allowances[owner][spender]\"\n                        let dataSlot_7 := /** @src -1:-1:-1 */ 0\n                        /// @src 92:462:2857  \"contract WrappedEther is ERC20 {...\"\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ and(value1_1, sub(shl(160, 1), 1)))\n                        mstore(0x20, /** @src 44:3561:3579  \"_allowances[owner]\" */ dataSlot_6)\n                        /// @src 92:462:2857  \"contract WrappedEther is ERC20 {...\"\n                        dataSlot_7 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ 0x40)\n                        let _13 := sload(/** @src 44:3561:3588  \"_allowances[owner][spender]\" */ dataSlot_7)\n                        /// @src 92:462:2857  \"contract WrappedEther is ERC20 {...\"\n                        let memPos_8 := mload(64)\n                        mstore(memPos_8, _13)\n                        return(memPos_8, 32)\n                    }\n                }\n                if iszero(calldatasize())\n                {\n                    /// @src 92:2794:2855  \"receive() external payable virtual {...\"\n                    fun_deposit()\n                    /// @src 92:462:2857  \"contract WrappedEther is ERC20 {...\"\n                    stop()\n                }\n                revert(0, 0)\n            }\n            function abi_encode_string(headStart, value0) -> tail\n            {\n                mstore(headStart, 32)\n                let length := mload(value0)\n                mstore(add(headStart, 32), length)\n                mcopy(add(headStart, 64), add(value0, 32), length)\n                mstore(add(add(headStart, length), 64), 0)\n                tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n            }\n            function abi_decode_t_address() -> value\n            {\n                value := calldataload(4)\n                if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n            }\n            function abi_decode_address() -> value\n            {\n                value := calldataload(36)\n                if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n            }\n            function finalize_allocation(memPtr, size)\n            {\n                let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                {\n                    mstore(/** @src -1:-1:-1 */ 0, /** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(/** @src -1:-1:-1 */ 0, /** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ 0x24)\n                }\n                mstore(64, newFreePtr)\n            }\n            /// @ast-id 62723 @src 92:1617:1796  \"function deposit() public payable virtual {...\"\n            function fun_deposit()\n            {\n                /// @src 44:7432:7453  \"account == address(0)\"\n                let _1 := iszero(/** @src 54:735:745  \"msg.sender\" */ caller())\n                /// @src 44:7428:7519  \"if (account == address(0)) {...\"\n                if /** @src 44:7432:7453  \"account == address(0)\" */ _1\n                /// @src 44:7428:7519  \"if (account == address(0)) {...\"\n                {\n                    /// @src 44:7476:7508  \"ERC20InvalidReceiver(address(0))\"\n                    mstore(/** @src 44:7451:7452  \"0\" */ 0x00, /** @src 44:7476:7508  \"ERC20InvalidReceiver(address(0))\" */ shl(224, 0xec442f05))\n                    /// @src 92:462:2857  \"contract WrappedEther is ERC20 {...\"\n                    mstore(/** @src 44:7476:7508  \"ERC20InvalidReceiver(address(0))\" */ 4, /** @src 44:7451:7452  \"0\" */ 0x00)\n                    /// @src 44:7476:7508  \"ERC20InvalidReceiver(address(0))\"\n                    revert(/** @src 44:7451:7452  \"0\" */ 0x00, /** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ 36)\n                }\n                let _2 := sload(/** @src 44:6137:6158  \"_totalSupply += value\" */ 0x02)\n                /// @src 92:462:2857  \"contract WrappedEther is ERC20 {...\"\n                let sum := add(_2, /** @src 92:1720:1729  \"msg.value\" */ callvalue())\n                /// @src 92:462:2857  \"contract WrappedEther is ERC20 {...\"\n                if gt(_2, sum)\n                {\n                    mstore(/** @src 44:7451:7452  \"0\" */ 0x00, /** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ shl(224, 0x4e487b71))\n                    mstore(4, 0x11)\n                    revert(/** @src 44:7451:7452  \"0\" */ 0x00, /** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ 0x24)\n                }\n                sstore(/** @src 44:6137:6158  \"_totalSupply += value\" */ 0x02, /** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ sum)\n                /// @src 44:6547:6972  \"if (to == address(0)) {...\"\n                _1 := /** @src 44:7451:7452  \"0\" */ 0x00\n                /// @src 92:462:2857  \"contract WrappedEther is ERC20 {...\"\n                mstore(/** @src 44:7451:7452  \"0\" */ 0x00, /** @src 54:735:745  \"msg.sender\" */ caller())\n                /// @src 92:462:2857  \"contract WrappedEther is ERC20 {...\"\n                mstore(0x20, /** @src 44:7451:7452  \"0\" */ 0x00)\n                /// @src 92:462:2857  \"contract WrappedEther is ERC20 {...\"\n                let dataSlot := keccak256(/** @src 44:7451:7452  \"0\" */ 0x00, /** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ 0x40)\n                sstore(dataSlot, add(sload(/** @src 44:6925:6947  \"_balances[to] += value\" */ dataSlot), /** @src 92:1720:1729  \"msg.value\" */ callvalue()))\n                /// @src 44:6987:7012  \"Transfer(from, to, value)\"\n                let _3 := /** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ mload(64)\n                mstore(_3, /** @src 92:1720:1729  \"msg.value\" */ callvalue())\n                /// @src 44:6987:7012  \"Transfer(from, to, value)\"\n                log3(_3, /** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ 32, /** @src 44:6987:7012  \"Transfer(from, to, value)\" */ 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, /** @src 44:7451:7452  \"0\" */ 0x00, /** @src 54:735:745  \"msg.sender\" */ caller())\n                /// @src 92:1771:1789  \"Deposit(to, value)\"\n                let _4 := /** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ mload(64)\n                mstore(_4, /** @src 92:1720:1729  \"msg.value\" */ callvalue())\n                /// @src 92:1771:1789  \"Deposit(to, value)\"\n                log2(_4, /** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ 32, /** @src 92:1771:1789  \"Deposit(to, value)\" */ 0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c, /** @src 54:735:745  \"msg.sender\" */ caller())\n            }\n            /// @ast-id 42421 @src 44:5297:5597  \"function _transfer(address from, address to, uint256 value) internal {...\"\n            function fun_transfer(var_from, var_to, var_value)\n            {\n                /// @src 92:462:2857  \"contract WrappedEther is ERC20 {...\"\n                let _1 := and(/** @src 44:5380:5398  \"from == address(0)\" */ var_from, /** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ sub(shl(160, 1), 1))\n                /// @src 44:5380:5398  \"from == address(0)\"\n                let _2 := iszero(/** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ _1)\n                /// @src 44:5376:5462  \"if (from == address(0)) {...\"\n                if /** @src 44:5380:5398  \"from == address(0)\" */ _2\n                /// @src 44:5376:5462  \"if (from == address(0)) {...\"\n                {\n                    /// @src 44:5421:5451  \"ERC20InvalidSender(address(0))\"\n                    mstore(/** @src 44:5396:5397  \"0\" */ 0x00, /** @src 44:8002:8032  \"ERC20InvalidSender(address(0))\" */ shl(225, 0x4b637e8f))\n                    /// @src 92:462:2857  \"contract WrappedEther is ERC20 {...\"\n                    mstore(/** @src 44:5421:5451  \"ERC20InvalidSender(address(0))\" */ 4, /** @src 44:5396:5397  \"0\" */ 0x00)\n                    /// @src 44:5421:5451  \"ERC20InvalidSender(address(0))\"\n                    revert(/** @src 44:5396:5397  \"0\" */ 0x00, /** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ 36)\n                }\n                let _3 := and(/** @src 44:5475:5491  \"to == address(0)\" */ var_to, /** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ sub(shl(160, 1), 1))\n                /// @src 44:5475:5491  \"to == address(0)\"\n                let _4 := iszero(/** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ _3)\n                /// @src 44:5471:5557  \"if (to == address(0)) {...\"\n                if /** @src 44:5475:5491  \"to == address(0)\" */ _4\n                /// @src 44:5471:5557  \"if (to == address(0)) {...\"\n                {\n                    /// @src 44:5514:5546  \"ERC20InvalidReceiver(address(0))\"\n                    mstore(/** @src 44:5396:5397  \"0\" */ 0x00, /** @src 44:7476:7508  \"ERC20InvalidReceiver(address(0))\" */ shl(224, 0xec442f05))\n                    /// @src 92:462:2857  \"contract WrappedEther is ERC20 {...\"\n                    mstore(/** @src 44:5514:5546  \"ERC20InvalidReceiver(address(0))\" */ 4, /** @src 44:5396:5397  \"0\" */ 0x00)\n                    /// @src 44:5514:5546  \"ERC20InvalidReceiver(address(0))\"\n                    revert(/** @src 44:5396:5397  \"0\" */ 0x00, /** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ 36)\n                }\n                /// @src 44:5997:6537  \"if (from == address(0)) {...\"\n                _2 := /** @src 44:5396:5397  \"0\" */ 0x00\n                /// @src 92:462:2857  \"contract WrappedEther is ERC20 {...\"\n                mstore(/** @src 44:5396:5397  \"0\" */ 0x00, /** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ _1)\n                mstore(0x20, /** @src 44:5396:5397  \"0\" */ 0x00)\n                /// @src 92:462:2857  \"contract WrappedEther is ERC20 {...\"\n                let _5 := sload(keccak256(/** @src 44:5396:5397  \"0\" */ 0x00, /** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ 0x40))\n                /// @src 44:6240:6355  \"if (fromBalance < value) {...\"\n                if /** @src 44:6244:6263  \"fromBalance < value\" */ lt(_5, var_value)\n                /// @src 44:6240:6355  \"if (fromBalance < value) {...\"\n                {\n                    /// @src 44:6290:6340  \"ERC20InsufficientBalance(from, fromBalance, value)\"\n                    mstore(/** @src 44:5396:5397  \"0\" */ 0x00, /** @src 44:6290:6340  \"ERC20InsufficientBalance(from, fromBalance, value)\" */ shl(226, 0x391434e3))\n                    /// @src 92:462:2857  \"contract WrappedEther is ERC20 {...\"\n                    mstore(/** @src 44:6290:6340  \"ERC20InsufficientBalance(from, fromBalance, value)\" */ 4, /** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ _1)\n                    mstore(36, _5)\n                    mstore(68, var_value)\n                    /// @src 44:6290:6340  \"ERC20InsufficientBalance(from, fromBalance, value)\"\n                    revert(/** @src 44:5396:5397  \"0\" */ 0x00, /** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ 100)\n                }\n                mstore(/** @src 44:5396:5397  \"0\" */ 0x00, /** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ _1)\n                mstore(0x20, /** @src 44:5396:5397  \"0\" */ 0x00)\n                /// @src 92:462:2857  \"contract WrappedEther is ERC20 {...\"\n                sstore(keccak256(/** @src 44:5396:5397  \"0\" */ 0x00, /** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ 0x40), sub(/** @src 44:6493:6512  \"fromBalance - value\" */ _5, var_value))\n                /// @src 44:6547:6972  \"if (to == address(0)) {...\"\n                _4 := /** @src 44:5396:5397  \"0\" */ 0x00\n                /// @src 92:462:2857  \"contract WrappedEther is ERC20 {...\"\n                mstore(/** @src 44:5396:5397  \"0\" */ 0x00, /** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ _3)\n                mstore(0x20, /** @src 44:5396:5397  \"0\" */ 0x00)\n                /// @src 92:462:2857  \"contract WrappedEther is ERC20 {...\"\n                let dataSlot := keccak256(/** @src 44:5396:5397  \"0\" */ 0x00, /** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ 0x40)\n                sstore(dataSlot, add(sload(/** @src 44:6925:6947  \"_balances[to] += value\" */ dataSlot), /** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ var_value))\n                /// @src 44:6987:7012  \"Transfer(from, to, value)\"\n                let _6 := /** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ mload(64)\n                mstore(_6, var_value)\n                /// @src 44:6987:7012  \"Transfer(from, to, value)\"\n                log3(_6, /** @src 92:462:2857  \"contract WrappedEther is ERC20 {...\" */ 32, /** @src 44:6987:7012  \"Transfer(from, to, value)\" */ 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, _1, _3)\n            }\n        }\n        data \".metadata\" hex\"\"\n    }\n}\n","ast":{"absolutePath":"src/erc20/WrappedEther.sol","id":62768,"exportedSymbols":{"ERC20":[42691],"WrappedEther":[62767]},"nodeType":"SourceUnit","src":"74:2784:92","nodes":[{"id":62664,"nodeType":"PragmaDirective","src":"74:24:92","nodes":[],"literals":["solidity","^","0.8",".30"]},{"id":62666,"nodeType":"ImportDirective","src":"100:68:92","nodes":[],"absolutePath":"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol","file":"@openzeppelin/contracts/token/ERC20/ERC20.sol","nameLocation":"-1:-1:-1","scope":62768,"sourceUnit":42692,"symbolAliases":[{"foreign":{"id":62665,"name":"ERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42691,"src":"108:5:92","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":62767,"nodeType":"ContractDefinition","src":"462:2395:92","nodes":[{"id":62676,"nodeType":"EventDefinition","src":"761:49:92","nodes":[],"anonymous":false,"documentation":{"id":62670,"nodeType":"StructuredDocumentation","src":"499:257:92","text":" @dev Emitted when `value` Ether is wrapped into tokens for account `to`.\n This event indicates that `to` deposited Ether and received an equivalent amount\n of wrapped tokens.\n Note that `value` may be zero."},"eventSelector":"e1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c","name":"Deposit","nameLocation":"767:7:92","parameters":{"id":62675,"nodeType":"ParameterList","parameters":[{"constant":false,"id":62672,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"791:2:92","nodeType":"VariableDeclaration","scope":62676,"src":"775:18:92","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":62671,"name":"address","nodeType":"ElementaryTypeName","src":"775:7:92","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":62674,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"803:5:92","nodeType":"VariableDeclaration","scope":62676,"src":"795:13:92","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":62673,"name":"uint256","nodeType":"ElementaryTypeName","src":"795:7:92","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"774:35:92"}},{"id":62683,"nodeType":"EventDefinition","src":"1081:54:92","nodes":[],"anonymous":false,"documentation":{"id":62677,"nodeType":"StructuredDocumentation","src":"816:260:92","text":" @dev Emitted when `value` tokens are unwrapped into Ether by account `from`.\n This event indicates that `from` burned wrapped tokens and received an equivalent\n amount of Ether.\n Note that `value` may be zero."},"eventSelector":"7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b65","name":"Withdrawal","nameLocation":"1087:10:92","parameters":{"id":62682,"nodeType":"ParameterList","parameters":[{"constant":false,"id":62679,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"1114:4:92","nodeType":"VariableDeclaration","scope":62683,"src":"1098:20:92","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":62678,"name":"address","nodeType":"ElementaryTypeName","src":"1098:7:92","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":62681,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"1128:5:92","nodeType":"VariableDeclaration","scope":62683,"src":"1120:13:92","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":62680,"name":"uint256","nodeType":"ElementaryTypeName","src":"1120:7:92","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1097:37:92"}},{"id":62686,"nodeType":"VariableDeclaration","src":"1141:52:92","nodes":[],"constant":true,"mutability":"constant","name":"TOKEN_NAME","nameLocation":"1165:10:92","scope":62767,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":62684,"name":"string","nodeType":"ElementaryTypeName","src":"1141:6:92","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"value":{"hexValue":"57726170706564204574686572","id":62685,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1178:15:92","typeDescriptions":{"typeIdentifier":"t_stringliteral_00cd3d46df44f2cbb950cf84eb2e92aa2ddd23195b1a009173ea59a063357ed3","typeString":"literal_string \"Wrapped Ether\""},"value":"Wrapped Ether"},"visibility":"private"},{"id":62689,"nodeType":"VariableDeclaration","src":"1199:45:92","nodes":[],"constant":true,"mutability":"constant","name":"TOKEN_SYMBOL","nameLocation":"1223:12:92","scope":62767,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":62687,"name":"string","nodeType":"ElementaryTypeName","src":"1199:6:92","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"value":{"hexValue":"57455448","id":62688,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1238:6:92","typeDescriptions":{"typeIdentifier":"t_stringliteral_0f8a193ff464434486c0daf7db2a895884365d2bc84ba47a68fcf89c1b14b5b8","typeString":"literal_string \"WETH\""},"value":"WETH"},"visibility":"private"},{"id":62698,"nodeType":"FunctionDefinition","src":"1349:48:92","nodes":[],"body":{"id":62697,"nodeType":"Block","src":"1395:2:92","nodes":[],"statements":[]},"documentation":{"id":62690,"nodeType":"StructuredDocumentation","src":"1251:93:92","text":" @dev Initializes the WrappedEther contract with the token name and symbol."},"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":62693,"name":"TOKEN_NAME","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":62686,"src":"1369:10:92","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":62694,"name":"TOKEN_SYMBOL","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":62689,"src":"1381:12:92","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"id":62695,"kind":"baseConstructorSpecifier","modifierName":{"id":62692,"name":"ERC20","nameLocations":["1363:5:92"],"nodeType":"IdentifierPath","referencedDeclaration":42691,"src":"1363:5:92"},"nodeType":"ModifierInvocation","src":"1363:31:92"}],"name":"","nameLocation":"-1:-1:-1","parameters":{"id":62691,"nodeType":"ParameterList","parameters":[],"src":"1360:2:92"},"returnParameters":{"id":62696,"nodeType":"ParameterList","parameters":[],"src":"1395:0:92"},"scope":62767,"stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"id":62723,"nodeType":"FunctionDefinition","src":"1617:179:92","nodes":[],"body":{"id":62722,"nodeType":"Block","src":"1659:137:92","nodes":[],"statements":[{"assignments":[62703],"declarations":[{"constant":false,"id":62703,"mutability":"mutable","name":"to","nameLocation":"1677:2:92","nodeType":"VariableDeclaration","scope":62722,"src":"1669:10:92","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":62702,"name":"address","nodeType":"ElementaryTypeName","src":"1669:7:92","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":62706,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":62704,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44777,"src":"1682:10:92","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":62705,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1682:12:92","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"1669:25:92"},{"assignments":[62708],"declarations":[{"constant":false,"id":62708,"mutability":"mutable","name":"value","nameLocation":"1712:5:92","nodeType":"VariableDeclaration","scope":62722,"src":"1704:13:92","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":62707,"name":"uint256","nodeType":"ElementaryTypeName","src":"1704:7:92","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":62711,"initialValue":{"expression":{"id":62709,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1720:3:92","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":62710,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1724:5:92","memberName":"value","nodeType":"MemberAccess","src":"1720:9:92","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1704:25:92"},{"expression":{"arguments":[{"id":62713,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":62703,"src":"1745:2:92","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":62714,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":62708,"src":"1749:5:92","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":62712,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42531,"src":"1739:5:92","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":62715,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1739:16:92","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":62716,"nodeType":"ExpressionStatement","src":"1739:16:92"},{"eventCall":{"arguments":[{"id":62718,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":62703,"src":"1779:2:92","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":62719,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":62708,"src":"1783:5:92","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":62717,"name":"Deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":62676,"src":"1771:7:92","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":62720,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1771:18:92","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":62721,"nodeType":"EmitStatement","src":"1766:23:92"}]},"documentation":{"id":62699,"nodeType":"StructuredDocumentation","src":"1403:209:92","text":" @dev Deposits Ether into the contract and mints an equivalent amount of wrapped tokens to the caller.\n Emits a {Deposit} event indicating the recipient and the amount deposited."},"functionSelector":"d0e30db0","implemented":true,"kind":"function","modifiers":[],"name":"deposit","nameLocation":"1626:7:92","parameters":{"id":62700,"nodeType":"ParameterList","parameters":[],"src":"1633:2:92"},"returnParameters":{"id":62701,"nodeType":"ParameterList","parameters":[],"src":"1659:0:92"},"scope":62767,"stateMutability":"payable","virtual":true,"visibility":"public"},{"id":62758,"nodeType":"FunctionDefinition","src":"2327:241:92","nodes":[],"body":{"id":62757,"nodeType":"Block","src":"2375:193:92","nodes":[],"statements":[{"assignments":[62730],"declarations":[{"constant":false,"id":62730,"mutability":"mutable","name":"from","nameLocation":"2393:4:92","nodeType":"VariableDeclaration","scope":62757,"src":"2385:12:92","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":62729,"name":"address","nodeType":"ElementaryTypeName","src":"2385:7:92","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":62733,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":62731,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44777,"src":"2400:10:92","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":62732,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2400:12:92","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2385:27:92"},{"expression":{"arguments":[{"id":62735,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":62730,"src":"2428:4:92","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":62736,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":62726,"src":"2434:5:92","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":62734,"name":"_burn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42564,"src":"2422:5:92","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":62737,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2422:18:92","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":62738,"nodeType":"ExpressionStatement","src":"2422:18:92"},{"assignments":[62740,null],"declarations":[{"constant":false,"id":62740,"mutability":"mutable","name":"success","nameLocation":"2457:7:92","nodeType":"VariableDeclaration","scope":62757,"src":"2452:12:92","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":62739,"name":"bool","nodeType":"ElementaryTypeName","src":"2452:4:92","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":62747,"initialValue":{"arguments":[{"hexValue":"","id":62745,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2493:2:92","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":62741,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":62730,"src":"2469:4:92","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":62742,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2474:4:92","memberName":"call","nodeType":"MemberAccess","src":"2469:9:92","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":62744,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":62743,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":62726,"src":"2486:5:92","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2469:23:92","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":62746,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2469:27:92","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2451:45:92"},{"expression":{"arguments":[{"id":62749,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":62740,"src":"2514:7:92","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":62748,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"2506:7:92","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":62750,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2506:16:92","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":62751,"nodeType":"ExpressionStatement","src":"2506:16:92"},{"eventCall":{"arguments":[{"id":62753,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":62730,"src":"2549:4:92","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":62754,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":62726,"src":"2555:5:92","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":62752,"name":"Withdrawal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":62683,"src":"2538:10:92","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":62755,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2538:23:92","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":62756,"nodeType":"EmitStatement","src":"2533:28:92"}]},"documentation":{"id":62724,"nodeType":"StructuredDocumentation","src":"1802:520:92","text":" @dev Burns a specified amount of wrapped tokens from the caller and withdraws the equivalent amount of Ether.\n Emits a {Withdrawal} event indicating the sender and the amount withdrawn.\n Requirements:\n - The caller must have at least `value` tokens.\n - The contract must successfully send `value` Ether to the caller.\n Note:\n - Uses a low-level call to send Ether, which forwards all available gas.\n - Reverts if the Ether transfer fails."},"functionSelector":"2e1a7d4d","implemented":true,"kind":"function","modifiers":[],"name":"withdraw","nameLocation":"2336:8:92","parameters":{"id":62727,"nodeType":"ParameterList","parameters":[{"constant":false,"id":62726,"mutability":"mutable","name":"value","nameLocation":"2353:5:92","nodeType":"VariableDeclaration","scope":62758,"src":"2345:13:92","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":62725,"name":"uint256","nodeType":"ElementaryTypeName","src":"2345:7:92","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2344:15:92"},"returnParameters":{"id":62728,"nodeType":"ParameterList","parameters":[],"src":"2375:0:92"},"scope":62767,"stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"id":62766,"nodeType":"FunctionDefinition","src":"2794:61:92","nodes":[],"body":{"id":62765,"nodeType":"Block","src":"2829:26:92","nodes":[],"statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":62762,"name":"deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":62723,"src":"2839:7:92","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":62763,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2839:9:92","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":62764,"nodeType":"ExpressionStatement","src":"2839:9:92"}]},"documentation":{"id":62759,"nodeType":"StructuredDocumentation","src":"2574:215:92","text":" @dev Fallback function to receive Ether. Automatically deposits received Ether\n and mints wrapped tokens to the sender.\n Emits a {Deposit} event as part of the `deposit()` call."},"implemented":true,"kind":"receive","modifiers":[],"name":"","nameLocation":"-1:-1:-1","parameters":{"id":62760,"nodeType":"ParameterList","parameters":[],"src":"2801:2:92"},"returnParameters":{"id":62761,"nodeType":"ParameterList","parameters":[],"src":"2829:0:92"},"scope":62767,"stateMutability":"payable","virtual":true,"visibility":"external"}],"abstract":false,"baseContracts":[{"baseName":{"id":62668,"name":"ERC20","nameLocations":["487:5:92"],"nodeType":"IdentifierPath","referencedDeclaration":42691,"src":"487:5:92"},"id":62669,"nodeType":"InheritanceSpecifier","src":"487:5:92"}],"canonicalName":"WrappedEther","contractDependencies":[],"contractKind":"contract","documentation":{"id":62667,"nodeType":"StructuredDocumentation","src":"170:291:92","text":" @dev Wrapped Ether (WETH) is represents Ether on Ethereum as ERC20 token.\n      Based on WETH9:\n      - https://etherscan.io/address/0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2#code\n      This smart contract tries to be as similar as possible to Ethereum mainnet WETH9."},"fullyImplemented":true,"linearizedBaseContracts":[62767,42691,41373,42995,42769,44795],"name":"WrappedEther","nameLocation":"471:12:92","scope":62768,"usedErrors":[41343,41348,41353,41362,41367,41372],"usedEvents":[42703,42712,62676,62683]}],"license":"GPL-3.0-or-later WITH Classpath-exception-2.0"},"id":92}