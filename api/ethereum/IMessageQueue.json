{"abi":[{"type":"function","name":"getMerkleRoot","inputs":[{"name":"blockNumber","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"},{"type":"function","name":"governanceAdmin","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"governancePauser","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"isEmergencyStopped","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"isProcessed","inputs":[{"name":"messageNonce","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"pause","inputs":[],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"processMessage","inputs":[{"name":"blockNumber","type":"uint256","internalType":"uint256"},{"name":"totalLeaves","type":"uint256","internalType":"uint256"},{"name":"leafIndex","type":"uint256","internalType":"uint256"},{"name":"message","type":"tuple","internalType":"struct VaraMessage","components":[{"name":"nonce","type":"uint256","internalType":"uint256"},{"name":"source","type":"bytes32","internalType":"bytes32"},{"name":"destination","type":"address","internalType":"address"},{"name":"payload","type":"bytes","internalType":"bytes"}]},{"name":"proof","type":"bytes32[]","internalType":"bytes32[]"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"submitMerkleRoot","inputs":[{"name":"blockNumber","type":"uint256","internalType":"uint256"},{"name":"merkleRoot","type":"bytes32","internalType":"bytes32"},{"name":"proof","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"unpause","inputs":[],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"verifier","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"event","name":"EmergencyStopSet","inputs":[],"anonymous":false},{"type":"event","name":"MerkleRoot","inputs":[{"name":"blockNumber","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"merkleRoot","type":"bytes32","indexed":false,"internalType":"bytes32"}],"anonymous":false},{"type":"event","name":"MessageProcessed","inputs":[{"name":"blockNumber","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"messageHash","type":"bytes32","indexed":false,"internalType":"bytes32"},{"name":"messageNonce","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"messageDestination","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"error","name":"EmergencyStop","inputs":[]},{"type":"error","name":"InvalidMerkleProof","inputs":[]},{"type":"error","name":"InvalidPlonkProof","inputs":[]},{"type":"error","name":"MerkleRootAlreadySet","inputs":[{"name":"blockNumber","type":"uint256","internalType":"uint256"}]},{"type":"error","name":"MerkleRootNotFound","inputs":[{"name":"blockNumber","type":"uint256","internalType":"uint256"}]},{"type":"error","name":"MessageAlreadyProcessed","inputs":[{"name":"messageNonce","type":"uint256","internalType":"uint256"}]}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"getMerkleRoot(uint256)":"0aab8ba5","governanceAdmin()":"0058f6b8","governancePauser()":"c81eb797","isEmergencyStopped()":"fddd4837","isProcessed(uint256)":"bfe7edd7","pause()":"8456cb59","processMessage(uint256,uint256,uint256,(uint256,bytes32,address,bytes),bytes32[])":"93eb47e9","submitMerkleRoot(uint256,bytes32,bytes)":"cca66a9d","unpause()":"3f4ba83a","verifier()":"2b7ac3f3"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"EmergencyStop\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMerkleProof\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPlonkProof\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"MerkleRootAlreadySet\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"MerkleRootNotFound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"messageNonce\",\"type\":\"uint256\"}],\"name\":\"MessageAlreadyProcessed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EmergencyStopSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"MerkleRoot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"messageHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"messageNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"messageDestination\",\"type\":\"address\"}],\"name\":\"MessageProcessed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getMerkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governanceAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governancePauser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isEmergencyStopped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"messageNonce\",\"type\":\"uint256\"}],\"name\":\"isProcessed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLeaves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"leafIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"source\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"internalType\":\"struct VaraMessage\",\"name\":\"message\",\"type\":\"tuple\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"processMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"submitMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifier\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the MessageQueue contract.\",\"errors\":{\"EmergencyStop()\":[{\"details\":\"Emergency stop status is active.\"}],\"InvalidMerkleProof()\":[{\"details\":\"Merkle proof is invalid.\"}],\"InvalidPlonkProof()\":[{\"details\":\"The plonk proof is invalid.\"}],\"MerkleRootAlreadySet(uint256)\":[{\"details\":\"Merkle root is already set.\"}],\"MerkleRootNotFound(uint256)\":[{\"details\":\"Merkle root is not found for the block number in MessageQueue smart contract.\"}],\"MessageAlreadyProcessed(uint256)\":[{\"details\":\"Message nonce is already processed.\"}]},\"events\":{\"EmergencyStopSet()\":{\"details\":\"Emitted when emergency stop status is set.\"},\"MerkleRoot(uint256,bytes32)\":{\"details\":\"Emitted when block number and merkle root are stored.\"},\"MessageProcessed(uint256,bytes32,uint256,address)\":{\"details\":\"Emitted when message is processed.\"}},\"kind\":\"dev\",\"methods\":{\"getMerkleRoot(uint256)\":{\"details\":\"Returns merkle root for specified block number.      Returns `bytes32(0)` if merkle root was not provided for specified block number.\",\"params\":{\"blockNumber\":\"Target block number.\"},\"returns\":{\"_0\":\"merkleRoot Merkle root for specified block number.\"}},\"governanceAdmin()\":{\"details\":\"Returns governance admin address.\",\"returns\":{\"_0\":\"governanceAdmin Governance admin address.\"}},\"governancePauser()\":{\"details\":\"Returns governance pauser address.\",\"returns\":{\"_0\":\"governancePauser Governance pauser address.\"}},\"isEmergencyStopped()\":{\"details\":\"Returns emergency stop status.\",\"returns\":{\"_0\":\"isEmergencyStopped emergency stop status.\"}},\"isProcessed(uint256)\":{\"details\":\"Checks if message was already processed.\",\"params\":{\"messageNonce\":\"Message nonce to check.\"},\"returns\":{\"_0\":\"isProcessed `true` if message was already processed, `false` otherwise.\"}},\"pause()\":{\"details\":\"Pauses the contract.\"},\"processMessage(uint256,uint256,uint256,(uint256,bytes32,address,bytes),bytes32[])\":{\"details\":\"Verifies and processes message originated from Vara Network.      In this process, MessageQueue smart contract will calculate Merkle root      for message and validate that it corresponds to Merkle root which is already stored      in MessageQueue smart contract for same block number. If proof is correct, nonce of received      message will be stored in smart contract and message will be forwarded to adequate message      processor, either ERC20Manager or Governance smart contract.      Upon successful processing of the message `MessageProcessed` event is emitted.      It is important to note that anyone can submit a message because all messages      will be validated against previously stored Merkle roots in the MessageQueue smart contract.Reverts if:      - MessageQueue is paused and message source is not any governance address.      - MessageQueue emergency stop status is set.      - Message nonce is already processed.      - Merkle root is not set for the block number in MessageQueue smart contract.      - Merkle proof is invalid.      - Message processing fails.\",\"params\":{\"blockNumber\":\"Block number of block containing target merkle tree.\",\"leafIndex\":\"Index of leaf containing target message.\",\"message\":\"Target message.\",\"proof\":\"Merkle proof of inclusion of leaf #`leafIndex` into target merkle tree that              was included into `blockNumber`.\",\"totalLeaves\":\"Number of leaves in target merkle tree.\"}},\"submitMerkleRoot(uint256,bytes32,bytes)\":{\"details\":\"Receives, verifies and stores Merkle roots from Vara Network.      Upon successfully storing data about block number and corresponding Merkle root,      MessageQueue smart contract will emit a `MerkleRoot` event.      It is important to note that anyone can submit a Merkle root because only      validated Merkle roots will be stored in the MessageQueue smart contract.Reverts if emergency stop status is set with `EmergencyStop` error.Reverts if `proof` or `publicInputs` are malformed with `InvalidPlonkProof` error.\",\"params\":{\"blockNumber\":\"Block number on Vara Network\",\"merkleRoot\":\"Merkle root of transactions included in block with corresponding block number\",\"proof\":\"Serialised Plonk proof (using gnark's `MarshalSolidity`).\"}},\"unpause()\":{\"details\":\"Unpauses the contract.\"},\"verifier()\":{\"details\":\"Returns verifier address.      Verifier is smart contract that is responsible for verifying      the validity of the Merkle proof.\",\"returns\":{\"_0\":\"verifier Verifier address.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/interfaces/IMessageQueue.sol\":\"IMessageQueue\"},\"debug\":{\"revertStrings\":\"strip\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"appendCBOR\":false,\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin-foundry-upgrades/=lib/openzeppelin-foundry-upgrades/src/\",\":script/=script/\",\":src/=src/\",\":test/=test/\"],\"viaIR\":true},\"sources\":{\"src/interfaces/IMessageQueue.sol\":{\"keccak256\":\"0xf914c14cfc330a5b9c191ad1224b8c7a381b734b3deea7d18ae5bda8722e0838\",\"license\":\"GPL-3.0-or-later WITH Classpath-exception-2.0\",\"urls\":[\"bzz-raw://576d17afb44032e19e94b35ee986adcbc5862335c3e62eeeb0aacd81dd03a1e2\",\"dweb:/ipfs/QmZTgDKvACg4UJiuYyeXrZ8CwNWGu1r35BnFqZgSD3EN5o\"]},\"src/interfaces/IPausable.sol\":{\"keccak256\":\"0x6d3c910562c9049a3a8e59d148623d37b546b6557563c8c202305864703f4394\",\"license\":\"GPL-3.0-or-later WITH Classpath-exception-2.0\",\"urls\":[\"bzz-raw://6e907b1040394cf61f68f7cedc3ce7f0572fb0efa1803afee6e266b83c0f8298\",\"dweb:/ipfs/QmeWZWAJN3m9yA7fWWAyuEzwTxvVfW5yRPbZmZMixGUoZq\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.30+commit.73712a01"},"language":"Solidity","output":{"abi":[{"inputs":[],"type":"error","name":"EmergencyStop"},{"inputs":[],"type":"error","name":"InvalidMerkleProof"},{"inputs":[],"type":"error","name":"InvalidPlonkProof"},{"inputs":[{"internalType":"uint256","name":"blockNumber","type":"uint256"}],"type":"error","name":"MerkleRootAlreadySet"},{"inputs":[{"internalType":"uint256","name":"blockNumber","type":"uint256"}],"type":"error","name":"MerkleRootNotFound"},{"inputs":[{"internalType":"uint256","name":"messageNonce","type":"uint256"}],"type":"error","name":"MessageAlreadyProcessed"},{"inputs":[],"type":"event","name":"EmergencyStopSet","anonymous":false},{"inputs":[{"internalType":"uint256","name":"blockNumber","type":"uint256","indexed":false},{"internalType":"bytes32","name":"merkleRoot","type":"bytes32","indexed":false}],"type":"event","name":"MerkleRoot","anonymous":false},{"inputs":[{"internalType":"uint256","name":"blockNumber","type":"uint256","indexed":false},{"internalType":"bytes32","name":"messageHash","type":"bytes32","indexed":false},{"internalType":"uint256","name":"messageNonce","type":"uint256","indexed":false},{"internalType":"address","name":"messageDestination","type":"address","indexed":false}],"type":"event","name":"MessageProcessed","anonymous":false},{"inputs":[{"internalType":"uint256","name":"blockNumber","type":"uint256"}],"stateMutability":"view","type":"function","name":"getMerkleRoot","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"governanceAdmin","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"governancePauser","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"isEmergencyStopped","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"uint256","name":"messageNonce","type":"uint256"}],"stateMutability":"view","type":"function","name":"isProcessed","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[],"stateMutability":"nonpayable","type":"function","name":"pause"},{"inputs":[{"internalType":"uint256","name":"blockNumber","type":"uint256"},{"internalType":"uint256","name":"totalLeaves","type":"uint256"},{"internalType":"uint256","name":"leafIndex","type":"uint256"},{"internalType":"struct VaraMessage","name":"message","type":"tuple","components":[{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes32","name":"source","type":"bytes32"},{"internalType":"address","name":"destination","type":"address"},{"internalType":"bytes","name":"payload","type":"bytes"}]},{"internalType":"bytes32[]","name":"proof","type":"bytes32[]"}],"stateMutability":"nonpayable","type":"function","name":"processMessage"},{"inputs":[{"internalType":"uint256","name":"blockNumber","type":"uint256"},{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"},{"internalType":"bytes","name":"proof","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"submitMerkleRoot"},{"inputs":[],"stateMutability":"nonpayable","type":"function","name":"unpause"},{"inputs":[],"stateMutability":"view","type":"function","name":"verifier","outputs":[{"internalType":"address","name":"","type":"address"}]}],"devdoc":{"kind":"dev","methods":{"getMerkleRoot(uint256)":{"details":"Returns merkle root for specified block number.      Returns `bytes32(0)` if merkle root was not provided for specified block number.","params":{"blockNumber":"Target block number."},"returns":{"_0":"merkleRoot Merkle root for specified block number."}},"governanceAdmin()":{"details":"Returns governance admin address.","returns":{"_0":"governanceAdmin Governance admin address."}},"governancePauser()":{"details":"Returns governance pauser address.","returns":{"_0":"governancePauser Governance pauser address."}},"isEmergencyStopped()":{"details":"Returns emergency stop status.","returns":{"_0":"isEmergencyStopped emergency stop status."}},"isProcessed(uint256)":{"details":"Checks if message was already processed.","params":{"messageNonce":"Message nonce to check."},"returns":{"_0":"isProcessed `true` if message was already processed, `false` otherwise."}},"pause()":{"details":"Pauses the contract."},"processMessage(uint256,uint256,uint256,(uint256,bytes32,address,bytes),bytes32[])":{"details":"Verifies and processes message originated from Vara Network.      In this process, MessageQueue smart contract will calculate Merkle root      for message and validate that it corresponds to Merkle root which is already stored      in MessageQueue smart contract for same block number. If proof is correct, nonce of received      message will be stored in smart contract and message will be forwarded to adequate message      processor, either ERC20Manager or Governance smart contract.      Upon successful processing of the message `MessageProcessed` event is emitted.      It is important to note that anyone can submit a message because all messages      will be validated against previously stored Merkle roots in the MessageQueue smart contract.Reverts if:      - MessageQueue is paused and message source is not any governance address.      - MessageQueue emergency stop status is set.      - Message nonce is already processed.      - Merkle root is not set for the block number in MessageQueue smart contract.      - Merkle proof is invalid.      - Message processing fails.","params":{"blockNumber":"Block number of block containing target merkle tree.","leafIndex":"Index of leaf containing target message.","message":"Target message.","proof":"Merkle proof of inclusion of leaf #`leafIndex` into target merkle tree that              was included into `blockNumber`.","totalLeaves":"Number of leaves in target merkle tree."}},"submitMerkleRoot(uint256,bytes32,bytes)":{"details":"Receives, verifies and stores Merkle roots from Vara Network.      Upon successfully storing data about block number and corresponding Merkle root,      MessageQueue smart contract will emit a `MerkleRoot` event.      It is important to note that anyone can submit a Merkle root because only      validated Merkle roots will be stored in the MessageQueue smart contract.Reverts if emergency stop status is set with `EmergencyStop` error.Reverts if `proof` or `publicInputs` are malformed with `InvalidPlonkProof` error.","params":{"blockNumber":"Block number on Vara Network","merkleRoot":"Merkle root of transactions included in block with corresponding block number","proof":"Serialised Plonk proof (using gnark's `MarshalSolidity`)."}},"unpause()":{"details":"Unpauses the contract."},"verifier()":{"details":"Returns verifier address.      Verifier is smart contract that is responsible for verifying      the validity of the Merkle proof.","returns":{"_0":"verifier Verifier address."}}},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/","openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts/=lib/openzeppelin-contracts/","openzeppelin-foundry-upgrades/=lib/openzeppelin-foundry-upgrades/src/","script/=script/","src/=src/","test/=test/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"none","appendCBOR":false},"compilationTarget":{"src/interfaces/IMessageQueue.sol":"IMessageQueue"},"evmVersion":"prague","libraries":{},"viaIR":true},"sources":{"src/interfaces/IMessageQueue.sol":{"keccak256":"0xf914c14cfc330a5b9c191ad1224b8c7a381b734b3deea7d18ae5bda8722e0838","urls":["bzz-raw://576d17afb44032e19e94b35ee986adcbc5862335c3e62eeeb0aacd81dd03a1e2","dweb:/ipfs/QmZTgDKvACg4UJiuYyeXrZ8CwNWGu1r35BnFqZgSD3EN5o"],"license":"GPL-3.0-or-later WITH Classpath-exception-2.0"},"src/interfaces/IPausable.sol":{"keccak256":"0x6d3c910562c9049a3a8e59d148623d37b546b6557563c8c202305864703f4394","urls":["bzz-raw://6e907b1040394cf61f68f7cedc3ce7f0572fb0efa1803afee6e266b83c0f8298","dweb:/ipfs/QmeWZWAJN3m9yA7fWWAyuEzwTxvVfW5yRPbZmZMixGUoZq"],"license":"GPL-3.0-or-later WITH Classpath-exception-2.0"}},"version":1},"storageLayout":{"storage":[],"types":{}},"ast":{"absolutePath":"src/interfaces/IMessageQueue.sol","id":63322,"exportedSymbols":{"Hasher":[63321],"IMessageQueue":[63253],"IPausable":[63333],"VaraMessage":[63138]},"nodeType":"SourceUnit","src":"74:7138:102","nodes":[{"id":63126,"nodeType":"PragmaDirective","src":"74:24:102","nodes":[],"literals":["solidity","^","0.8",".30"]},{"id":63128,"nodeType":"ImportDirective","src":"100:42:102","nodes":[],"absolutePath":"src/interfaces/IPausable.sol","file":"./IPausable.sol","nameLocation":"-1:-1:-1","scope":63322,"sourceUnit":63334,"symbolAliases":[{"foreign":{"id":63127,"name":"IPausable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":63333,"src":"108:9:102","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":63138,"nodeType":"StructDefinition","src":"350:105:102","nodes":[],"canonicalName":"VaraMessage","documentation":{"id":63129,"nodeType":"StructuredDocumentation","src":"144:205:102","text":" @dev Type representing message being bridged from Gear-based chain (Vara Network) to Ethereum.\n      - https://github.com/gear-tech/gear/blob/v1.8.1/pallets/gear-eth-bridge/src/internal.rs#L58"},"members":[{"constant":false,"id":63131,"mutability":"mutable","name":"nonce","nameLocation":"383:5:102","nodeType":"VariableDeclaration","scope":63138,"src":"375:13:102","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":63130,"name":"uint256","nodeType":"ElementaryTypeName","src":"375:7:102","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":63133,"mutability":"mutable","name":"source","nameLocation":"402:6:102","nodeType":"VariableDeclaration","scope":63138,"src":"394:14:102","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":63132,"name":"bytes32","nodeType":"ElementaryTypeName","src":"394:7:102","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":63135,"mutability":"mutable","name":"destination","nameLocation":"422:11:102","nodeType":"VariableDeclaration","scope":63138,"src":"414:19:102","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":63134,"name":"address","nodeType":"ElementaryTypeName","src":"414:7:102","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":63137,"mutability":"mutable","name":"payload","nameLocation":"445:7:102","nodeType":"VariableDeclaration","scope":63138,"src":"439:13:102","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":63136,"name":"bytes","nodeType":"ElementaryTypeName","src":"439:5:102","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"VaraMessage","nameLocation":"357:11:102","scope":63322,"visibility":"public"},{"id":63253,"nodeType":"ContractDefinition","src":"514:5419:102","nodes":[{"id":63144,"nodeType":"ErrorDefinition","src":"618:22:102","nodes":[],"documentation":{"id":63142,"nodeType":"StructuredDocumentation","src":"557:56:102","text":" @dev Emergency stop status is active."},"errorSelector":"4e97bcfc","name":"EmergencyStop","nameLocation":"624:13:102","parameters":{"id":63143,"nodeType":"ParameterList","parameters":[],"src":"637:2:102"}},{"id":63147,"nodeType":"ErrorDefinition","src":"702:26:102","nodes":[],"documentation":{"id":63145,"nodeType":"StructuredDocumentation","src":"646:51:102","text":" @dev The plonk proof is invalid."},"errorSelector":"d0b34d32","name":"InvalidPlonkProof","nameLocation":"708:17:102","parameters":{"id":63146,"nodeType":"ParameterList","parameters":[],"src":"725:2:102"}},{"id":63152,"nodeType":"ErrorDefinition","src":"798:52:102","nodes":[],"documentation":{"id":63148,"nodeType":"StructuredDocumentation","src":"734:59:102","text":" @dev Message nonce is already processed."},"errorSelector":"e140f8cc","name":"MessageAlreadyProcessed","nameLocation":"804:23:102","parameters":{"id":63151,"nodeType":"ParameterList","parameters":[{"constant":false,"id":63150,"mutability":"mutable","name":"messageNonce","nameLocation":"836:12:102","nodeType":"VariableDeclaration","scope":63152,"src":"828:20:102","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":63149,"name":"uint256","nodeType":"ElementaryTypeName","src":"828:7:102","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"827:22:102"}},{"id":63157,"nodeType":"ErrorDefinition","src":"962:46:102","nodes":[],"documentation":{"id":63153,"nodeType":"StructuredDocumentation","src":"856:101:102","text":" @dev Merkle root is not found for the block number in MessageQueue smart contract."},"errorSelector":"55d7a68b","name":"MerkleRootNotFound","nameLocation":"968:18:102","parameters":{"id":63156,"nodeType":"ParameterList","parameters":[{"constant":false,"id":63155,"mutability":"mutable","name":"blockNumber","nameLocation":"995:11:102","nodeType":"VariableDeclaration","scope":63157,"src":"987:19:102","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":63154,"name":"uint256","nodeType":"ElementaryTypeName","src":"987:7:102","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"986:21:102"}},{"id":63160,"nodeType":"ErrorDefinition","src":"1067:27:102","nodes":[],"documentation":{"id":63158,"nodeType":"StructuredDocumentation","src":"1014:48:102","text":" @dev Merkle proof is invalid."},"errorSelector":"b05e92fa","name":"InvalidMerkleProof","nameLocation":"1073:18:102","parameters":{"id":63159,"nodeType":"ParameterList","parameters":[],"src":"1091:2:102"}},{"id":63165,"nodeType":"ErrorDefinition","src":"1156:48:102","nodes":[],"documentation":{"id":63161,"nodeType":"StructuredDocumentation","src":"1100:51:102","text":" @dev Merkle root is already set."},"errorSelector":"8d60c7ab","name":"MerkleRootAlreadySet","nameLocation":"1162:20:102","parameters":{"id":63164,"nodeType":"ParameterList","parameters":[{"constant":false,"id":63163,"mutability":"mutable","name":"blockNumber","nameLocation":"1191:11:102","nodeType":"VariableDeclaration","scope":63165,"src":"1183:19:102","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":63162,"name":"uint256","nodeType":"ElementaryTypeName","src":"1183:7:102","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1182:21:102"}},{"id":63168,"nodeType":"EventDefinition","src":"1281:25:102","nodes":[],"anonymous":false,"documentation":{"id":63166,"nodeType":"StructuredDocumentation","src":"1210:66:102","text":" @dev Emitted when emergency stop status is set."},"eventSelector":"ae1fc94fd692bf240be219cead4601265a701df263b7045071227f1ba37f4750","name":"EmergencyStopSet","nameLocation":"1287:16:102","parameters":{"id":63167,"nodeType":"ParameterList","parameters":[],"src":"1303:2:102"}},{"id":63175,"nodeType":"EventDefinition","src":"1394:58:102","nodes":[],"anonymous":false,"documentation":{"id":63169,"nodeType":"StructuredDocumentation","src":"1312:77:102","text":" @dev Emitted when block number and merkle root are stored."},"eventSelector":"48211a20c285b6b077b7917b8bb118eaa92efdfb8fa2e3b114ffa253e0b665ae","name":"MerkleRoot","nameLocation":"1400:10:102","parameters":{"id":63174,"nodeType":"ParameterList","parameters":[{"constant":false,"id":63171,"indexed":false,"mutability":"mutable","name":"blockNumber","nameLocation":"1419:11:102","nodeType":"VariableDeclaration","scope":63175,"src":"1411:19:102","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":63170,"name":"uint256","nodeType":"ElementaryTypeName","src":"1411:7:102","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":63173,"indexed":false,"mutability":"mutable","name":"merkleRoot","nameLocation":"1440:10:102","nodeType":"VariableDeclaration","scope":63175,"src":"1432:18:102","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":63172,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1432:7:102","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1410:41:102"}},{"id":63186,"nodeType":"EventDefinition","src":"1521:115:102","nodes":[],"anonymous":false,"documentation":{"id":63176,"nodeType":"StructuredDocumentation","src":"1458:58:102","text":" @dev Emitted when message is processed."},"eventSelector":"994c669cfd9c0453d42c933a11c002a34d12d85563aebe99ca525fffc45454f8","name":"MessageProcessed","nameLocation":"1527:16:102","parameters":{"id":63185,"nodeType":"ParameterList","parameters":[{"constant":false,"id":63178,"indexed":false,"mutability":"mutable","name":"blockNumber","nameLocation":"1552:11:102","nodeType":"VariableDeclaration","scope":63186,"src":"1544:19:102","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":63177,"name":"uint256","nodeType":"ElementaryTypeName","src":"1544:7:102","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":63180,"indexed":false,"mutability":"mutable","name":"messageHash","nameLocation":"1573:11:102","nodeType":"VariableDeclaration","scope":63186,"src":"1565:19:102","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":63179,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1565:7:102","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":63182,"indexed":false,"mutability":"mutable","name":"messageNonce","nameLocation":"1594:12:102","nodeType":"VariableDeclaration","scope":63186,"src":"1586:20:102","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":63181,"name":"uint256","nodeType":"ElementaryTypeName","src":"1586:7:102","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":63184,"indexed":false,"mutability":"mutable","name":"messageDestination","nameLocation":"1616:18:102","nodeType":"VariableDeclaration","scope":63186,"src":"1608:26:102","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":63183,"name":"address","nodeType":"ElementaryTypeName","src":"1608:7:102","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1543:92:102"}},{"id":63192,"nodeType":"FunctionDefinition","src":"1761:59:102","nodes":[],"documentation":{"id":63187,"nodeType":"StructuredDocumentation","src":"1642:114:102","text":" @dev Returns governance admin address.\n @return governanceAdmin Governance admin address."},"functionSelector":"0058f6b8","implemented":false,"kind":"function","modifiers":[],"name":"governanceAdmin","nameLocation":"1770:15:102","parameters":{"id":63188,"nodeType":"ParameterList","parameters":[],"src":"1785:2:102"},"returnParameters":{"id":63191,"nodeType":"ParameterList","parameters":[{"constant":false,"id":63190,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":63192,"src":"1811:7:102","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":63189,"name":"address","nodeType":"ElementaryTypeName","src":"1811:7:102","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1810:9:102"},"scope":63253,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":63198,"nodeType":"FunctionDefinition","src":"1948:60:102","nodes":[],"documentation":{"id":63193,"nodeType":"StructuredDocumentation","src":"1826:117:102","text":" @dev Returns governance pauser address.\n @return governancePauser Governance pauser address."},"functionSelector":"c81eb797","implemented":false,"kind":"function","modifiers":[],"name":"governancePauser","nameLocation":"1957:16:102","parameters":{"id":63194,"nodeType":"ParameterList","parameters":[],"src":"1973:2:102"},"returnParameters":{"id":63197,"nodeType":"ParameterList","parameters":[{"constant":false,"id":63196,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":63198,"src":"1999:7:102","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":63195,"name":"address","nodeType":"ElementaryTypeName","src":"1999:7:102","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1998:9:102"},"scope":63253,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":63204,"nodeType":"FunctionDefinition","src":"2229:52:102","nodes":[],"documentation":{"id":63199,"nodeType":"StructuredDocumentation","src":"2014:210:102","text":" @dev Returns verifier address.\n      Verifier is smart contract that is responsible for verifying\n      the validity of the Merkle proof.\n @return verifier Verifier address."},"functionSelector":"2b7ac3f3","implemented":false,"kind":"function","modifiers":[],"name":"verifier","nameLocation":"2238:8:102","parameters":{"id":63200,"nodeType":"ParameterList","parameters":[],"src":"2246:2:102"},"returnParameters":{"id":63203,"nodeType":"ParameterList","parameters":[{"constant":false,"id":63202,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":63204,"src":"2272:7:102","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":63201,"name":"address","nodeType":"ElementaryTypeName","src":"2272:7:102","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2271:9:102"},"scope":63253,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":63210,"nodeType":"FunctionDefinition","src":"2403:59:102","nodes":[],"documentation":{"id":63205,"nodeType":"StructuredDocumentation","src":"2287:111:102","text":" @dev Returns emergency stop status.\n @return isEmergencyStopped emergency stop status."},"functionSelector":"fddd4837","implemented":false,"kind":"function","modifiers":[],"name":"isEmergencyStopped","nameLocation":"2412:18:102","parameters":{"id":63206,"nodeType":"ParameterList","parameters":[],"src":"2430:2:102"},"returnParameters":{"id":63209,"nodeType":"ParameterList","parameters":[{"constant":false,"id":63208,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":63210,"src":"2456:4:102","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":63207,"name":"bool","nodeType":"ElementaryTypeName","src":"2456:4:102","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2455:6:102"},"scope":63253,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":63220,"nodeType":"FunctionDefinition","src":"3327:98:102","nodes":[],"documentation":{"id":63211,"nodeType":"StructuredDocumentation","src":"2468:854:102","text":" @dev Receives, verifies and stores Merkle roots from Vara Network.\n      Upon successfully storing data about block number and corresponding Merkle root,\n      MessageQueue smart contract will emit a `MerkleRoot` event.\n      It is important to note that anyone can submit a Merkle root because only\n      validated Merkle roots will be stored in the MessageQueue smart contract.\n @param blockNumber Block number on Vara Network\n @param merkleRoot Merkle root of transactions included in block with corresponding block number\n @param proof Serialised Plonk proof (using gnark's `MarshalSolidity`).\n @dev Reverts if emergency stop status is set with `EmergencyStop` error.\n @dev Reverts if `proof` or `publicInputs` are malformed with `InvalidPlonkProof` error."},"functionSelector":"cca66a9d","implemented":false,"kind":"function","modifiers":[],"name":"submitMerkleRoot","nameLocation":"3336:16:102","parameters":{"id":63218,"nodeType":"ParameterList","parameters":[{"constant":false,"id":63213,"mutability":"mutable","name":"blockNumber","nameLocation":"3361:11:102","nodeType":"VariableDeclaration","scope":63220,"src":"3353:19:102","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":63212,"name":"uint256","nodeType":"ElementaryTypeName","src":"3353:7:102","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":63215,"mutability":"mutable","name":"merkleRoot","nameLocation":"3382:10:102","nodeType":"VariableDeclaration","scope":63220,"src":"3374:18:102","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":63214,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3374:7:102","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":63217,"mutability":"mutable","name":"proof","nameLocation":"3409:5:102","nodeType":"VariableDeclaration","scope":63220,"src":"3394:20:102","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":63216,"name":"bytes","nodeType":"ElementaryTypeName","src":"3394:5:102","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3352:63:102"},"returnParameters":{"id":63219,"nodeType":"ParameterList","parameters":[],"src":"3424:0:102"},"scope":63253,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":63228,"nodeType":"FunctionDefinition","src":"3713:76:102","nodes":[],"documentation":{"id":63221,"nodeType":"StructuredDocumentation","src":"3431:277:102","text":" @dev Returns merkle root for specified block number.\n      Returns `bytes32(0)` if merkle root was not provided for specified block number.\n @param blockNumber Target block number.\n @return merkleRoot Merkle root for specified block number."},"functionSelector":"0aab8ba5","implemented":false,"kind":"function","modifiers":[],"name":"getMerkleRoot","nameLocation":"3722:13:102","parameters":{"id":63224,"nodeType":"ParameterList","parameters":[{"constant":false,"id":63223,"mutability":"mutable","name":"blockNumber","nameLocation":"3744:11:102","nodeType":"VariableDeclaration","scope":63228,"src":"3736:19:102","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":63222,"name":"uint256","nodeType":"ElementaryTypeName","src":"3736:7:102","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3735:21:102"},"returnParameters":{"id":63227,"nodeType":"ParameterList","parameters":[{"constant":false,"id":63226,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":63228,"src":"3780:7:102","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":63225,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3780:7:102","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3779:9:102"},"scope":63253,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":63244,"nodeType":"FunctionDefinition","src":"5450:196:102","nodes":[],"documentation":{"id":63229,"nodeType":"StructuredDocumentation","src":"3795:1650:102","text":" @dev Verifies and processes message originated from Vara Network.\n      In this process, MessageQueue smart contract will calculate Merkle root\n      for message and validate that it corresponds to Merkle root which is already stored\n      in MessageQueue smart contract for same block number. If proof is correct, nonce of received\n      message will be stored in smart contract and message will be forwarded to adequate message\n      processor, either ERC20Manager or Governance smart contract.\n      Upon successful processing of the message `MessageProcessed` event is emitted.\n      It is important to note that anyone can submit a message because all messages\n      will be validated against previously stored Merkle roots in the MessageQueue smart contract.\n @param blockNumber Block number of block containing target merkle tree.\n @param totalLeaves Number of leaves in target merkle tree.\n @param leafIndex Index of leaf containing target message.\n @param message Target message.\n @param proof Merkle proof of inclusion of leaf #`leafIndex` into target merkle tree that\n              was included into `blockNumber`.\n @dev Reverts if:\n      - MessageQueue is paused and message source is not any governance address.\n      - MessageQueue emergency stop status is set.\n      - Message nonce is already processed.\n      - Merkle root is not set for the block number in MessageQueue smart contract.\n      - Merkle proof is invalid.\n      - Message processing fails."},"functionSelector":"93eb47e9","implemented":false,"kind":"function","modifiers":[],"name":"processMessage","nameLocation":"5459:14:102","parameters":{"id":63242,"nodeType":"ParameterList","parameters":[{"constant":false,"id":63231,"mutability":"mutable","name":"blockNumber","nameLocation":"5491:11:102","nodeType":"VariableDeclaration","scope":63244,"src":"5483:19:102","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":63230,"name":"uint256","nodeType":"ElementaryTypeName","src":"5483:7:102","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":63233,"mutability":"mutable","name":"totalLeaves","nameLocation":"5520:11:102","nodeType":"VariableDeclaration","scope":63244,"src":"5512:19:102","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":63232,"name":"uint256","nodeType":"ElementaryTypeName","src":"5512:7:102","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":63235,"mutability":"mutable","name":"leafIndex","nameLocation":"5549:9:102","nodeType":"VariableDeclaration","scope":63244,"src":"5541:17:102","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":63234,"name":"uint256","nodeType":"ElementaryTypeName","src":"5541:7:102","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":63238,"mutability":"mutable","name":"message","nameLocation":"5589:7:102","nodeType":"VariableDeclaration","scope":63244,"src":"5568:28:102","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_VaraMessage_$63138_calldata_ptr","typeString":"struct VaraMessage"},"typeName":{"id":63237,"nodeType":"UserDefinedTypeName","pathNode":{"id":63236,"name":"VaraMessage","nameLocations":["5568:11:102"],"nodeType":"IdentifierPath","referencedDeclaration":63138,"src":"5568:11:102"},"referencedDeclaration":63138,"src":"5568:11:102","typeDescriptions":{"typeIdentifier":"t_struct$_VaraMessage_$63138_storage_ptr","typeString":"struct VaraMessage"}},"visibility":"internal"},{"constant":false,"id":63241,"mutability":"mutable","name":"proof","nameLocation":"5625:5:102","nodeType":"VariableDeclaration","scope":63244,"src":"5606:24:102","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":63239,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5606:7:102","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":63240,"nodeType":"ArrayTypeName","src":"5606:9:102","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"5473:163:102"},"returnParameters":{"id":63243,"nodeType":"ParameterList","parameters":[],"src":"5645:0:102"},"scope":63253,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":63252,"nodeType":"FunctionDefinition","src":"5859:72:102","nodes":[],"documentation":{"id":63245,"nodeType":"StructuredDocumentation","src":"5652:202:102","text":" @dev Checks if message was already processed.\n @param messageNonce Message nonce to check.\n @return isProcessed `true` if message was already processed, `false` otherwise."},"functionSelector":"bfe7edd7","implemented":false,"kind":"function","modifiers":[],"name":"isProcessed","nameLocation":"5868:11:102","parameters":{"id":63248,"nodeType":"ParameterList","parameters":[{"constant":false,"id":63247,"mutability":"mutable","name":"messageNonce","nameLocation":"5888:12:102","nodeType":"VariableDeclaration","scope":63252,"src":"5880:20:102","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":63246,"name":"uint256","nodeType":"ElementaryTypeName","src":"5880:7:102","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5879:22:102"},"returnParameters":{"id":63251,"nodeType":"ParameterList","parameters":[{"constant":false,"id":63250,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":63252,"src":"5925:4:102","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":63249,"name":"bool","nodeType":"ElementaryTypeName","src":"5925:4:102","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5924:6:102"},"scope":63253,"stateMutability":"view","virtual":false,"visibility":"external"}],"abstract":false,"baseContracts":[{"baseName":{"id":63140,"name":"IPausable","nameLocations":["541:9:102"],"nodeType":"IdentifierPath","referencedDeclaration":63333,"src":"541:9:102"},"id":63141,"nodeType":"InheritanceSpecifier","src":"541:9:102"}],"canonicalName":"IMessageQueue","contractDependencies":[],"contractKind":"interface","documentation":{"id":63139,"nodeType":"StructuredDocumentation","src":"457:56:102","text":" @dev Interface for the MessageQueue contract."},"fullyImplemented":false,"linearizedBaseContracts":[63253,63333],"name":"IMessageQueue","nameLocation":"524:13:102","scope":63322,"usedErrors":[63144,63147,63152,63157,63160,63165],"usedEvents":[63168,63175,63186]},{"id":63321,"nodeType":"ContractDefinition","src":"5984:1227:102","nodes":[{"id":63287,"nodeType":"FunctionDefinition","src":"6133:476:102","nodes":[],"body":{"id":63286,"nodeType":"Block","src":"6217:392:102","nodes":[],"statements":[{"assignments":[63265],"declarations":[{"constant":false,"id":63265,"mutability":"mutable","name":"hash1","nameLocation":"6292:5:102","nodeType":"VariableDeclaration","scope":63286,"src":"6284:13:102","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":63264,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6284:7:102","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"documentation":"forge-lint: disable-next-line(asm-keccak256)","id":63279,"initialValue":{"arguments":[{"arguments":[{"expression":{"id":63269,"name":"message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":63258,"src":"6327:7:102","typeDescriptions":{"typeIdentifier":"t_struct$_VaraMessage_$63138_calldata_ptr","typeString":"struct VaraMessage calldata"}},"id":63270,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6335:5:102","memberName":"nonce","nodeType":"MemberAccess","referencedDeclaration":63131,"src":"6327:13:102","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":63271,"name":"message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":63258,"src":"6342:7:102","typeDescriptions":{"typeIdentifier":"t_struct$_VaraMessage_$63138_calldata_ptr","typeString":"struct VaraMessage calldata"}},"id":63272,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6350:6:102","memberName":"source","nodeType":"MemberAccess","referencedDeclaration":63133,"src":"6342:14:102","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":63273,"name":"message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":63258,"src":"6358:7:102","typeDescriptions":{"typeIdentifier":"t_struct$_VaraMessage_$63138_calldata_ptr","typeString":"struct VaraMessage calldata"}},"id":63274,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6366:11:102","memberName":"destination","nodeType":"MemberAccess","referencedDeclaration":63135,"src":"6358:19:102","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":63275,"name":"message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":63258,"src":"6379:7:102","typeDescriptions":{"typeIdentifier":"t_struct$_VaraMessage_$63138_calldata_ptr","typeString":"struct VaraMessage calldata"}},"id":63276,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6387:7:102","memberName":"payload","nodeType":"MemberAccess","referencedDeclaration":63137,"src":"6379:15:102","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"expression":{"id":63267,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"6310:3:102","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":63268,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6314:12:102","memberName":"encodePacked","nodeType":"MemberAccess","src":"6310:16:102","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":63277,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6310:85:102","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":63266,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"6300:9:102","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":63278,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6300:96:102","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"6284:112:102"},{"assignments":[63281],"declarations":[{"constant":false,"id":63281,"mutability":"mutable","name":"hash2","nameLocation":"6454:5:102","nodeType":"VariableDeclaration","scope":63286,"src":"6446:13:102","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":63280,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6446:7:102","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":63282,"nodeType":"VariableDeclarationStatement","src":"6446:13:102"},{"AST":{"nativeSrc":"6494:86:102","nodeType":"YulBlock","src":"6494:86:102","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6515:4:102","nodeType":"YulLiteral","src":"6515:4:102","type":"","value":"0x00"},{"name":"hash1","nativeSrc":"6521:5:102","nodeType":"YulIdentifier","src":"6521:5:102"}],"functionName":{"name":"mstore","nativeSrc":"6508:6:102","nodeType":"YulIdentifier","src":"6508:6:102"},"nativeSrc":"6508:19:102","nodeType":"YulFunctionCall","src":"6508:19:102"},"nativeSrc":"6508:19:102","nodeType":"YulExpressionStatement","src":"6508:19:102"},{"nativeSrc":"6540:30:102","nodeType":"YulAssignment","src":"6540:30:102","value":{"arguments":[{"kind":"number","nativeSrc":"6559:4:102","nodeType":"YulLiteral","src":"6559:4:102","type":"","value":"0x00"},{"kind":"number","nativeSrc":"6565:4:102","nodeType":"YulLiteral","src":"6565:4:102","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nativeSrc":"6549:9:102","nodeType":"YulIdentifier","src":"6549:9:102"},"nativeSrc":"6549:21:102","nodeType":"YulFunctionCall","src":"6549:21:102"},"variableNames":[{"name":"hash2","nativeSrc":"6540:5:102","nodeType":"YulIdentifier","src":"6540:5:102"}]}]},"evmVersion":"prague","externalReferences":[{"declaration":63265,"isOffset":false,"isSlot":false,"src":"6521:5:102","valueSize":1},{"declaration":63281,"isOffset":false,"isSlot":false,"src":"6540:5:102","valueSize":1}],"flags":["memory-safe"],"id":63283,"nodeType":"InlineAssembly","src":"6469:111:102"},{"expression":{"id":63284,"name":"hash2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":63281,"src":"6597:5:102","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":63262,"id":63285,"nodeType":"Return","src":"6590:12:102"}]},"documentation":{"id":63255,"nodeType":"StructuredDocumentation","src":"6005:123:102","text":" @dev Hashes VaraMessage.\n @param message Message to hash.\n @return hash Hash of the message."},"implemented":true,"kind":"function","modifiers":[],"name":"hashCalldata","nameLocation":"6142:12:102","parameters":{"id":63259,"nodeType":"ParameterList","parameters":[{"constant":false,"id":63258,"mutability":"mutable","name":"message","nameLocation":"6176:7:102","nodeType":"VariableDeclaration","scope":63287,"src":"6155:28:102","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_VaraMessage_$63138_calldata_ptr","typeString":"struct VaraMessage"},"typeName":{"id":63257,"nodeType":"UserDefinedTypeName","pathNode":{"id":63256,"name":"VaraMessage","nameLocations":["6155:11:102"],"nodeType":"IdentifierPath","referencedDeclaration":63138,"src":"6155:11:102"},"referencedDeclaration":63138,"src":"6155:11:102","typeDescriptions":{"typeIdentifier":"t_struct$_VaraMessage_$63138_storage_ptr","typeString":"struct VaraMessage"}},"visibility":"internal"}],"src":"6154:30:102"},"returnParameters":{"id":63262,"nodeType":"ParameterList","parameters":[{"constant":false,"id":63261,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":63287,"src":"6208:7:102","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":63260,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6208:7:102","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6207:9:102"},"scope":63321,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":63320,"nodeType":"FunctionDefinition","src":"6743:466:102","nodes":[],"body":{"id":63319,"nodeType":"Block","src":"6817:392:102","nodes":[],"statements":[{"assignments":[63298],"declarations":[{"constant":false,"id":63298,"mutability":"mutable","name":"hash1","nameLocation":"6892:5:102","nodeType":"VariableDeclaration","scope":63319,"src":"6884:13:102","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":63297,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6884:7:102","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"documentation":"forge-lint: disable-next-line(asm-keccak256)","id":63312,"initialValue":{"arguments":[{"arguments":[{"expression":{"id":63302,"name":"message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":63291,"src":"6927:7:102","typeDescriptions":{"typeIdentifier":"t_struct$_VaraMessage_$63138_memory_ptr","typeString":"struct VaraMessage memory"}},"id":63303,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6935:5:102","memberName":"nonce","nodeType":"MemberAccess","referencedDeclaration":63131,"src":"6927:13:102","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":63304,"name":"message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":63291,"src":"6942:7:102","typeDescriptions":{"typeIdentifier":"t_struct$_VaraMessage_$63138_memory_ptr","typeString":"struct VaraMessage memory"}},"id":63305,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6950:6:102","memberName":"source","nodeType":"MemberAccess","referencedDeclaration":63133,"src":"6942:14:102","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":63306,"name":"message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":63291,"src":"6958:7:102","typeDescriptions":{"typeIdentifier":"t_struct$_VaraMessage_$63138_memory_ptr","typeString":"struct VaraMessage memory"}},"id":63307,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6966:11:102","memberName":"destination","nodeType":"MemberAccess","referencedDeclaration":63135,"src":"6958:19:102","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":63308,"name":"message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":63291,"src":"6979:7:102","typeDescriptions":{"typeIdentifier":"t_struct$_VaraMessage_$63138_memory_ptr","typeString":"struct VaraMessage memory"}},"id":63309,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6987:7:102","memberName":"payload","nodeType":"MemberAccess","referencedDeclaration":63137,"src":"6979:15:102","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":63300,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"6910:3:102","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":63301,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6914:12:102","memberName":"encodePacked","nodeType":"MemberAccess","src":"6910:16:102","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":63310,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6910:85:102","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":63299,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"6900:9:102","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":63311,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6900:96:102","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"6884:112:102"},{"assignments":[63314],"declarations":[{"constant":false,"id":63314,"mutability":"mutable","name":"hash2","nameLocation":"7054:5:102","nodeType":"VariableDeclaration","scope":63319,"src":"7046:13:102","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":63313,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7046:7:102","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":63315,"nodeType":"VariableDeclarationStatement","src":"7046:13:102"},{"AST":{"nativeSrc":"7094:86:102","nodeType":"YulBlock","src":"7094:86:102","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7115:4:102","nodeType":"YulLiteral","src":"7115:4:102","type":"","value":"0x00"},{"name":"hash1","nativeSrc":"7121:5:102","nodeType":"YulIdentifier","src":"7121:5:102"}],"functionName":{"name":"mstore","nativeSrc":"7108:6:102","nodeType":"YulIdentifier","src":"7108:6:102"},"nativeSrc":"7108:19:102","nodeType":"YulFunctionCall","src":"7108:19:102"},"nativeSrc":"7108:19:102","nodeType":"YulExpressionStatement","src":"7108:19:102"},{"nativeSrc":"7140:30:102","nodeType":"YulAssignment","src":"7140:30:102","value":{"arguments":[{"kind":"number","nativeSrc":"7159:4:102","nodeType":"YulLiteral","src":"7159:4:102","type":"","value":"0x00"},{"kind":"number","nativeSrc":"7165:4:102","nodeType":"YulLiteral","src":"7165:4:102","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nativeSrc":"7149:9:102","nodeType":"YulIdentifier","src":"7149:9:102"},"nativeSrc":"7149:21:102","nodeType":"YulFunctionCall","src":"7149:21:102"},"variableNames":[{"name":"hash2","nativeSrc":"7140:5:102","nodeType":"YulIdentifier","src":"7140:5:102"}]}]},"evmVersion":"prague","externalReferences":[{"declaration":63298,"isOffset":false,"isSlot":false,"src":"7121:5:102","valueSize":1},{"declaration":63314,"isOffset":false,"isSlot":false,"src":"7140:5:102","valueSize":1}],"flags":["memory-safe"],"id":63316,"nodeType":"InlineAssembly","src":"7069:111:102"},{"expression":{"id":63317,"name":"hash2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":63314,"src":"7197:5:102","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":63295,"id":63318,"nodeType":"Return","src":"7190:12:102"}]},"documentation":{"id":63288,"nodeType":"StructuredDocumentation","src":"6615:123:102","text":" @dev Hashes VaraMessage.\n @param message Message to hash.\n @return hash Hash of the message."},"implemented":true,"kind":"function","modifiers":[],"name":"hash","nameLocation":"6752:4:102","parameters":{"id":63292,"nodeType":"ParameterList","parameters":[{"constant":false,"id":63291,"mutability":"mutable","name":"message","nameLocation":"6776:7:102","nodeType":"VariableDeclaration","scope":63320,"src":"6757:26:102","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_VaraMessage_$63138_memory_ptr","typeString":"struct VaraMessage"},"typeName":{"id":63290,"nodeType":"UserDefinedTypeName","pathNode":{"id":63289,"name":"VaraMessage","nameLocations":["6757:11:102"],"nodeType":"IdentifierPath","referencedDeclaration":63138,"src":"6757:11:102"},"referencedDeclaration":63138,"src":"6757:11:102","typeDescriptions":{"typeIdentifier":"t_struct$_VaraMessage_$63138_storage_ptr","typeString":"struct VaraMessage"}},"visibility":"internal"}],"src":"6756:28:102"},"returnParameters":{"id":63295,"nodeType":"ParameterList","parameters":[{"constant":false,"id":63294,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":63320,"src":"6808:7:102","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":63293,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6808:7:102","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6807:9:102"},"scope":63321,"stateMutability":"pure","virtual":false,"visibility":"internal"}],"abstract":false,"baseContracts":[],"canonicalName":"Hasher","contractDependencies":[],"contractKind":"library","documentation":{"id":63254,"nodeType":"StructuredDocumentation","src":"5935:48:102","text":" @dev Library for hashing VaraMessage."},"fullyImplemented":true,"linearizedBaseContracts":[63321],"name":"Hasher","nameLocation":"5992:6:102","scope":63322,"usedErrors":[],"usedEvents":[]}],"license":"GPL-3.0-or-later WITH Classpath-exception-2.0"},"id":102}