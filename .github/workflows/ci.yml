name: CI

on:
  push:
    branches:
      - main
      - release-202509
  pull_request:
    branches:
      - main
      - release-202509

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  __GEAR_WASM_BUILDER_NO_FEATURES_TRACKING: 1

jobs:
  check-frontend-changes:
    runs-on: ubuntu-latest
    outputs:
      frontend_changed: ${{ steps.filter.outputs.frontend }}
      non_frontend_changed: ${{ steps.filter.outputs.non_frontend }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Filter files
        id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            frontend:
              - 'js/frontend/**'
              - 'package.json'
              - 'yarn.lock'
            non_frontend:
              - '**'
              - '!js/frontend/**'
              - '!package.json'
              - '!yarn.lock'
  build:
    needs: check-frontend-changes
    if: ${{ github.event_name != 'pull_request' || needs.check-frontend-changes.outputs.non_frontend_changed == 'true' }}
    runs-on: kuberunner
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          cache: false

      - name: Install golang
        uses: actions/setup-go@v5
        with:
          go-version: '1.20.1'

      - name: Install foundry
        uses: foundry-rs/foundry-toolchain@v1

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.x

      - name: Install OpenZeppelin Foundry Upgrades
        run: |
          npm cache clean --force
          # version from ethereum/lib/openzeppelin-foundry-upgrades/src/internal/Versions.sol
          npx @openzeppelin/upgrades-core@^1.37.0

      - name: Check ethereum smart-contracts formatting
        run: forge fmt --check
        working-directory: ./ethereum

      - name: Build ethereum smart-contracts
        run: forge build --force
        working-directory: ./ethereum

      - name: Build
        run: cargo build --release --all-targets

      - name: Force build ethereum smart-contracts
        run: forge build --force --no-cache --root ethereum

      - name: Check API files
        run: |
          stored=(
            "./api/ethereum/IBridgingPayment.json"
            "./api/ethereum/IERC20Manager.json"
            "./api/ethereum/IMessageQueue.json"
            "./api/ethereum/WrappedEther.json"
            "./api/ethereum/ERC20Manager.json"
            "./api/ethereum/MessageQueue.json"
            "./api/ethereum/BridgingPayment.json"

            "./api/gear/bridging_payment.idl"
            "./api/gear/eth_events_deneb.idl"
            "./api/gear/eth_events_electra.idl"
            "./api/gear/vft_manager.idl"
            "./api/gear/historical_proxy.idl"
            "./api/gear/checkpoint_light_client.idl"
          )

          generated=(
            "./ethereum/out/IBridgingPayment.sol/IBridgingPayment.json"
            "./ethereum/out/IERC20Manager.sol/IERC20Manager.json"
            "./ethereum/out/IMessageQueue.sol/IMessageQueue.json"
            "./ethereum/out/WrappedEther.sol/WrappedEther.json"
            "./ethereum/out/ERC20Manager.sol/ERC20Manager.json"
            "./ethereum/out/MessageQueue.sol/MessageQueue.json"
            "./ethereum/out/BridgingPayment.sol/BridgingPayment.json"

            "./target/wasm32-gear/release/bridging_payment.idl"
            "./target/wasm32-gear/release/eth_events_deneb.idl"
            "./target/wasm32-gear/release/eth_events_electra.idl"
            "./target/wasm32-gear/release/vft_manager.idl"
            "./target/wasm32-gear/release/historical_proxy.idl"
            "./target/wasm32-gear/release/checkpoint_light_client.idl"
          )

          for i in "${!stored[@]}"; do
            if ! cmp -s "${stored[$i]}" "${generated[$i]}"; then
              echo "API files ${stored[$i]} and ${generated[$i]} don't match."
              diff "${stored[$i]}" "${generated[$i]}"
              exit 1
            fi
          done

  lints:
    needs: check-frontend-changes
    if: ${{ github.event_name != 'pull_request' || needs.check-frontend-changes.outputs.non_frontend_changed == 'true' }}
    runs-on: kuberunner
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          cache: false

      - name: Install golang
        uses: actions/setup-go@v5
        with:
          go-version: '1.20.1'

      - name: Install foundry
        uses: foundry-rs/foundry-toolchain@v1

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.x

      - name: Install OpenZeppelin Foundry Upgrades
        run: |
          npm cache clean --force
          # version from ethereum/lib/openzeppelin-foundry-upgrades/src/internal/Versions.sol
          npx @openzeppelin/upgrades-core@^1.37.0

      - name: Check ethereum smart-contracts formatting
        run: forge fmt --check
        working-directory: ./ethereum

      - name: Build ethereum smart-contracts
        run: forge build --force
        working-directory: ./ethereum

      - name: Run clippy
        run: cargo clippy --release --all-targets -- -D warnings $(cat .lints | cut -f1 -d"#" | tr '\n' ' ')

      - name: Run rustfmt
        run: cargo fmt -- --check

  tests:
    needs: check-frontend-changes
    if: ${{ github.event_name != 'pull_request' || needs.check-frontend-changes.outputs.non_frontend_changed == 'true' }}
    runs-on: kuberunner
    env:
      NODE_CONTAINER_NAME: gear_node${{ github.run_id }}_${{ github.run_number }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          cache: false

      - name: Install golang
        uses: actions/setup-go@v5
        with:
          go-version: '1.20.1'

      - name: Install foundry
        uses: foundry-rs/foundry-toolchain@v1

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.x

      - name: Install OpenZeppelin Foundry Upgrades
        run: |
          npm cache clean --force
          # version from ethereum/lib/openzeppelin-foundry-upgrades/src/internal/Versions.sol
          npx @openzeppelin/upgrades-core@^1.37.0

      - name: Check ethereum smart-contracts formatting
        run: forge fmt --check
        working-directory: ./ethereum

      - name: Build ethereum smart-contracts
        run: forge build --force
        working-directory: ./ethereum

      - name: Pull & run Gear node container
        run: |
          docker pull ghcr.io/gear-tech/node:v1.9.0
          docker run --name $NODE_CONTAINER_NAME --detach --rm --publish 127.0.0.1:9944:9944 ghcr.io/gear-tech/node:v1.9.0 gear --dev --tmp --rpc-external

      - name: Run tests
        run: cargo test --release --workspace
          --exclude prover
          --exclude plonky2_blake2b256
          --exclude plonky2_ecdsa
          --exclude plonky2_ed25519
          --exclude plonky2_sha512
          --exclude plonky2_u32 || { exit_code=$?; if [ x$exit_code != x0 ]; then docker stop $NODE_CONTAINER_NAME; fi; exit $exit_code; }

      - name: Run prover asserting tests
        run: cargo test --release --package prover assert_constants

      - name: Run solidity tests
        run: |
          cd ethereum
          forge test --force

      - name: Stop Gear node container (if any)
        continue-on-error: true
        run: docker stop $NODE_CONTAINER_NAME

  check-zk-circuits-changed:
    runs-on: kuberunner
    outputs:
      circuits_changed: ${{ steps.filter.outputs.circuits }}
      prover_changed: ${{ steps.filter.outputs.prover }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Filter files
        id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            circuits:
              - 'circuits/**'
            prover:
              - 'prover/**'

  zk-tests:
    runs-on: zk-tests
    env:
      VBLAKE2_CACHE_PATH: "/VariativeBlake2"
    needs: check-zk-circuits-changed
    if: ${{ (github.event_name != 'pull_request' || needs.check-frontend-changes.outputs.non_frontend_changed == 'true') && needs.check-zk-circuits-changed.outputs.circuits_changed == 'true' || needs.check-zk-circuits-changed.outputs.prover_changed == 'true'}}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          cache: false

      - name: Run tests
        run: cargo test --release
          -p prover
          -p plonky2_blake2b256
          -p plonky2_ecdsa
          -p plonky2_ed25519
          -p plonky2_sha512
          -p plonky2_u32
