/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface ValidatorSetChangeVerifierInterface extends utils.Interface {
  functions: {
    "nonceId()": FunctionFragment;
    "publicInputs(uint256)": FunctionFragment;
    "validatorSet(uint256)": FunctionFragment;
    "verifyProof(uint256[2],uint256[2][2],uint256[2],uint256[78])": FunctionFragment;
    "verifyValidatorSetChangeProof(uint256[2],uint256[2][2],uint256[2],uint256[5])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "nonceId"
      | "publicInputs"
      | "validatorSet"
      | "verifyProof"
      | "verifyValidatorSetChangeProof"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "nonceId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "publicInputs",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "validatorSet",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyProof",
    values: [
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      [
        [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
        [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
      ],
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyValidatorSetChangeProof",
    values: [
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      [
        [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
        [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
      ],
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ]
    ]
  ): string;

  decodeFunctionResult(functionFragment: "nonceId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "publicInputs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatorSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyValidatorSetChangeProof",
    data: BytesLike
  ): Result;

  events: {
    "SuccessfulVerification(uint256[5])": EventFragment;
    "VerificationFailed(uint256[5])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SuccessfulVerification"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VerificationFailed"): EventFragment;
}

export interface SuccessfulVerificationEventObject {
  arg0: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
}
export type SuccessfulVerificationEvent = TypedEvent<
  [[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]],
  SuccessfulVerificationEventObject
>;

export type SuccessfulVerificationEventFilter =
  TypedEventFilter<SuccessfulVerificationEvent>;

export interface VerificationFailedEventObject {
  arg0: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
}
export type VerificationFailedEvent = TypedEvent<
  [[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]],
  VerificationFailedEventObject
>;

export type VerificationFailedEventFilter =
  TypedEventFilter<VerificationFailedEvent>;

export interface ValidatorSetChangeVerifier extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ValidatorSetChangeVerifierInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    nonceId(overrides?: CallOverrides): Promise<[BigNumber]>;

    publicInputs(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    validatorSet(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    verifyProof(
      _pA: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _pB: [
        [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
        [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
      ],
      _pC: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _pubSignals: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    verifyValidatorSetChangeProof(
      _pA: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _pB: [
        [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
        [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
      ],
      _pC: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      nextValidatorSet: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  nonceId(overrides?: CallOverrides): Promise<BigNumber>;

  publicInputs(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  validatorSet(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  verifyProof(
    _pA: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    _pB: [
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
    ],
    _pC: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    _pubSignals: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  verifyValidatorSetChangeProof(
    _pA: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    _pB: [
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
    ],
    _pC: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    nextValidatorSet: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    nonceId(overrides?: CallOverrides): Promise<BigNumber>;

    publicInputs(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validatorSet(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyProof(
      _pA: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _pB: [
        [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
        [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
      ],
      _pC: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _pubSignals: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    verifyValidatorSetChangeProof(
      _pA: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _pB: [
        [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
        [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
      ],
      _pC: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      nextValidatorSet: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "SuccessfulVerification(uint256[5])"(
      arg0?: null
    ): SuccessfulVerificationEventFilter;
    SuccessfulVerification(arg0?: null): SuccessfulVerificationEventFilter;

    "VerificationFailed(uint256[5])"(
      arg0?: null
    ): VerificationFailedEventFilter;
    VerificationFailed(arg0?: null): VerificationFailedEventFilter;
  };

  estimateGas: {
    nonceId(overrides?: CallOverrides): Promise<BigNumber>;

    publicInputs(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validatorSet(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyProof(
      _pA: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _pB: [
        [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
        [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
      ],
      _pC: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _pubSignals: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyValidatorSetChangeProof(
      _pA: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _pB: [
        [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
        [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
      ],
      _pC: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      nextValidatorSet: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    nonceId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    publicInputs(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validatorSet(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyProof(
      _pA: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _pB: [
        [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
        [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
      ],
      _pC: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _pubSignals: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyValidatorSetChangeProof(
      _pA: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _pB: [
        [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
        [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
      ],
      _pC: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      nextValidatorSet: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
