type InitConfig = struct {
  validator_pub_keys: vec actor_id,
  bridge_authority: actor_id,
  emergency_admins: vec actor_id,
  config: Config,
  in_migration: bool,
  bridge_id: u128,
};

type Config = struct {
  min_amount: u256,
  ft_token_id: actor_id,
  gas_for_token_minting: u64,
  gas_for_token_burning: u64,
  gas_for_batch_transfer: u64,
  gas_for_transfer_to_eth: u64,
  reply_timeout: u32,
  reply_deposit: u64,
  min_validators_required: u8,
  gas_for_migration: u64,
  validator_assigned_address: actor_id,
  fallback_recipient: actor_id,
  fee_provider: actor_id,
};

type EthToVaraTransfer = struct {
  sender: str,
  recipient: actor_id,
  amount: u256,
  nonce_id: u256,
};

type SigData = struct {
  pub_key: actor_id,
  signature: vec u8,
};

type VaraToEthTransfer = struct {
  sender: actor_id,
  recipient: str,
  amount: u256,
  nonce_id: u256,
};

type Status = enum {
  Active,
  EmergencyStopped,
};

constructor {
  New : (init_config: InitConfig);
};

service VaraBridge {
  ActivateEmergencyStop : () -> null;
  AddEmergencyAdmin : (new_emergency_admin: actor_id) -> null;
  AddValidators : (new_validator_keys: vec actor_id) -> null;
  ClearVaraQueue : (last_executed_eth_nonce_id: u256) -> null;
  DeactivateEmergencyStop : () -> null;
  EndMigration : () -> null;
  RemoveEmergencyAdmin : (emergency_admin_to_remove: actor_id) -> null;
  RemoveValidators : (validator_key_to_remove: vec actor_id) -> null;
  SetEthToVaraNonce : (eth_to_vara_nonce: u256) -> null;
  SetNonces : (vara_to_eth_nonce: u256, eth_to_vara_nonce: u256) -> null;
  SetPreviousContract : (previous_contract: actor_id) -> null;
  SetVaraToEthNonce : (vara_to_eth_nonce: u256) -> null;
  StartMigration : () -> null;
  TransitEthToVaraBatch : (teleports: vec EthToVaraTransfer, signatures_data: vec SigData, last_executed_eth_nonce_id: u256) -> null;
  TransitVaraToEth : (fee: u128, mortality: u64, timestamp: u64, fee_provider_signature: vec u8, recipient: str, amount: u256) -> null;
  UpdateBridgeAuthority : (new_bridge_authority: actor_id) -> null;
  UpdateFallbackRecipient : (new_address: actor_id) -> null;
  UpdateFeeProvider : (new_address: actor_id) -> null;
  UpdateGasForMigration : (gas_for_migration: u64) -> null;
  UpdateMinAmount : (min_amount: u256) -> null;
  UpdateMinValidatorsRequired : (min_validators_required: u8) -> null;
  UpdateValidatorAssignedAddress : (new_address: actor_id) -> null;
  UpdateValidatorKey : (new_validator_key: actor_id) -> null;
  query BridgeAuthority : () -> actor_id;
  query BridgeId : () -> u128;
  query Config : () -> Config;
  query EmergencyAdmins : () -> vec actor_id;
  query FeeBalance : () -> u128;
  query GetAllVaraToEthTransfers : () -> vec VaraToEthTransfer;
  query GetEthToVaraNonce : () -> u256;
  query GetMinValidatorRequired : () -> u8;
  query GetValidatorPubKeys : () -> vec actor_id;
  query GetVaraToEthNonce : () -> u256;
  query GetVaraToEthTransfersInRange : (from_index: u256, to_index: u256) -> struct { vec VaraToEthTransfer, u256 };
  query InMigration : () -> bool;
  query PreviousBridgeContract : () -> opt actor_id;
  query Status : () -> Status;
  query VaraBalance : () -> u128;

  events {
    TeleportVaraToEth: struct { sender: actor_id, recipient: str, amount: u256, nonce_id: u256 };
    TransittedEthToVara: struct { teleports: vec EthToVaraTransfer };
  }
};

