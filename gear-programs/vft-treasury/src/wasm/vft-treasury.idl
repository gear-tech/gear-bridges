type InitConfig = struct {
  receiver_contract_address: h160,
  gear_bridge_builtin: actor_id,
  ethereum_event_client: actor_id,
  config: Config,
};

type Config = struct {
  gas_for_transfer_tokens: u64,
  gas_for_reply_deposit: u64,
  gas_to_send_request_to_builtin: u64,
  reply_timeout: u32,
  gas_for_transfer_to_eth_msg: u64,
};

type Error = enum {
  SendFailure,
  ReplyFailure,
  BuiltinDecode,
  ReplyTimeout,
  DuplicateAddressMapping,
  NoCorrespondingEthAddress,
  ReplyHook,
  MessageNotFound,
  InvalidMessageStatus,
  MessageFailed,
  BridgeBuiltinMessageFailed,
  TokensRefunded,
  NotEthClient,
  NotAdmin,
  NotBridgingClient,
  NotEnoughGas,
  TransferFailed,
  TransferTokensDecode,
};

type MessageInfo = struct {
  status: MessageStatus,
  details: TxDetails,
};

type MessageStatus = enum {
  SendingMessageToTransferTokens,
  TokenTransferCompleted: bool,
  WaitingReplyFromTransfer,
  SendingMessageToBridgeBuiltin,
  BridgeResponseReceived: opt u256,
  WaitingReplyFromBuiltin,
  BridgeBuiltinStep,
  MessageProcessedWithSuccess: u256,
};

type TxDetails = enum {
  DepositToTreasury: struct { vara_token_id: actor_id, eth_token_id: h160, sender: actor_id, amount: u256, receiver: h160 },
  WithdrawFromTreasury: struct { vara_token_id: actor_id, eth_token_id: h160, recepient: actor_id, amount: u256 },
};

constructor {
  New : (init_config: InitConfig);
};

service VftTreasury {
  DepositTokens : (vara_token_id: actor_id, from: actor_id, amount: u256, to: h160) -> result (struct { u256, h160 }, Error);
  EnsureAdmin : (admin: actor_id) -> result (null, Error);
  HandleInterruptedTransfer : (msg_id: message_id) -> result (struct { u256, h160 }, Error);
  MapVaraToEthAddress : (ethereum_token: h160, vara_token: actor_id) -> result (null, Error);
  UnmapVaraToEthAddress : (ethereum_token: h160, vara_token: actor_id) -> result (null, Error);
  UpdateConfig : (config: Config) -> result (null, Error);
  UpdateEthereumEventClientAddress : (new_address: actor_id) -> result (null, Error);
  WithdrawTokens : (eth_token_id: h160, recepient: actor_id, amount: u256) -> result (null, Error);
  query Admin : () -> actor_id;
  query GearBridgeBuiltin : () -> actor_id;
  query GetConfig : () -> Config;
  query MsgTrackerState : () -> vec struct { message_id, MessageInfo };
  query VaraToEthAddresses : () -> vec struct { actor_id, h160 };

  events {
    Deposit: struct { from: actor_id, to: h160, token: actor_id, amount: u256 };
    Withdraw: struct { receiver: actor_id, token: actor_id, amount: u256 };
  }
};

