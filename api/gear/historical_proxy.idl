/// Errors returned by the Historical Proxy service.
type ProxyError = enum {
  /// Endpoint for requested slot not found.
  NoEndpointForSlot: u64,
  /// Failed to send message.
  SendFailure: str,
  /// Failed to receive reply.
  ReplyFailure: str,
  /// Failed to decode reply.
  DecodeFailure: str,
  /// `eth-events-*` returned error.
  EthereumEventClient: Error,
};

type Error = enum {
  DecodeReceiptEnvelopeFailure,
  FailedEthTransaction,
  SendFailure,
  ReplyFailure,
  HandleResultDecodeFailure,
  MissingCheckpoint,
  InvalidBlockProof,
  TrieDbFailure,
  InvalidReceiptProof,
};

constructor {
  New : ();
};

service HistoricalProxy {
  /// Add new endpoint to the map. Endpoint will be effective for all the
  /// requests with slots starting from `slot`.
  /// 
  /// This function can be called only by an admin.
  AddEndpoint : (slot: u64, endpoint: actor_id) -> null;
  /// Redirect message to `eth-events-*` program which is valid for `slot`.
  /// If message is relayed successfully then reply is sent to `client` address
  /// to `client_route` route.
  /// 
  /// # Parameters
  /// 
  /// - `slot`: slot for which message is relayed.
  /// - `proofs`: SCALE encoded `EthToVaraEvent`.
  /// - `client`: client address to send receipt to on success.
  /// - `client_route`: route to send receipt to on success.
  /// 
  /// # Returns
  /// 
  /// - `(Vec<u8>, Vec<u8>)`: on success where first vector is receipt and second vector is reply from calling `client_route`.
  /// - `ProxyError`: if redirect failed
  Redirect : (slot: u64, proofs: vec u8, client: actor_id, client_route: vec u8) -> result (struct { vec u8, vec u8 }, ProxyError);
  /// Update the current service admin to `admin_new`.
  /// 
  /// This function can be called only by the admin.
  UpdateAdmin : (admin_new: actor_id) -> null;
  /// Get current service admin.
  query Admin : () -> actor_id;
  /// Get endpoint for the specified `slot`.
  query EndpointFor : (slot: u64) -> result (actor_id, ProxyError);
  /// Get endpoint map stored in this service.
  query Endpoints : () -> vec struct { u64, actor_id };

  events {
    /// Tx receipt is checked to be valid and successfully sent to the
    /// underlying program.
    Relayed: struct { slot: u64, block_number: u64, transaction_index: u32 };
  }
};

