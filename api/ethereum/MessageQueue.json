{"abi":[{"type":"constructor","inputs":[{"name":"relayer","type":"address","internalType":"contract IRelayer"}],"stateMutability":"nonpayable"},{"type":"function","name":"isProcessed","inputs":[{"name":"messageNonce","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"processMessage","inputs":[{"name":"blockNumber","type":"uint256","internalType":"uint256"},{"name":"totalLeaves","type":"uint256","internalType":"uint256"},{"name":"leafIndex","type":"uint256","internalType":"uint256"},{"name":"message","type":"tuple","internalType":"struct VaraMessage","components":[{"name":"nonce","type":"uint256","internalType":"uint256"},{"name":"source","type":"bytes32","internalType":"bytes32"},{"name":"destination","type":"address","internalType":"address"},{"name":"payload","type":"bytes","internalType":"bytes"}]},{"name":"proof","type":"bytes32[]","internalType":"bytes32[]"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"event","name":"MessageProcessed","inputs":[{"name":"blockNumber","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"messageHash","type":"bytes32","indexed":true,"internalType":"bytes32"},{"name":"messageNonce","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"messageReceiver","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"error","name":"InvalidMerkleProof","inputs":[]},{"type":"error","name":"MerkleRootNotSet","inputs":[{"name":"blockNumber","type":"uint256","internalType":"uint256"}]},{"type":"error","name":"MessageAlreadyProcessed","inputs":[{"name":"messageNonce","type":"uint256","internalType":"uint256"}]},{"type":"error","name":"MessageNotProcessed","inputs":[]},{"type":"error","name":"RelayerEmergencyStop","inputs":[]}],"bytecode":{"object":"0x60a034606557601f61054538819003918201601f19168301916001600160401b03831184841017606957808492602094604052833981010312606557516001600160a01b03811681036065576080526040516104c7908161007e82396080518160ed0152f35b5f80fd5b634e487b7160e01b5f52604160045260245ffdfe6080806040526004361015610012575f80fd5b5f905f3560e01c90816393eb47e914610064575063bfe7edd714610034575f80fd5b346100615760203660031901126100615760ff604060209260043581528084522054166040519015158152f35b80fd5b9050346103045760a03660031901126103045760643560043567ffffffffffffffff821161030457816004019160806003198236030112610304576084359267ffffffffffffffff841161030457366023850112156103045783600401359167ffffffffffffffff8311610304573660248460051b87010111610304576318e9666960e21b86527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316956020816004818a5afa9081156102f9575f91610380575b5061037157813595865f525f60205260ff60405f20541661035e57906020602494939260405195868092630aab8ba560e01b82528960048301525afa9384156102f9575f9461032a575b5083156103175761020d6024820135936044830195896064610198896103f1565b9501946101f16074896101ab898b610405565b809160405196879460208601998a5260408601526bffffffffffffffffffffffff199060601b1660608501528484013781015f838201520301601f1981018352826103bb565b5190205f5260205f209889926044359260248035930190610438565b15610308575f878152602081905260409020805460ff19166001179055610246906001600160a01b0361023f866103f1565b1692610405565b929091803b15610304575f928360648694604051978896879586936317a7ea2760e31b8552600485015260406024850152816044850152848401378181018301849052601f01601f191681010301925af180156102f9576102e3575b5060206102cf7f994c669cfd9c0453d42c933a11c002a34d12d85563aebe99ca525fffc45454f8926103f1565b6040516001600160a01b039091168152a480f35b6102f09195505f906103bb565b5f9360206102a2565b6040513d5f823e3d90fd5b5f80fd5b63582f497d60e11b5f5260045ffd5b846354e2ed2d60e11b5f5260045260245ffd5b9093506020813d602011610356575b81610346602093836103bb565b810103126103045751925f610177565b3d9150610339565b866338503e3360e21b5f5260045260245ffd5b63dfe54af360e01b5f5260045ffd5b90506020813d6020116103b3575b8161039b602093836103bb565b8101031261030457518015158103610304575f61012d565b3d915061038e565b90601f8019910116810190811067ffffffffffffffff8211176103dd57604052565b634e487b7160e01b5f52604160045260245ffd5b356001600160a01b03811681036103045790565b903590601e1981360301821215610304570180359067ffffffffffffffff82116103045760200191813603831361030457565b919495909293848110156104bc575f969092905b868810156104b257808860051b8601359060018087161480156104a6575b1561049157505f5260205260018060405f20945b811c965f1901811c01970196949261044c565b9091505f5260205260018060405f209461047e565b5087600187011461046a565b1495509350505050565b509450505050505f9056","sourceMap":"525:3429:61:-:0;;;;;;;;;;;;;-1:-1:-1;;525:3429:61;;;;-1:-1:-1;;;;;525:3429:61;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;525:3429:61;;;;;;941:17;;525:3429;;;;;;;;941:17;525:3429;;;;;;;-1:-1:-1;525:3429:61;;;;;;-1:-1:-1;525:3429:61;;;;;-1:-1:-1;525:3429:61","linkReferences":{}},"deployedBytecode":{"object":"0x6080806040526004361015610012575f80fd5b5f905f3560e01c90816393eb47e914610064575063bfe7edd714610034575f80fd5b346100615760203660031901126100615760ff604060209260043581528084522054166040519015158152f35b80fd5b9050346103045760a03660031901126103045760643560043567ffffffffffffffff821161030457816004019160806003198236030112610304576084359267ffffffffffffffff841161030457366023850112156103045783600401359167ffffffffffffffff8311610304573660248460051b87010111610304576318e9666960e21b86527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316956020816004818a5afa9081156102f9575f91610380575b5061037157813595865f525f60205260ff60405f20541661035e57906020602494939260405195868092630aab8ba560e01b82528960048301525afa9384156102f9575f9461032a575b5083156103175761020d6024820135936044830195896064610198896103f1565b9501946101f16074896101ab898b610405565b809160405196879460208601998a5260408601526bffffffffffffffffffffffff199060601b1660608501528484013781015f838201520301601f1981018352826103bb565b5190205f5260205f209889926044359260248035930190610438565b15610308575f878152602081905260409020805460ff19166001179055610246906001600160a01b0361023f866103f1565b1692610405565b929091803b15610304575f928360648694604051978896879586936317a7ea2760e31b8552600485015260406024850152816044850152848401378181018301849052601f01601f191681010301925af180156102f9576102e3575b5060206102cf7f994c669cfd9c0453d42c933a11c002a34d12d85563aebe99ca525fffc45454f8926103f1565b6040516001600160a01b039091168152a480f35b6102f09195505f906103bb565b5f9360206102a2565b6040513d5f823e3d90fd5b5f80fd5b63582f497d60e11b5f5260045ffd5b846354e2ed2d60e11b5f5260045260245ffd5b9093506020813d602011610356575b81610346602093836103bb565b810103126103045751925f610177565b3d9150610339565b866338503e3360e21b5f5260045260245ffd5b63dfe54af360e01b5f5260045ffd5b90506020813d6020116103b3575b8161039b602093836103bb565b8101031261030457518015158103610304575f61012d565b3d915061038e565b90601f8019910116810190811067ffffffffffffffff8211176103dd57604052565b634e487b7160e01b5f52604160045260245ffd5b356001600160a01b03811681036103045790565b903590601e1981360301821215610304570180359067ffffffffffffffff82116103045760200191813603831361030457565b919495909293848110156104bc575f969092905b868810156104b257808860051b8601359060018087161480156104a6575b1561049157505f5260205260018060405f20945b811c965f1901811c01970196949261044c565b9091505f5260205260018060405f209461047e565b5087600187011461046a565b1495509350505050565b509450505050505f9056","sourceMap":"525:3429:61:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;525:3429:61;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;525:3429:61;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;2776:23:61;;:7;-1:-1:-1;;;;;525:3429:61;;;;;;;2776:23;;;;;;;525:3429;2776:23;;;525:3429;2772:83;;;525:3429;;;;;;;;;;;;;;;2865:109;;525:3429;;;;;;;;;;;;;;;3005:34;;;525:3429;3005:34;;525:3429;3005:34;;;;;;;525:3429;3005:34;;;525:3429;3053:24;;;3049:91;;3209:92;525:3429;3786:14:74;;525:3429:61;3802:19:74;525:3429:61;3802:19:74;;;;525:3429:61;3802:19:74;;;:::i;:::-;3823:15;;;3754:85;525:3429:61;3823:15:74;;;;;:::i;:::-;525:3429:61;;;;3754:85:74;;;525:3429:61;3754:85:74;;525:3429:61;;;;;;;;;;;;;;;;;;;;;;;;;;;;3754:85:74;;;;;;;;;;:::i;:::-;525:3429:61;3744:96:74;;525:3429:61;3874:111:74;525:3429:61;;3874:111:74;525:3429:61;;;;;;;;;;;3209:92;;:::i;:::-;3208:93;3204:151;;525:3429;;;;;;;;;;;;;-1:-1:-1;;525:3429:61;;;;;3494:15;;-1:-1:-1;;;;;3438:19:61;;;:::i;:::-;525:3429;3494:15;;:::i;:::-;3416:94;;;;;;;;525:3429;;;;;;;;;;;;;;;;;;3416:94;;525:3429;3416:94;;525:3429;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;525:3429:61;;;3416:94;;;;;;;;;;;525:3429;3584:19;525:3429;3584:19;3526:78;3584:19;;:::i;:::-;525:3429;;-1:-1:-1;;;;;525:3429:61;;;;;3526:78;525:3429;;3416:94;;;;;525:3429;3416:94;;:::i;:::-;525:3429;;;3416:94;;;525:3429;;;;;;;;;3416:94;525:3429;;;3204:151;3324:20;;;525:3429;3324:20;525:3429;;3324:20;3049:91;3100:29;;;;525:3429;3100:29;525:3429;;;;3100:29;3005:34;;;;525:3429;3005:34;;525:3429;3005:34;;;;;;525:3429;3005:34;;;:::i;:::-;;;525:3429;;;;;3005:34;;;;;;;-1:-1:-1;3005:34:61;;2865:109;2925:38;;;;525:3429;2925:38;525:3429;;;;2925:38;2772:83;2822:22;;;525:3429;2822:22;525:3429;;2822:22;2776:23;;;525:3429;2776:23;;525:3429;2776:23;;;;;;525:3429;2776:23;;;:::i;:::-;;;525:3429;;;;;;;;;;;;2776:23;;;;;;-1:-1:-1;2776:23:61;;525:3429;;;3754:85:74;;525:3429:61;;;;;;;;;;;;;;;;:::o;:::-;;;;-1:-1:-1;525:3429:61;;;;;-1:-1:-1;525:3429:61;;;-1:-1:-1;;;;;525:3429:61;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;1324:381:79:-;;;;;;;1543:27;;;;1539:70;;525:3429:61;;2296:28:79;;;2450:3;2432:16;;;;;;2469:20;525:3429:61;;;;;;;2632:1:79;525:3429:61;;;2778:17:79;:45;;;;2450:3;2774:207;;;889:135:47;525:3429:61;889:135:47;;;2632:1:79;889:135:47;;525:3429:61;889:135:47;2774:207:79;;525:3429:61;;;;;;;;;2450:3:79;525:3429:61;2417:13:79;;;;;2774:207;889:135:47;;;525:3429:61;889:135:47;;;2632:1:79;889:135:47;;525:3429:61;889:135:47;2774:207:79;;;2778:45;525:3429:61;;2632:1:79;525:3429:61;;2799:24:79;2778:45;;2432:16;1626:72;;-1:-1:-1;2432:16:79;-1:-1:-1;;;;1324:381:79:o;1539:70::-;1586:12;;;;;;;525:3429:61;1586:12:79;:::o","linkReferences":{},"immutableReferences":{"49228":[{"start":237,"length":32}]}},"methodIdentifiers":{"isProcessed(uint256)":"bfe7edd7","processMessage(uint256,uint256,uint256,(uint256,bytes32,address,bytes),bytes32[])":"93eb47e9"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IRelayer\",\"name\":\"relayer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidMerkleProof\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"MerkleRootNotSet\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"messageNonce\",\"type\":\"uint256\"}],\"name\":\"MessageAlreadyProcessed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MessageNotProcessed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RelayerEmergencyStop\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"messageHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"messageNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"messageReceiver\",\"type\":\"address\"}],\"name\":\"MessageProcessed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"messageNonce\",\"type\":\"uint256\"}],\"name\":\"isProcessed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLeaves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"leafIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"source\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"internalType\":\"struct VaraMessage\",\"name\":\"message\",\"type\":\"tuple\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"processMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"MessageQueue smart contract is responsible for verifying and processing      received messages originated from Vara Network.\",\"errors\":{\"InvalidMerkleProof()\":[{\"details\":\"Merkle proof is invalid.\"}],\"MerkleRootNotSet(uint256)\":[{\"details\":\"Merkle root is not set for the block number in Relayer smart contract.\"}],\"MessageAlreadyProcessed(uint256)\":[{\"details\":\"Message nonce is already processed.\"}],\"MessageNotProcessed()\":[{\"details\":\"Message is not processed (failed to call IMessageQueueReceiver interface).\"}],\"RelayerEmergencyStop()\":[{\"details\":\"Relayer emergency stop status is set.\"}]},\"events\":{\"MessageProcessed(uint256,bytes32,uint256,address)\":{\"details\":\"Emitted when message is processed.\"}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the MessageQueue contract with the Relayer address.\",\"params\":{\"relayer\":\"The address of the Relayer contract that will store merkle roots.\"}},\"isProcessed(uint256)\":{\"details\":\"Checks if message was already processed.\",\"params\":{\"messageNonce\":\"Message nonce to check.\"},\"returns\":{\"_0\":\"isProcessed `true` if message was already processed, `false` otherwise.\"}},\"processMessage(uint256,uint256,uint256,(uint256,bytes32,address,bytes),bytes32[])\":{\"details\":\"Verifies and processes message originated from Vara Network.      In this process, MessageQueue smart contract will calculate Merkle root      for message and validate that it corresponds to Merkle root which is already stored      in Relayer smart contract for same block number. If proof is correct, nonce of received      message will be stored in smart contract and message will be forwarded to adequate message      receiver, either ERC20Manager or ProxyUpdater smart contract.      Upon successful processing of the message MessageProcessed event is emited.      It is important to note that anyone can submit a message because all messages      will be validated against previously stored Merkle roots in the Relayer smart contract.Reverts if:      - Relayer emergency stop status is set.      - Message nonce is already processed.      - Merkle root is not set for the block number in Relayer smart contract.      - Merkle proof is invalid.      - Message processing fails (failed to call IMessageQueueReceiver interface).\",\"params\":{\"blockNumber\":\"Block number of block containing target merkle tree.\",\"leafIndex\":\"Index of leaf containing target message.\",\"message\":\"Target message.\",\"proof\":\"Merkle proof of inclusion of leaf #`leafIndex` into target merkle tree that              was included into `blockNumber`.\",\"totalLeaves\":\"Number of leaves in target merkle tree.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/MessageQueue.sol\":\"MessageQueue\"},\"debug\":{\"revertStrings\":\"strip\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"appendCBOR\":false,\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol\":{\"keccak256\":\"0x8cbd338f083224b4b6f0ff42cbda641a0a6c31ffcdca197452b97fe4d0918269\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f517dec5ba0c6491395acbf7f1d621f4e89e8f218bf5303c867b1c5ad70c6b11\",\"dweb:/ipfs/QmWmXHRLEw8W6ckth7NyYTU88YfvuS7xSsfae5ksL8qNUe\"]},\"src/MessageQueue.sol\":{\"keccak256\":\"0xf8353dee9eaa6cc61be66035be6d6147091320bcc1256421c95e34597a8458d0\",\"license\":\"GPL-3.0-or-later WITH Classpath-exception-2.0\",\"urls\":[\"bzz-raw://4ce8521fa5c663cbed3d841fa5067c1534d762b1162457fe495c6fb6b476137a\",\"dweb:/ipfs/QmeM637WgJyhw3XFiBaBuuAuW8CDLJzgYTBFszUEjBgunY\"]},\"src/interfaces/IMessageQueue.sol\":{\"keccak256\":\"0x8ffd3eba83df44900f85e8185b70c5e0e1d8d62ac1e0219231d899b852daba21\",\"license\":\"GPL-3.0-or-later WITH Classpath-exception-2.0\",\"urls\":[\"bzz-raw://3aa14ad556f30535989aed0fc024af1b0524eb4d5c8bf050349ce0d8d388d6f6\",\"dweb:/ipfs/QmTrBHuMeuHPdnbJ3ATwvFwrgwvKPypNGk4auHTtvB5RJm\"]},\"src/interfaces/IMessageQueueReceiver.sol\":{\"keccak256\":\"0x352c4afd36c7938001751384293121fe55d27a3506e450b54c3405f02111e258\",\"license\":\"GPL-3.0-or-later WITH Classpath-exception-2.0\",\"urls\":[\"bzz-raw://d46c4319b7084770968ccfec656f90dd845c03e09e5b4d1e2068649e818563ad\",\"dweb:/ipfs/QmbUTCfgy1fhehj2EPdwZe3h5MnMVHdUEKbqj16RzBtvtS\"]},\"src/interfaces/IRelayer.sol\":{\"keccak256\":\"0xb373da0cba03249527fb92cde877d507a2188ebb3fed659b5a5745a99b4919b6\",\"license\":\"GPL-3.0-or-later WITH Classpath-exception-2.0\",\"urls\":[\"bzz-raw://3a3749e969112df6db808e2bf0900bab6253a7234711bfd0025c204bf4f851fb\",\"dweb:/ipfs/QmXLTcuJxRu4bWbvXpKK4nZWLaxs726EgHb824Cr38Ezju\"]},\"src/libraries/BinaryMerkleTree.sol\":{\"keccak256\":\"0x25cb0a05141042536dd48aea434fabdaf3473a845423c412408f77c3d3637d40\",\"license\":\"GPL-3.0-or-later WITH Classpath-exception-2.0\",\"urls\":[\"bzz-raw://108841a6588703e09a682e7a606cfac453d1b8ea7b6093f5e122a73ce0b0e116\",\"dweb:/ipfs/QmXN4V1PzfMtCqNS96enygsXhWW2mSmpmAhm5KVQej4YEm\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.30+commit.73712a01"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"contract IRelayer","name":"relayer","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"type":"error","name":"InvalidMerkleProof"},{"inputs":[{"internalType":"uint256","name":"blockNumber","type":"uint256"}],"type":"error","name":"MerkleRootNotSet"},{"inputs":[{"internalType":"uint256","name":"messageNonce","type":"uint256"}],"type":"error","name":"MessageAlreadyProcessed"},{"inputs":[],"type":"error","name":"MessageNotProcessed"},{"inputs":[],"type":"error","name":"RelayerEmergencyStop"},{"inputs":[{"internalType":"uint256","name":"blockNumber","type":"uint256","indexed":true},{"internalType":"bytes32","name":"messageHash","type":"bytes32","indexed":true},{"internalType":"uint256","name":"messageNonce","type":"uint256","indexed":true},{"internalType":"address","name":"messageReceiver","type":"address","indexed":false}],"type":"event","name":"MessageProcessed","anonymous":false},{"inputs":[{"internalType":"uint256","name":"messageNonce","type":"uint256"}],"stateMutability":"view","type":"function","name":"isProcessed","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"uint256","name":"blockNumber","type":"uint256"},{"internalType":"uint256","name":"totalLeaves","type":"uint256"},{"internalType":"uint256","name":"leafIndex","type":"uint256"},{"internalType":"struct VaraMessage","name":"message","type":"tuple","components":[{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes32","name":"source","type":"bytes32"},{"internalType":"address","name":"destination","type":"address"},{"internalType":"bytes","name":"payload","type":"bytes"}]},{"internalType":"bytes32[]","name":"proof","type":"bytes32[]"}],"stateMutability":"nonpayable","type":"function","name":"processMessage"}],"devdoc":{"kind":"dev","methods":{"constructor":{"details":"Initializes the MessageQueue contract with the Relayer address.","params":{"relayer":"The address of the Relayer contract that will store merkle roots."}},"isProcessed(uint256)":{"details":"Checks if message was already processed.","params":{"messageNonce":"Message nonce to check."},"returns":{"_0":"isProcessed `true` if message was already processed, `false` otherwise."}},"processMessage(uint256,uint256,uint256,(uint256,bytes32,address,bytes),bytes32[])":{"details":"Verifies and processes message originated from Vara Network.      In this process, MessageQueue smart contract will calculate Merkle root      for message and validate that it corresponds to Merkle root which is already stored      in Relayer smart contract for same block number. If proof is correct, nonce of received      message will be stored in smart contract and message will be forwarded to adequate message      receiver, either ERC20Manager or ProxyUpdater smart contract.      Upon successful processing of the message MessageProcessed event is emited.      It is important to note that anyone can submit a message because all messages      will be validated against previously stored Merkle roots in the Relayer smart contract.Reverts if:      - Relayer emergency stop status is set.      - Message nonce is already processed.      - Merkle root is not set for the block number in Relayer smart contract.      - Merkle proof is invalid.      - Message processing fails (failed to call IMessageQueueReceiver interface).","params":{"blockNumber":"Block number of block containing target merkle tree.","leafIndex":"Index of leaf containing target message.","message":"Target message.","proof":"Merkle proof of inclusion of leaf #`leafIndex` into target merkle tree that              was included into `blockNumber`.","totalLeaves":"Number of leaves in target merkle tree."}}},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/","openzeppelin-contracts/=lib/openzeppelin-contracts/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"none","appendCBOR":false},"compilationTarget":{"src/MessageQueue.sol":"MessageQueue"},"evmVersion":"prague","libraries":{},"viaIR":true},"sources":{"lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol":{"keccak256":"0x8cbd338f083224b4b6f0ff42cbda641a0a6c31ffcdca197452b97fe4d0918269","urls":["bzz-raw://f517dec5ba0c6491395acbf7f1d621f4e89e8f218bf5303c867b1c5ad70c6b11","dweb:/ipfs/QmWmXHRLEw8W6ckth7NyYTU88YfvuS7xSsfae5ksL8qNUe"],"license":"MIT"},"src/MessageQueue.sol":{"keccak256":"0xf8353dee9eaa6cc61be66035be6d6147091320bcc1256421c95e34597a8458d0","urls":["bzz-raw://4ce8521fa5c663cbed3d841fa5067c1534d762b1162457fe495c6fb6b476137a","dweb:/ipfs/QmeM637WgJyhw3XFiBaBuuAuW8CDLJzgYTBFszUEjBgunY"],"license":"GPL-3.0-or-later WITH Classpath-exception-2.0"},"src/interfaces/IMessageQueue.sol":{"keccak256":"0x8ffd3eba83df44900f85e8185b70c5e0e1d8d62ac1e0219231d899b852daba21","urls":["bzz-raw://3aa14ad556f30535989aed0fc024af1b0524eb4d5c8bf050349ce0d8d388d6f6","dweb:/ipfs/QmTrBHuMeuHPdnbJ3ATwvFwrgwvKPypNGk4auHTtvB5RJm"],"license":"GPL-3.0-or-later WITH Classpath-exception-2.0"},"src/interfaces/IMessageQueueReceiver.sol":{"keccak256":"0x352c4afd36c7938001751384293121fe55d27a3506e450b54c3405f02111e258","urls":["bzz-raw://d46c4319b7084770968ccfec656f90dd845c03e09e5b4d1e2068649e818563ad","dweb:/ipfs/QmbUTCfgy1fhehj2EPdwZe3h5MnMVHdUEKbqj16RzBtvtS"],"license":"GPL-3.0-or-later WITH Classpath-exception-2.0"},"src/interfaces/IRelayer.sol":{"keccak256":"0xb373da0cba03249527fb92cde877d507a2188ebb3fed659b5a5745a99b4919b6","urls":["bzz-raw://3a3749e969112df6db808e2bf0900bab6253a7234711bfd0025c204bf4f851fb","dweb:/ipfs/QmXLTcuJxRu4bWbvXpKK4nZWLaxs726EgHb824Cr38Ezju"],"license":"GPL-3.0-or-later WITH Classpath-exception-2.0"},"src/libraries/BinaryMerkleTree.sol":{"keccak256":"0x25cb0a05141042536dd48aea434fabdaf3473a845423c412408f77c3d3637d40","urls":["bzz-raw://108841a6588703e09a682e7a606cfac453d1b8ea7b6093f5e122a73ce0b0e116","dweb:/ipfs/QmXN4V1PzfMtCqNS96enygsXhWW2mSmpmAhm5KVQej4YEm"],"license":"GPL-3.0-or-later WITH Classpath-exception-2.0"}},"version":1},"id":61}