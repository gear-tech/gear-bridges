{"abi":[{"type":"function","name":"allowMessageProcessing","inputs":[],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"challengeRoot","inputs":[],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"disableChallengeRoot","inputs":[],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"emergencyStopAdmin","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"emergencyStopObservers","inputs":[],"outputs":[{"name":"","type":"address[]","internalType":"address[]"}],"stateMutability":"view"},{"type":"function","name":"genesisBlock","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getMerkleRoot","inputs":[{"name":"blockNumber","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"},{"type":"function","name":"getMerkleRootTimestamp","inputs":[{"name":"merkleRoot","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"governanceAdmin","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"governancePauser","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"isChallengingRoot","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"isEmergencyStopped","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"isProcessed","inputs":[{"name":"messageNonce","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"maxBlockNumber","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"pause","inputs":[],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"processMessage","inputs":[{"name":"blockNumber","type":"uint256","internalType":"uint256"},{"name":"totalLeaves","type":"uint256","internalType":"uint256"},{"name":"leafIndex","type":"uint256","internalType":"uint256"},{"name":"message","type":"tuple","internalType":"struct VaraMessage","components":[{"name":"nonce","type":"uint256","internalType":"uint256"},{"name":"source","type":"bytes32","internalType":"bytes32"},{"name":"destination","type":"address","internalType":"address"},{"name":"payload","type":"bytes","internalType":"bytes"}]},{"name":"proof","type":"bytes32[]","internalType":"bytes32[]"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"submitMerkleRoot","inputs":[{"name":"blockNumber","type":"uint256","internalType":"uint256"},{"name":"merkleRoot","type":"bytes32","internalType":"bytes32"},{"name":"proof","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"unpause","inputs":[],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"verifier","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"event","name":"ChallengeRootDisabled","inputs":[],"anonymous":false},{"type":"event","name":"ChallengeRootEnabled","inputs":[{"name":"untilTimestamp","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"EmergencyStopDisabled","inputs":[],"anonymous":false},{"type":"event","name":"EmergencyStopEnabled","inputs":[],"anonymous":false},{"type":"event","name":"MerkleRoot","inputs":[{"name":"blockNumber","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"merkleRoot","type":"bytes32","indexed":false,"internalType":"bytes32"}],"anonymous":false},{"type":"event","name":"MessageProcessed","inputs":[{"name":"blockNumber","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"messageHash","type":"bytes32","indexed":false,"internalType":"bytes32"},{"name":"messageNonce","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"messageDestination","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"MessageProcessingAllowed","inputs":[],"anonymous":false},{"type":"error","name":"BlockNumberBeforeGenesis","inputs":[{"name":"blockNumber","type":"uint256","internalType":"uint256"},{"name":"genesisBlock","type":"uint256","internalType":"uint256"}]},{"type":"error","name":"BlockNumberTooFar","inputs":[{"name":"blockNumber","type":"uint256","internalType":"uint256"},{"name":"maxBlockNumber","type":"uint256","internalType":"uint256"}]},{"type":"error","name":"ChallengeRoot","inputs":[]},{"type":"error","name":"ChallengeRootNotEnabled","inputs":[]},{"type":"error","name":"EmergencyStop","inputs":[]},{"type":"error","name":"EmergencyStopNotEnabled","inputs":[]},{"type":"error","name":"InvalidMerkleProof","inputs":[]},{"type":"error","name":"InvalidPlonkProof","inputs":[]},{"type":"error","name":"MerkleRootAlreadySet","inputs":[{"name":"blockNumber","type":"uint256","internalType":"uint256"}]},{"type":"error","name":"MerkleRootDelayNotPassed","inputs":[]},{"type":"error","name":"MerkleRootNotFound","inputs":[{"name":"blockNumber","type":"uint256","internalType":"uint256"}]},{"type":"error","name":"MessageAlreadyProcessed","inputs":[{"name":"messageNonce","type":"uint256","internalType":"uint256"}]},{"type":"error","name":"NotEmergencyStopAdmin","inputs":[]},{"type":"error","name":"NotEmergencyStopObserver","inputs":[]}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"allowMessageProcessing()":"00490745","challengeRoot()":"87e97e8c","disableChallengeRoot()":"0f926c02","emergencyStopAdmin()":"b13f222c","emergencyStopObservers()":"76afc14f","genesisBlock()":"4cdc9c63","getMerkleRoot(uint256)":"0aab8ba5","getMerkleRootTimestamp(bytes32)":"4610d3aa","governanceAdmin()":"0058f6b8","governancePauser()":"c81eb797","isChallengingRoot()":"52d190f3","isEmergencyStopped()":"fddd4837","isProcessed(uint256)":"bfe7edd7","maxBlockNumber()":"a912fd25","pause()":"8456cb59","processMessage(uint256,uint256,uint256,(uint256,bytes32,address,bytes),bytes32[])":"93eb47e9","submitMerkleRoot(uint256,bytes32,bytes)":"cca66a9d","unpause()":"3f4ba83a","verifier()":"2b7ac3f3"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"genesisBlock\",\"type\":\"uint256\"}],\"name\":\"BlockNumberBeforeGenesis\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxBlockNumber\",\"type\":\"uint256\"}],\"name\":\"BlockNumberTooFar\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ChallengeRoot\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ChallengeRootNotEnabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmergencyStop\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmergencyStopNotEnabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMerkleProof\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPlonkProof\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"MerkleRootAlreadySet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MerkleRootDelayNotPassed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"MerkleRootNotFound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"messageNonce\",\"type\":\"uint256\"}],\"name\":\"MessageAlreadyProcessed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEmergencyStopAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEmergencyStopObserver\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ChallengeRootDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"untilTimestamp\",\"type\":\"uint256\"}],\"name\":\"ChallengeRootEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EmergencyStopDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EmergencyStopEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"MerkleRoot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"messageHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"messageNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"messageDestination\",\"type\":\"address\"}],\"name\":\"MessageProcessed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MessageProcessingAllowed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"allowMessageProcessing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"challengeRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableChallengeRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyStopAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyStopObservers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"genesisBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getMerkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"getMerkleRootTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governanceAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governancePauser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isChallengingRoot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isEmergencyStopped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"messageNonce\",\"type\":\"uint256\"}],\"name\":\"isProcessed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLeaves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"leafIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"source\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"internalType\":\"struct VaraMessage\",\"name\":\"message\",\"type\":\"tuple\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"processMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"submitMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifier\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the MessageQueue contract.\",\"errors\":{\"BlockNumberBeforeGenesis(uint256,uint256)\":[{\"details\":\"Block number is before genesis block.\"}],\"BlockNumberTooFar(uint256,uint256)\":[{\"details\":\"Block number is too far from max block number.\"}],\"ChallengeRoot()\":[{\"details\":\"Challenge root status is enabled.\"}],\"ChallengeRootNotEnabled()\":[{\"details\":\"Challenging root status is disabled.\"}],\"EmergencyStop()\":[{\"details\":\"Emergency stop status is enabled.\"}],\"EmergencyStopNotEnabled()\":[{\"details\":\"Emergency stop status is disabled.\"}],\"InvalidMerkleProof()\":[{\"details\":\"Merkle proof is invalid.\"}],\"InvalidPlonkProof()\":[{\"details\":\"The plonk proof is invalid.\"}],\"MerkleRootAlreadySet(uint256)\":[{\"details\":\"Merkle root is already set.\"}],\"MerkleRootDelayNotPassed()\":[{\"details\":\"Merkle root delay is not passed.\"}],\"MerkleRootNotFound(uint256)\":[{\"details\":\"Merkle root is not found for the block number in MessageQueue smart contract.\"}],\"MessageAlreadyProcessed(uint256)\":[{\"details\":\"Message nonce is already processed.\"}],\"NotEmergencyStopAdmin()\":[{\"details\":\"Caller is not emergency stop admin.\"}],\"NotEmergencyStopObserver()\":[{\"details\":\"Caller is not emergency stop observer.\"}]},\"events\":{\"ChallengeRootDisabled()\":{\"details\":\"Emitted when challenging root status is disabled.\"},\"ChallengeRootEnabled(uint256)\":{\"details\":\"Emitted when challenging root status is enabled.\"},\"EmergencyStopDisabled()\":{\"details\":\"Emitted when emergency stop status is disabled.      Should be emitted on upgradeV2 function of the smart contract.\"},\"EmergencyStopEnabled()\":{\"details\":\"Emitted when emergency stop status is enabled.\"},\"MerkleRoot(uint256,bytes32)\":{\"details\":\"Emitted when block number and merkle root are stored.\"},\"MessageProcessed(uint256,bytes32,uint256,address)\":{\"details\":\"Emitted when message is processed.\"},\"MessageProcessingAllowed()\":{\"details\":\"Emitted when message processing is allowed during emergency stop.\"}},\"kind\":\"dev\",\"methods\":{\"allowMessageProcessing()\":{\"details\":\"Allows message processing when emergency stop is enabled.Reverts if:      - msg.sender is not emergency stop admin with `NotEmergencyStopAdmin` error.      - emergency stop status is not enabled with `EmergencyStopNotEnabled` error.\"},\"challengeRoot()\":{\"details\":\"Puts MessageQueue into a high-priority paused state.      Only the emergency stop admin or time expiry (CHALLENGE_ROOT_DELAY) can lift it.Reverts if:      - msg.sender is not emergency stop observer with `NotEmergencyStopObserver` error.Emits `ChallengeRootEnabled(block.timestamp + CHALLENGE_ROOT_DELAY)` event.\"},\"disableChallengeRoot()\":{\"details\":\"Disables challenging root status.Reverts if:      - msg.sender is not emergency stop admin with `NotEmergencyStopAdmin` error.      - challenging root status is not enabled with `ChallengeRootNotEnabled` error.Emits `ChallengeRootDisabled` event.\"},\"emergencyStopAdmin()\":{\"details\":\"Returns emergency stop admin address.\",\"returns\":{\"_0\":\"emergencyStopAdmin Emergency stop admin address.\"}},\"emergencyStopObservers()\":{\"details\":\"Returns list of emergency stop observers.\",\"returns\":{\"_0\":\"emergencyStopObservers List of emergency stop observers.\"}},\"genesisBlock()\":{\"details\":\"Returns genesis block number.\",\"returns\":{\"_0\":\"genesisBlock Genesis block number.\"}},\"getMerkleRoot(uint256)\":{\"details\":\"Returns merkle root for specified block number.      Returns `bytes32(0)` if merkle root was not provided for specified block number.\",\"params\":{\"blockNumber\":\"Target block number.\"},\"returns\":{\"_0\":\"merkleRoot Merkle root for specified block number.\"}},\"getMerkleRootTimestamp(bytes32)\":{\"details\":\"Returns timestamp when merkle root was set.      Returns `0` if merkle root was not provided for specified block number.\",\"params\":{\"merkleRoot\":\"Target merkle root.\"},\"returns\":{\"_0\":\"timestamp Timestamp when merkle root was set.\"}},\"governanceAdmin()\":{\"details\":\"Returns governance admin address.\",\"returns\":{\"_0\":\"governanceAdmin Governance admin address.\"}},\"governancePauser()\":{\"details\":\"Returns governance pauser address.\",\"returns\":{\"_0\":\"governancePauser Governance pauser address.\"}},\"isChallengingRoot()\":{\"details\":\"Returns challenging root status.\",\"returns\":{\"_0\":\"isChallengingRoot challenging root status.\"}},\"isEmergencyStopped()\":{\"details\":\"Returns emergency stop status.\",\"returns\":{\"_0\":\"isEmergencyStopped emergency stop status.\"}},\"isProcessed(uint256)\":{\"details\":\"Checks if message was already processed.\",\"params\":{\"messageNonce\":\"Message nonce to check.\"},\"returns\":{\"_0\":\"isProcessed `true` if message was already processed, `false` otherwise.\"}},\"maxBlockNumber()\":{\"details\":\"Returns maximum block number.\",\"returns\":{\"_0\":\"maxBlockNumber Maximum block number.\"}},\"pause()\":{\"details\":\"Pauses the contract.\"},\"processMessage(uint256,uint256,uint256,(uint256,bytes32,address,bytes),bytes32[])\":{\"details\":\"Verifies and processes message originated from Vara Network.      In this process, MessageQueue smart contract will calculate Merkle root      for message and validate that it corresponds to Merkle root which is already stored      in MessageQueue smart contract for same block number. If proof is correct, nonce of received      message will be stored in smart contract and message will be forwarded to adequate message      processor, either ERC20Manager or Governance smart contract.      Upon successful processing of the message `MessageProcessed` event is emitted.      It is important to note that anyone can submit a message because all messages      will be validated against previously stored Merkle roots in the MessageQueue smart contract.Reverts if:      - MessageQueue is in challenging root status with `ChallengeRoot` error.      - MessageQueue is paused and message source is not any governance address.      - MessageQueue emergency stop status is enabled and caller is not emergency stop admin.      - Message nonce is already processed.      - Merkle root is not set for the block number in MessageQueue smart contract.      - Merkle proof is invalid.      - Message processing fails.\",\"params\":{\"blockNumber\":\"Block number of block containing target merkle tree.\",\"leafIndex\":\"Index of leaf containing target message.\",\"message\":\"Target message.\",\"proof\":\"Merkle proof of inclusion of leaf #`leafIndex` into target merkle tree that              was included into `blockNumber`.\",\"totalLeaves\":\"Number of leaves in target merkle tree.\"}},\"submitMerkleRoot(uint256,bytes32,bytes)\":{\"details\":\"Receives, verifies and stores Merkle roots from Vara Network.      Upon successfully storing data about block number and corresponding Merkle root,      MessageQueue smart contract will emit a `MerkleRoot` event.      It is important to note that anyone can submit a Merkle root because only      validated Merkle roots will be stored in the MessageQueue smart contract.Reverts if emergency stop status is enabled with `EmergencyStop` error.Reverts if `proof` or `publicInputs` are malformed with `InvalidPlonkProof` error.\",\"params\":{\"blockNumber\":\"Block number on Vara Network\",\"merkleRoot\":\"Merkle root of transactions included in block with corresponding block number\",\"proof\":\"Serialised Plonk proof (using gnark's `MarshalSolidity`).\"}},\"unpause()\":{\"details\":\"Unpauses the contract.\"},\"verifier()\":{\"details\":\"Returns verifier address.      Verifier is smart contract that is responsible for verifying      the validity of the Merkle proof.\",\"returns\":{\"_0\":\"verifier Verifier address.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/interfaces/IMessageQueue.sol\":\"IMessageQueue\"},\"debug\":{\"revertStrings\":\"strip\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"appendCBOR\":false,\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin-foundry-upgrades/=lib/openzeppelin-foundry-upgrades/src/\",\":script/=script/\",\":src/=src/\",\":test/=test/\"],\"viaIR\":true},\"sources\":{\"src/interfaces/IMessageQueue.sol\":{\"keccak256\":\"0x84663e7ae55674adb7fa731373ae5524290f1c908a21a50bee05f40daa4d80c0\",\"license\":\"GPL-3.0-or-later WITH Classpath-exception-2.0\",\"urls\":[\"bzz-raw://bdadcb2533dca473b87c89bf2073b2e26402166159fa99d93e9f0e9e8dac5e8c\",\"dweb:/ipfs/QmfCtNFEM2CrCKEJg6tsFaLa2kzpGZMKJkXRHN394rhxcx\"]},\"src/interfaces/IPausable.sol\":{\"keccak256\":\"0x6d3c910562c9049a3a8e59d148623d37b546b6557563c8c202305864703f4394\",\"license\":\"GPL-3.0-or-later WITH Classpath-exception-2.0\",\"urls\":[\"bzz-raw://6e907b1040394cf61f68f7cedc3ce7f0572fb0efa1803afee6e266b83c0f8298\",\"dweb:/ipfs/QmeWZWAJN3m9yA7fWWAyuEzwTxvVfW5yRPbZmZMixGUoZq\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.30+commit.73712a01"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"uint256","name":"blockNumber","type":"uint256"},{"internalType":"uint256","name":"genesisBlock","type":"uint256"}],"type":"error","name":"BlockNumberBeforeGenesis"},{"inputs":[{"internalType":"uint256","name":"blockNumber","type":"uint256"},{"internalType":"uint256","name":"maxBlockNumber","type":"uint256"}],"type":"error","name":"BlockNumberTooFar"},{"inputs":[],"type":"error","name":"ChallengeRoot"},{"inputs":[],"type":"error","name":"ChallengeRootNotEnabled"},{"inputs":[],"type":"error","name":"EmergencyStop"},{"inputs":[],"type":"error","name":"EmergencyStopNotEnabled"},{"inputs":[],"type":"error","name":"InvalidMerkleProof"},{"inputs":[],"type":"error","name":"InvalidPlonkProof"},{"inputs":[{"internalType":"uint256","name":"blockNumber","type":"uint256"}],"type":"error","name":"MerkleRootAlreadySet"},{"inputs":[],"type":"error","name":"MerkleRootDelayNotPassed"},{"inputs":[{"internalType":"uint256","name":"blockNumber","type":"uint256"}],"type":"error","name":"MerkleRootNotFound"},{"inputs":[{"internalType":"uint256","name":"messageNonce","type":"uint256"}],"type":"error","name":"MessageAlreadyProcessed"},{"inputs":[],"type":"error","name":"NotEmergencyStopAdmin"},{"inputs":[],"type":"error","name":"NotEmergencyStopObserver"},{"inputs":[],"type":"event","name":"ChallengeRootDisabled","anonymous":false},{"inputs":[{"internalType":"uint256","name":"untilTimestamp","type":"uint256","indexed":false}],"type":"event","name":"ChallengeRootEnabled","anonymous":false},{"inputs":[],"type":"event","name":"EmergencyStopDisabled","anonymous":false},{"inputs":[],"type":"event","name":"EmergencyStopEnabled","anonymous":false},{"inputs":[{"internalType":"uint256","name":"blockNumber","type":"uint256","indexed":false},{"internalType":"bytes32","name":"merkleRoot","type":"bytes32","indexed":false}],"type":"event","name":"MerkleRoot","anonymous":false},{"inputs":[{"internalType":"uint256","name":"blockNumber","type":"uint256","indexed":false},{"internalType":"bytes32","name":"messageHash","type":"bytes32","indexed":false},{"internalType":"uint256","name":"messageNonce","type":"uint256","indexed":false},{"internalType":"address","name":"messageDestination","type":"address","indexed":false}],"type":"event","name":"MessageProcessed","anonymous":false},{"inputs":[],"type":"event","name":"MessageProcessingAllowed","anonymous":false},{"inputs":[],"stateMutability":"nonpayable","type":"function","name":"allowMessageProcessing"},{"inputs":[],"stateMutability":"nonpayable","type":"function","name":"challengeRoot"},{"inputs":[],"stateMutability":"nonpayable","type":"function","name":"disableChallengeRoot"},{"inputs":[],"stateMutability":"view","type":"function","name":"emergencyStopAdmin","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"emergencyStopObservers","outputs":[{"internalType":"address[]","name":"","type":"address[]"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"genesisBlock","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"uint256","name":"blockNumber","type":"uint256"}],"stateMutability":"view","type":"function","name":"getMerkleRoot","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}]},{"inputs":[{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"}],"stateMutability":"view","type":"function","name":"getMerkleRootTimestamp","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"governanceAdmin","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"governancePauser","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"isChallengingRoot","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"isEmergencyStopped","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"uint256","name":"messageNonce","type":"uint256"}],"stateMutability":"view","type":"function","name":"isProcessed","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"maxBlockNumber","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"nonpayable","type":"function","name":"pause"},{"inputs":[{"internalType":"uint256","name":"blockNumber","type":"uint256"},{"internalType":"uint256","name":"totalLeaves","type":"uint256"},{"internalType":"uint256","name":"leafIndex","type":"uint256"},{"internalType":"struct VaraMessage","name":"message","type":"tuple","components":[{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes32","name":"source","type":"bytes32"},{"internalType":"address","name":"destination","type":"address"},{"internalType":"bytes","name":"payload","type":"bytes"}]},{"internalType":"bytes32[]","name":"proof","type":"bytes32[]"}],"stateMutability":"nonpayable","type":"function","name":"processMessage"},{"inputs":[{"internalType":"uint256","name":"blockNumber","type":"uint256"},{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"},{"internalType":"bytes","name":"proof","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"submitMerkleRoot"},{"inputs":[],"stateMutability":"nonpayable","type":"function","name":"unpause"},{"inputs":[],"stateMutability":"view","type":"function","name":"verifier","outputs":[{"internalType":"address","name":"","type":"address"}]}],"devdoc":{"kind":"dev","methods":{"allowMessageProcessing()":{"details":"Allows message processing when emergency stop is enabled.Reverts if:      - msg.sender is not emergency stop admin with `NotEmergencyStopAdmin` error.      - emergency stop status is not enabled with `EmergencyStopNotEnabled` error."},"challengeRoot()":{"details":"Puts MessageQueue into a high-priority paused state.      Only the emergency stop admin or time expiry (CHALLENGE_ROOT_DELAY) can lift it.Reverts if:      - msg.sender is not emergency stop observer with `NotEmergencyStopObserver` error.Emits `ChallengeRootEnabled(block.timestamp + CHALLENGE_ROOT_DELAY)` event."},"disableChallengeRoot()":{"details":"Disables challenging root status.Reverts if:      - msg.sender is not emergency stop admin with `NotEmergencyStopAdmin` error.      - challenging root status is not enabled with `ChallengeRootNotEnabled` error.Emits `ChallengeRootDisabled` event."},"emergencyStopAdmin()":{"details":"Returns emergency stop admin address.","returns":{"_0":"emergencyStopAdmin Emergency stop admin address."}},"emergencyStopObservers()":{"details":"Returns list of emergency stop observers.","returns":{"_0":"emergencyStopObservers List of emergency stop observers."}},"genesisBlock()":{"details":"Returns genesis block number.","returns":{"_0":"genesisBlock Genesis block number."}},"getMerkleRoot(uint256)":{"details":"Returns merkle root for specified block number.      Returns `bytes32(0)` if merkle root was not provided for specified block number.","params":{"blockNumber":"Target block number."},"returns":{"_0":"merkleRoot Merkle root for specified block number."}},"getMerkleRootTimestamp(bytes32)":{"details":"Returns timestamp when merkle root was set.      Returns `0` if merkle root was not provided for specified block number.","params":{"merkleRoot":"Target merkle root."},"returns":{"_0":"timestamp Timestamp when merkle root was set."}},"governanceAdmin()":{"details":"Returns governance admin address.","returns":{"_0":"governanceAdmin Governance admin address."}},"governancePauser()":{"details":"Returns governance pauser address.","returns":{"_0":"governancePauser Governance pauser address."}},"isChallengingRoot()":{"details":"Returns challenging root status.","returns":{"_0":"isChallengingRoot challenging root status."}},"isEmergencyStopped()":{"details":"Returns emergency stop status.","returns":{"_0":"isEmergencyStopped emergency stop status."}},"isProcessed(uint256)":{"details":"Checks if message was already processed.","params":{"messageNonce":"Message nonce to check."},"returns":{"_0":"isProcessed `true` if message was already processed, `false` otherwise."}},"maxBlockNumber()":{"details":"Returns maximum block number.","returns":{"_0":"maxBlockNumber Maximum block number."}},"pause()":{"details":"Pauses the contract."},"processMessage(uint256,uint256,uint256,(uint256,bytes32,address,bytes),bytes32[])":{"details":"Verifies and processes message originated from Vara Network.      In this process, MessageQueue smart contract will calculate Merkle root      for message and validate that it corresponds to Merkle root which is already stored      in MessageQueue smart contract for same block number. If proof is correct, nonce of received      message will be stored in smart contract and message will be forwarded to adequate message      processor, either ERC20Manager or Governance smart contract.      Upon successful processing of the message `MessageProcessed` event is emitted.      It is important to note that anyone can submit a message because all messages      will be validated against previously stored Merkle roots in the MessageQueue smart contract.Reverts if:      - MessageQueue is in challenging root status with `ChallengeRoot` error.      - MessageQueue is paused and message source is not any governance address.      - MessageQueue emergency stop status is enabled and caller is not emergency stop admin.      - Message nonce is already processed.      - Merkle root is not set for the block number in MessageQueue smart contract.      - Merkle proof is invalid.      - Message processing fails.","params":{"blockNumber":"Block number of block containing target merkle tree.","leafIndex":"Index of leaf containing target message.","message":"Target message.","proof":"Merkle proof of inclusion of leaf #`leafIndex` into target merkle tree that              was included into `blockNumber`.","totalLeaves":"Number of leaves in target merkle tree."}},"submitMerkleRoot(uint256,bytes32,bytes)":{"details":"Receives, verifies and stores Merkle roots from Vara Network.      Upon successfully storing data about block number and corresponding Merkle root,      MessageQueue smart contract will emit a `MerkleRoot` event.      It is important to note that anyone can submit a Merkle root because only      validated Merkle roots will be stored in the MessageQueue smart contract.Reverts if emergency stop status is enabled with `EmergencyStop` error.Reverts if `proof` or `publicInputs` are malformed with `InvalidPlonkProof` error.","params":{"blockNumber":"Block number on Vara Network","merkleRoot":"Merkle root of transactions included in block with corresponding block number","proof":"Serialised Plonk proof (using gnark's `MarshalSolidity`)."}},"unpause()":{"details":"Unpauses the contract."},"verifier()":{"details":"Returns verifier address.      Verifier is smart contract that is responsible for verifying      the validity of the Merkle proof.","returns":{"_0":"verifier Verifier address."}}},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/","openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts/=lib/openzeppelin-contracts/","openzeppelin-foundry-upgrades/=lib/openzeppelin-foundry-upgrades/src/","script/=script/","src/=src/","test/=test/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"none","appendCBOR":false},"compilationTarget":{"src/interfaces/IMessageQueue.sol":"IMessageQueue"},"evmVersion":"prague","libraries":{},"viaIR":true},"sources":{"src/interfaces/IMessageQueue.sol":{"keccak256":"0x84663e7ae55674adb7fa731373ae5524290f1c908a21a50bee05f40daa4d80c0","urls":["bzz-raw://bdadcb2533dca473b87c89bf2073b2e26402166159fa99d93e9f0e9e8dac5e8c","dweb:/ipfs/QmfCtNFEM2CrCKEJg6tsFaLa2kzpGZMKJkXRHN394rhxcx"],"license":"GPL-3.0-or-later WITH Classpath-exception-2.0"},"src/interfaces/IPausable.sol":{"keccak256":"0x6d3c910562c9049a3a8e59d148623d37b546b6557563c8c202305864703f4394","urls":["bzz-raw://6e907b1040394cf61f68f7cedc3ce7f0572fb0efa1803afee6e266b83c0f8298","dweb:/ipfs/QmeWZWAJN3m9yA7fWWAyuEzwTxvVfW5yRPbZmZMixGUoZq"],"license":"GPL-3.0-or-later WITH Classpath-exception-2.0"}},"version":1},"storageLayout":{"storage":[],"types":{}},"irOptimized":"","ast":{"absolutePath":"src/interfaces/IMessageQueue.sol","id":66041,"exportedSymbols":{"Hasher":[66040],"IMessageQueue":[65990],"IPausable":[66052],"VaraMessage":[65778]},"nodeType":"SourceUnit","src":"74:10768:112","nodes":[{"id":65766,"nodeType":"PragmaDirective","src":"74:24:112","nodes":[],"literals":["solidity","^","0.8",".30"]},{"id":65768,"nodeType":"ImportDirective","src":"100:42:112","nodes":[],"absolutePath":"src/interfaces/IPausable.sol","file":"./IPausable.sol","nameLocation":"-1:-1:-1","scope":66041,"sourceUnit":66053,"symbolAliases":[{"foreign":{"id":65767,"name":"IPausable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":66052,"src":"108:9:112","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":65778,"nodeType":"StructDefinition","src":"350:105:112","nodes":[],"canonicalName":"VaraMessage","documentation":{"id":65769,"nodeType":"StructuredDocumentation","src":"144:205:112","text":" @dev Type representing message being bridged from Gear-based chain (Vara Network) to Ethereum.\n      - https://github.com/gear-tech/gear/blob/v1.8.1/pallets/gear-eth-bridge/src/internal.rs#L58"},"members":[{"constant":false,"id":65771,"mutability":"mutable","name":"nonce","nameLocation":"383:5:112","nodeType":"VariableDeclaration","scope":65778,"src":"375:13:112","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":65770,"name":"uint256","nodeType":"ElementaryTypeName","src":"375:7:112","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":65773,"mutability":"mutable","name":"source","nameLocation":"402:6:112","nodeType":"VariableDeclaration","scope":65778,"src":"394:14:112","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":65772,"name":"bytes32","nodeType":"ElementaryTypeName","src":"394:7:112","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":65775,"mutability":"mutable","name":"destination","nameLocation":"422:11:112","nodeType":"VariableDeclaration","scope":65778,"src":"414:19:112","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":65774,"name":"address","nodeType":"ElementaryTypeName","src":"414:7:112","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":65777,"mutability":"mutable","name":"payload","nameLocation":"445:7:112","nodeType":"VariableDeclaration","scope":65778,"src":"439:13:112","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":65776,"name":"bytes","nodeType":"ElementaryTypeName","src":"439:5:112","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"VaraMessage","nameLocation":"357:11:112","scope":66041,"visibility":"public"},{"id":65990,"nodeType":"ContractDefinition","src":"514:9479:112","nodes":[{"id":65784,"nodeType":"ErrorDefinition","src":"619:22:112","nodes":[],"documentation":{"id":65782,"nodeType":"StructuredDocumentation","src":"557:57:112","text":" @dev Challenge root status is enabled."},"errorSelector":"4df7989c","name":"ChallengeRoot","nameLocation":"625:13:112","parameters":{"id":65783,"nodeType":"ParameterList","parameters":[],"src":"638:2:112"}},{"id":65787,"nodeType":"ErrorDefinition","src":"712:32:112","nodes":[],"documentation":{"id":65785,"nodeType":"StructuredDocumentation","src":"647:60:112","text":" @dev Challenging root status is disabled."},"errorSelector":"0cddaee9","name":"ChallengeRootNotEnabled","nameLocation":"718:23:112","parameters":{"id":65786,"nodeType":"ParameterList","parameters":[],"src":"741:2:112"}},{"id":65790,"nodeType":"ErrorDefinition","src":"812:22:112","nodes":[],"documentation":{"id":65788,"nodeType":"StructuredDocumentation","src":"750:57:112","text":" @dev Emergency stop status is enabled."},"errorSelector":"4e97bcfc","name":"EmergencyStop","nameLocation":"818:13:112","parameters":{"id":65789,"nodeType":"ParameterList","parameters":[],"src":"831:2:112"}},{"id":65793,"nodeType":"ErrorDefinition","src":"903:32:112","nodes":[],"documentation":{"id":65791,"nodeType":"StructuredDocumentation","src":"840:58:112","text":" @dev Emergency stop status is disabled."},"errorSelector":"ca56aa68","name":"EmergencyStopNotEnabled","nameLocation":"909:23:112","parameters":{"id":65792,"nodeType":"ParameterList","parameters":[],"src":"932:2:112"}},{"id":65796,"nodeType":"ErrorDefinition","src":"997:26:112","nodes":[],"documentation":{"id":65794,"nodeType":"StructuredDocumentation","src":"941:51:112","text":" @dev The plonk proof is invalid."},"errorSelector":"d0b34d32","name":"InvalidPlonkProof","nameLocation":"1003:17:112","parameters":{"id":65795,"nodeType":"ParameterList","parameters":[],"src":"1020:2:112"}},{"id":65801,"nodeType":"ErrorDefinition","src":"1093:52:112","nodes":[],"documentation":{"id":65797,"nodeType":"StructuredDocumentation","src":"1029:59:112","text":" @dev Message nonce is already processed."},"errorSelector":"e140f8cc","name":"MessageAlreadyProcessed","nameLocation":"1099:23:112","parameters":{"id":65800,"nodeType":"ParameterList","parameters":[{"constant":false,"id":65799,"mutability":"mutable","name":"messageNonce","nameLocation":"1131:12:112","nodeType":"VariableDeclaration","scope":65801,"src":"1123:20:112","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":65798,"name":"uint256","nodeType":"ElementaryTypeName","src":"1123:7:112","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1122:22:112"}},{"id":65806,"nodeType":"ErrorDefinition","src":"1257:46:112","nodes":[],"documentation":{"id":65802,"nodeType":"StructuredDocumentation","src":"1151:101:112","text":" @dev Merkle root is not found for the block number in MessageQueue smart contract."},"errorSelector":"55d7a68b","name":"MerkleRootNotFound","nameLocation":"1263:18:112","parameters":{"id":65805,"nodeType":"ParameterList","parameters":[{"constant":false,"id":65804,"mutability":"mutable","name":"blockNumber","nameLocation":"1290:11:112","nodeType":"VariableDeclaration","scope":65806,"src":"1282:19:112","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":65803,"name":"uint256","nodeType":"ElementaryTypeName","src":"1282:7:112","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1281:21:112"}},{"id":65809,"nodeType":"ErrorDefinition","src":"1370:33:112","nodes":[],"documentation":{"id":65807,"nodeType":"StructuredDocumentation","src":"1309:56:112","text":" @dev Merkle root delay is not passed."},"errorSelector":"a4f7d3e9","name":"MerkleRootDelayNotPassed","nameLocation":"1376:24:112","parameters":{"id":65808,"nodeType":"ParameterList","parameters":[],"src":"1400:2:112"}},{"id":65812,"nodeType":"ErrorDefinition","src":"1462:27:112","nodes":[],"documentation":{"id":65810,"nodeType":"StructuredDocumentation","src":"1409:48:112","text":" @dev Merkle proof is invalid."},"errorSelector":"b05e92fa","name":"InvalidMerkleProof","nameLocation":"1468:18:112","parameters":{"id":65811,"nodeType":"ParameterList","parameters":[],"src":"1486:2:112"}},{"id":65817,"nodeType":"ErrorDefinition","src":"1551:48:112","nodes":[],"documentation":{"id":65813,"nodeType":"StructuredDocumentation","src":"1495:51:112","text":" @dev Merkle root is already set."},"errorSelector":"8d60c7ab","name":"MerkleRootAlreadySet","nameLocation":"1557:20:112","parameters":{"id":65816,"nodeType":"ParameterList","parameters":[{"constant":false,"id":65815,"mutability":"mutable","name":"blockNumber","nameLocation":"1586:11:112","nodeType":"VariableDeclaration","scope":65817,"src":"1578:19:112","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":65814,"name":"uint256","nodeType":"ElementaryTypeName","src":"1578:7:112","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1577:21:112"}},{"id":65820,"nodeType":"ErrorDefinition","src":"1669:30:112","nodes":[],"documentation":{"id":65818,"nodeType":"StructuredDocumentation","src":"1605:59:112","text":" @dev Caller is not emergency stop admin."},"errorSelector":"662cadb5","name":"NotEmergencyStopAdmin","nameLocation":"1675:21:112","parameters":{"id":65819,"nodeType":"ParameterList","parameters":[],"src":"1696:2:112"}},{"id":65823,"nodeType":"ErrorDefinition","src":"1772:33:112","nodes":[],"documentation":{"id":65821,"nodeType":"StructuredDocumentation","src":"1705:62:112","text":" @dev Caller is not emergency stop observer."},"errorSelector":"d3e7b381","name":"NotEmergencyStopObserver","nameLocation":"1778:24:112","parameters":{"id":65822,"nodeType":"ParameterList","parameters":[],"src":"1802:2:112"}},{"id":65830,"nodeType":"ErrorDefinition","src":"1877:74:112","nodes":[],"documentation":{"id":65824,"nodeType":"StructuredDocumentation","src":"1811:61:112","text":" @dev Block number is before genesis block."},"errorSelector":"e370b92d","name":"BlockNumberBeforeGenesis","nameLocation":"1883:24:112","parameters":{"id":65829,"nodeType":"ParameterList","parameters":[{"constant":false,"id":65826,"mutability":"mutable","name":"blockNumber","nameLocation":"1916:11:112","nodeType":"VariableDeclaration","scope":65830,"src":"1908:19:112","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":65825,"name":"uint256","nodeType":"ElementaryTypeName","src":"1908:7:112","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":65828,"mutability":"mutable","name":"genesisBlock","nameLocation":"1937:12:112","nodeType":"VariableDeclaration","scope":65830,"src":"1929:20:112","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":65827,"name":"uint256","nodeType":"ElementaryTypeName","src":"1929:7:112","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1907:43:112"}},{"id":65837,"nodeType":"ErrorDefinition","src":"2032:69:112","nodes":[],"documentation":{"id":65831,"nodeType":"StructuredDocumentation","src":"1957:70:112","text":" @dev Block number is too far from max block number."},"errorSelector":"3263b70a","name":"BlockNumberTooFar","nameLocation":"2038:17:112","parameters":{"id":65836,"nodeType":"ParameterList","parameters":[{"constant":false,"id":65833,"mutability":"mutable","name":"blockNumber","nameLocation":"2064:11:112","nodeType":"VariableDeclaration","scope":65837,"src":"2056:19:112","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":65832,"name":"uint256","nodeType":"ElementaryTypeName","src":"2056:7:112","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":65835,"mutability":"mutable","name":"maxBlockNumber","nameLocation":"2085:14:112","nodeType":"VariableDeclaration","scope":65837,"src":"2077:22:112","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":65834,"name":"uint256","nodeType":"ElementaryTypeName","src":"2077:7:112","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2055:45:112"}},{"id":65842,"nodeType":"EventDefinition","src":"2184:51:112","nodes":[],"anonymous":false,"documentation":{"id":65838,"nodeType":"StructuredDocumentation","src":"2107:72:112","text":" @dev Emitted when challenging root status is enabled."},"eventSelector":"9a878a4ae6a3ebc7d241df3b1837491b2b9a9cdd0580170a7f2c555d7b15ad8b","name":"ChallengeRootEnabled","nameLocation":"2190:20:112","parameters":{"id":65841,"nodeType":"ParameterList","parameters":[{"constant":false,"id":65840,"indexed":false,"mutability":"mutable","name":"untilTimestamp","nameLocation":"2219:14:112","nodeType":"VariableDeclaration","scope":65842,"src":"2211:22:112","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":65839,"name":"uint256","nodeType":"ElementaryTypeName","src":"2211:7:112","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2210:24:112"}},{"id":65845,"nodeType":"EventDefinition","src":"2319:30:112","nodes":[],"anonymous":false,"documentation":{"id":65843,"nodeType":"StructuredDocumentation","src":"2241:73:112","text":" @dev Emitted when challenging root status is disabled."},"eventSelector":"a6262a506984c4ee15f889b617462c54ac45d6d7739c9cdceea59098ee5edeb8","name":"ChallengeRootDisabled","nameLocation":"2325:21:112","parameters":{"id":65844,"nodeType":"ParameterList","parameters":[],"src":"2346:2:112"}},{"id":65848,"nodeType":"EventDefinition","src":"2430:29:112","nodes":[],"anonymous":false,"documentation":{"id":65846,"nodeType":"StructuredDocumentation","src":"2355:70:112","text":" @dev Emitted when emergency stop status is enabled."},"eventSelector":"015567d35557fdfcbb3bbfe9dbf4f5c651cb9e461e784ac02c8152fbdb731971","name":"EmergencyStopEnabled","nameLocation":"2436:20:112","parameters":{"id":65847,"nodeType":"ParameterList","parameters":[],"src":"2456:2:112"}},{"id":65851,"nodeType":"EventDefinition","src":"2616:30:112","nodes":[],"anonymous":false,"documentation":{"id":65849,"nodeType":"StructuredDocumentation","src":"2465:146:112","text":" @dev Emitted when emergency stop status is disabled.\n      Should be emitted on upgradeV2 function of the smart contract."},"eventSelector":"733865ee5918bf41dfad0ca1d8ddaa4c1d18103ae3d21e7436828b52762b87e0","name":"EmergencyStopDisabled","nameLocation":"2622:21:112","parameters":{"id":65850,"nodeType":"ParameterList","parameters":[],"src":"2643:2:112"}},{"id":65858,"nodeType":"EventDefinition","src":"2734:58:112","nodes":[],"anonymous":false,"documentation":{"id":65852,"nodeType":"StructuredDocumentation","src":"2652:77:112","text":" @dev Emitted when block number and merkle root are stored."},"eventSelector":"48211a20c285b6b077b7917b8bb118eaa92efdfb8fa2e3b114ffa253e0b665ae","name":"MerkleRoot","nameLocation":"2740:10:112","parameters":{"id":65857,"nodeType":"ParameterList","parameters":[{"constant":false,"id":65854,"indexed":false,"mutability":"mutable","name":"blockNumber","nameLocation":"2759:11:112","nodeType":"VariableDeclaration","scope":65858,"src":"2751:19:112","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":65853,"name":"uint256","nodeType":"ElementaryTypeName","src":"2751:7:112","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":65856,"indexed":false,"mutability":"mutable","name":"merkleRoot","nameLocation":"2780:10:112","nodeType":"VariableDeclaration","scope":65858,"src":"2772:18:112","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":65855,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2772:7:112","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2750:41:112"}},{"id":65861,"nodeType":"EventDefinition","src":"2892:33:112","nodes":[],"anonymous":false,"documentation":{"id":65859,"nodeType":"StructuredDocumentation","src":"2798:89:112","text":" @dev Emitted when message processing is allowed during emergency stop."},"eventSelector":"9d3e19ea897a0042d94736364efa77853151ca0c20a04f5d4e930a1043122ef8","name":"MessageProcessingAllowed","nameLocation":"2898:24:112","parameters":{"id":65860,"nodeType":"ParameterList","parameters":[],"src":"2922:2:112"}},{"id":65872,"nodeType":"EventDefinition","src":"2994:115:112","nodes":[],"anonymous":false,"documentation":{"id":65862,"nodeType":"StructuredDocumentation","src":"2931:58:112","text":" @dev Emitted when message is processed."},"eventSelector":"994c669cfd9c0453d42c933a11c002a34d12d85563aebe99ca525fffc45454f8","name":"MessageProcessed","nameLocation":"3000:16:112","parameters":{"id":65871,"nodeType":"ParameterList","parameters":[{"constant":false,"id":65864,"indexed":false,"mutability":"mutable","name":"blockNumber","nameLocation":"3025:11:112","nodeType":"VariableDeclaration","scope":65872,"src":"3017:19:112","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":65863,"name":"uint256","nodeType":"ElementaryTypeName","src":"3017:7:112","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":65866,"indexed":false,"mutability":"mutable","name":"messageHash","nameLocation":"3046:11:112","nodeType":"VariableDeclaration","scope":65872,"src":"3038:19:112","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":65865,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3038:7:112","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":65868,"indexed":false,"mutability":"mutable","name":"messageNonce","nameLocation":"3067:12:112","nodeType":"VariableDeclaration","scope":65872,"src":"3059:20:112","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":65867,"name":"uint256","nodeType":"ElementaryTypeName","src":"3059:7:112","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":65870,"indexed":false,"mutability":"mutable","name":"messageDestination","nameLocation":"3089:18:112","nodeType":"VariableDeclaration","scope":65872,"src":"3081:26:112","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":65869,"name":"address","nodeType":"ElementaryTypeName","src":"3081:7:112","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3016:92:112"}},{"id":65878,"nodeType":"FunctionDefinition","src":"3234:59:112","nodes":[],"documentation":{"id":65873,"nodeType":"StructuredDocumentation","src":"3115:114:112","text":" @dev Returns governance admin address.\n @return governanceAdmin Governance admin address."},"functionSelector":"0058f6b8","implemented":false,"kind":"function","modifiers":[],"name":"governanceAdmin","nameLocation":"3243:15:112","parameters":{"id":65874,"nodeType":"ParameterList","parameters":[],"src":"3258:2:112"},"returnParameters":{"id":65877,"nodeType":"ParameterList","parameters":[{"constant":false,"id":65876,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":65878,"src":"3284:7:112","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":65875,"name":"address","nodeType":"ElementaryTypeName","src":"3284:7:112","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3283:9:112"},"scope":65990,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":65884,"nodeType":"FunctionDefinition","src":"3421:60:112","nodes":[],"documentation":{"id":65879,"nodeType":"StructuredDocumentation","src":"3299:117:112","text":" @dev Returns governance pauser address.\n @return governancePauser Governance pauser address."},"functionSelector":"c81eb797","implemented":false,"kind":"function","modifiers":[],"name":"governancePauser","nameLocation":"3430:16:112","parameters":{"id":65880,"nodeType":"ParameterList","parameters":[],"src":"3446:2:112"},"returnParameters":{"id":65883,"nodeType":"ParameterList","parameters":[{"constant":false,"id":65882,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":65884,"src":"3472:7:112","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":65881,"name":"address","nodeType":"ElementaryTypeName","src":"3472:7:112","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3471:9:112"},"scope":65990,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":65890,"nodeType":"FunctionDefinition","src":"3617:62:112","nodes":[],"documentation":{"id":65885,"nodeType":"StructuredDocumentation","src":"3487:125:112","text":" @dev Returns emergency stop admin address.\n @return emergencyStopAdmin Emergency stop admin address."},"functionSelector":"b13f222c","implemented":false,"kind":"function","modifiers":[],"name":"emergencyStopAdmin","nameLocation":"3626:18:112","parameters":{"id":65886,"nodeType":"ParameterList","parameters":[],"src":"3644:2:112"},"returnParameters":{"id":65889,"nodeType":"ParameterList","parameters":[{"constant":false,"id":65888,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":65890,"src":"3670:7:112","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":65887,"name":"address","nodeType":"ElementaryTypeName","src":"3670:7:112","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3669:9:112"},"scope":65990,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":65897,"nodeType":"FunctionDefinition","src":"3827:75:112","nodes":[],"documentation":{"id":65891,"nodeType":"StructuredDocumentation","src":"3685:137:112","text":" @dev Returns list of emergency stop observers.\n @return emergencyStopObservers List of emergency stop observers."},"functionSelector":"76afc14f","implemented":false,"kind":"function","modifiers":[],"name":"emergencyStopObservers","nameLocation":"3836:22:112","parameters":{"id":65892,"nodeType":"ParameterList","parameters":[],"src":"3858:2:112"},"returnParameters":{"id":65896,"nodeType":"ParameterList","parameters":[{"constant":false,"id":65895,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":65897,"src":"3884:16:112","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":65893,"name":"address","nodeType":"ElementaryTypeName","src":"3884:7:112","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":65894,"nodeType":"ArrayTypeName","src":"3884:9:112","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"3883:18:112"},"scope":65990,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":65903,"nodeType":"FunctionDefinition","src":"4123:52:112","nodes":[],"documentation":{"id":65898,"nodeType":"StructuredDocumentation","src":"3908:210:112","text":" @dev Returns verifier address.\n      Verifier is smart contract that is responsible for verifying\n      the validity of the Merkle proof.\n @return verifier Verifier address."},"functionSelector":"2b7ac3f3","implemented":false,"kind":"function","modifiers":[],"name":"verifier","nameLocation":"4132:8:112","parameters":{"id":65899,"nodeType":"ParameterList","parameters":[],"src":"4140:2:112"},"returnParameters":{"id":65902,"nodeType":"ParameterList","parameters":[{"constant":false,"id":65901,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":65903,"src":"4166:7:112","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":65900,"name":"address","nodeType":"ElementaryTypeName","src":"4166:7:112","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4165:9:112"},"scope":65990,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":65909,"nodeType":"FunctionDefinition","src":"4300:58:112","nodes":[],"documentation":{"id":65904,"nodeType":"StructuredDocumentation","src":"4181:114:112","text":" @dev Returns challenging root status.\n @return isChallengingRoot challenging root status."},"functionSelector":"52d190f3","implemented":false,"kind":"function","modifiers":[],"name":"isChallengingRoot","nameLocation":"4309:17:112","parameters":{"id":65905,"nodeType":"ParameterList","parameters":[],"src":"4326:2:112"},"returnParameters":{"id":65908,"nodeType":"ParameterList","parameters":[{"constant":false,"id":65907,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":65909,"src":"4352:4:112","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":65906,"name":"bool","nodeType":"ElementaryTypeName","src":"4352:4:112","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4351:6:112"},"scope":65990,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":65915,"nodeType":"FunctionDefinition","src":"4480:59:112","nodes":[],"documentation":{"id":65910,"nodeType":"StructuredDocumentation","src":"4364:111:112","text":" @dev Returns emergency stop status.\n @return isEmergencyStopped emergency stop status."},"functionSelector":"fddd4837","implemented":false,"kind":"function","modifiers":[],"name":"isEmergencyStopped","nameLocation":"4489:18:112","parameters":{"id":65911,"nodeType":"ParameterList","parameters":[],"src":"4507:2:112"},"returnParameters":{"id":65914,"nodeType":"ParameterList","parameters":[{"constant":false,"id":65913,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":65915,"src":"4533:4:112","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":65912,"name":"bool","nodeType":"ElementaryTypeName","src":"4533:4:112","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4532:6:112"},"scope":65990,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":65921,"nodeType":"FunctionDefinition","src":"4653:56:112","nodes":[],"documentation":{"id":65916,"nodeType":"StructuredDocumentation","src":"4545:103:112","text":" @dev Returns genesis block number.\n @return genesisBlock Genesis block number."},"functionSelector":"4cdc9c63","implemented":false,"kind":"function","modifiers":[],"name":"genesisBlock","nameLocation":"4662:12:112","parameters":{"id":65917,"nodeType":"ParameterList","parameters":[],"src":"4674:2:112"},"returnParameters":{"id":65920,"nodeType":"ParameterList","parameters":[{"constant":false,"id":65919,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":65921,"src":"4700:7:112","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":65918,"name":"uint256","nodeType":"ElementaryTypeName","src":"4700:7:112","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4699:9:112"},"scope":65990,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":65927,"nodeType":"FunctionDefinition","src":"4825:58:112","nodes":[],"documentation":{"id":65922,"nodeType":"StructuredDocumentation","src":"4715:105:112","text":" @dev Returns maximum block number.\n @return maxBlockNumber Maximum block number."},"functionSelector":"a912fd25","implemented":false,"kind":"function","modifiers":[],"name":"maxBlockNumber","nameLocation":"4834:14:112","parameters":{"id":65923,"nodeType":"ParameterList","parameters":[],"src":"4848:2:112"},"returnParameters":{"id":65926,"nodeType":"ParameterList","parameters":[{"constant":false,"id":65925,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":65927,"src":"4874:7:112","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":65924,"name":"uint256","nodeType":"ElementaryTypeName","src":"4874:7:112","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4873:9:112"},"scope":65990,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":65931,"nodeType":"FunctionDefinition","src":"5284:34:112","nodes":[],"documentation":{"id":65928,"nodeType":"StructuredDocumentation","src":"4889:390:112","text":" @dev Puts MessageQueue into a high-priority paused state.\n      Only the emergency stop admin or time expiry (CHALLENGE_ROOT_DELAY) can lift it.\n @dev Reverts if:\n      - msg.sender is not emergency stop observer with `NotEmergencyStopObserver` error.\n @dev Emits `ChallengeRootEnabled(block.timestamp + CHALLENGE_ROOT_DELAY)` event."},"functionSelector":"87e97e8c","implemented":false,"kind":"function","modifiers":[],"name":"challengeRoot","nameLocation":"5293:13:112","parameters":{"id":65929,"nodeType":"ParameterList","parameters":[],"src":"5306:2:112"},"returnParameters":{"id":65930,"nodeType":"ParameterList","parameters":[],"src":"5317:0:112"},"scope":65990,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":65935,"nodeType":"FunctionDefinition","src":"5653:41:112","nodes":[],"documentation":{"id":65932,"nodeType":"StructuredDocumentation","src":"5324:324:112","text":" @dev Disables challenging root status.\n @dev Reverts if:\n      - msg.sender is not emergency stop admin with `NotEmergencyStopAdmin` error.\n      - challenging root status is not enabled with `ChallengeRootNotEnabled` error.\n @dev Emits `ChallengeRootDisabled` event."},"functionSelector":"0f926c02","implemented":false,"kind":"function","modifiers":[],"name":"disableChallengeRoot","nameLocation":"5662:20:112","parameters":{"id":65933,"nodeType":"ParameterList","parameters":[],"src":"5682:2:112"},"returnParameters":{"id":65934,"nodeType":"ParameterList","parameters":[],"src":"5693:0:112"},"scope":65990,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":65939,"nodeType":"FunctionDefinition","src":"5995:43:112","nodes":[],"documentation":{"id":65936,"nodeType":"StructuredDocumentation","src":"5700:290:112","text":" @dev Allows message processing when emergency stop is enabled.\n @dev Reverts if:\n      - msg.sender is not emergency stop admin with `NotEmergencyStopAdmin` error.\n      - emergency stop status is not enabled with `EmergencyStopNotEnabled` error."},"functionSelector":"00490745","implemented":false,"kind":"function","modifiers":[],"name":"allowMessageProcessing","nameLocation":"6004:22:112","parameters":{"id":65937,"nodeType":"ParameterList","parameters":[],"src":"6026:2:112"},"returnParameters":{"id":65938,"nodeType":"ParameterList","parameters":[],"src":"6037:0:112"},"scope":65990,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":65949,"nodeType":"FunctionDefinition","src":"6907:98:112","nodes":[],"documentation":{"id":65940,"nodeType":"StructuredDocumentation","src":"6044:858:112","text":" @dev Receives, verifies and stores Merkle roots from Vara Network.\n      Upon successfully storing data about block number and corresponding Merkle root,\n      MessageQueue smart contract will emit a `MerkleRoot` event.\n      It is important to note that anyone can submit a Merkle root because only\n      validated Merkle roots will be stored in the MessageQueue smart contract.\n @param blockNumber Block number on Vara Network\n @param merkleRoot Merkle root of transactions included in block with corresponding block number\n @param proof Serialised Plonk proof (using gnark's `MarshalSolidity`).\n @dev Reverts if emergency stop status is enabled with `EmergencyStop` error.\n @dev Reverts if `proof` or `publicInputs` are malformed with `InvalidPlonkProof` error."},"functionSelector":"cca66a9d","implemented":false,"kind":"function","modifiers":[],"name":"submitMerkleRoot","nameLocation":"6916:16:112","parameters":{"id":65947,"nodeType":"ParameterList","parameters":[{"constant":false,"id":65942,"mutability":"mutable","name":"blockNumber","nameLocation":"6941:11:112","nodeType":"VariableDeclaration","scope":65949,"src":"6933:19:112","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":65941,"name":"uint256","nodeType":"ElementaryTypeName","src":"6933:7:112","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":65944,"mutability":"mutable","name":"merkleRoot","nameLocation":"6962:10:112","nodeType":"VariableDeclaration","scope":65949,"src":"6954:18:112","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":65943,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6954:7:112","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":65946,"mutability":"mutable","name":"proof","nameLocation":"6989:5:112","nodeType":"VariableDeclaration","scope":65949,"src":"6974:20:112","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":65945,"name":"bytes","nodeType":"ElementaryTypeName","src":"6974:5:112","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6932:63:112"},"returnParameters":{"id":65948,"nodeType":"ParameterList","parameters":[],"src":"7004:0:112"},"scope":65990,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":65957,"nodeType":"FunctionDefinition","src":"7293:76:112","nodes":[],"documentation":{"id":65950,"nodeType":"StructuredDocumentation","src":"7011:277:112","text":" @dev Returns merkle root for specified block number.\n      Returns `bytes32(0)` if merkle root was not provided for specified block number.\n @param blockNumber Target block number.\n @return merkleRoot Merkle root for specified block number."},"functionSelector":"0aab8ba5","implemented":false,"kind":"function","modifiers":[],"name":"getMerkleRoot","nameLocation":"7302:13:112","parameters":{"id":65953,"nodeType":"ParameterList","parameters":[{"constant":false,"id":65952,"mutability":"mutable","name":"blockNumber","nameLocation":"7324:11:112","nodeType":"VariableDeclaration","scope":65957,"src":"7316:19:112","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":65951,"name":"uint256","nodeType":"ElementaryTypeName","src":"7316:7:112","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7315:21:112"},"returnParameters":{"id":65956,"nodeType":"ParameterList","parameters":[{"constant":false,"id":65955,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":65957,"src":"7360:7:112","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":65954,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7360:7:112","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7359:9:112"},"scope":65990,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":65965,"nodeType":"FunctionDefinition","src":"7637:84:112","nodes":[],"documentation":{"id":65958,"nodeType":"StructuredDocumentation","src":"7375:257:112","text":" @dev Returns timestamp when merkle root was set.\n      Returns `0` if merkle root was not provided for specified block number.\n @param merkleRoot Target merkle root.\n @return timestamp Timestamp when merkle root was set."},"functionSelector":"4610d3aa","implemented":false,"kind":"function","modifiers":[],"name":"getMerkleRootTimestamp","nameLocation":"7646:22:112","parameters":{"id":65961,"nodeType":"ParameterList","parameters":[{"constant":false,"id":65960,"mutability":"mutable","name":"merkleRoot","nameLocation":"7677:10:112","nodeType":"VariableDeclaration","scope":65965,"src":"7669:18:112","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":65959,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7669:7:112","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7668:20:112"},"returnParameters":{"id":65964,"nodeType":"ParameterList","parameters":[{"constant":false,"id":65963,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":65965,"src":"7712:7:112","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":65962,"name":"uint256","nodeType":"ElementaryTypeName","src":"7712:7:112","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7711:9:112"},"scope":65990,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":65981,"nodeType":"FunctionDefinition","src":"9510:196:112","nodes":[],"documentation":{"id":65966,"nodeType":"StructuredDocumentation","src":"7727:1778:112","text":" @dev Verifies and processes message originated from Vara Network.\n      In this process, MessageQueue smart contract will calculate Merkle root\n      for message and validate that it corresponds to Merkle root which is already stored\n      in MessageQueue smart contract for same block number. If proof is correct, nonce of received\n      message will be stored in smart contract and message will be forwarded to adequate message\n      processor, either ERC20Manager or Governance smart contract.\n      Upon successful processing of the message `MessageProcessed` event is emitted.\n      It is important to note that anyone can submit a message because all messages\n      will be validated against previously stored Merkle roots in the MessageQueue smart contract.\n @param blockNumber Block number of block containing target merkle tree.\n @param totalLeaves Number of leaves in target merkle tree.\n @param leafIndex Index of leaf containing target message.\n @param message Target message.\n @param proof Merkle proof of inclusion of leaf #`leafIndex` into target merkle tree that\n              was included into `blockNumber`.\n @dev Reverts if:\n      - MessageQueue is in challenging root status with `ChallengeRoot` error.\n      - MessageQueue is paused and message source is not any governance address.\n      - MessageQueue emergency stop status is enabled and caller is not emergency stop admin.\n      - Message nonce is already processed.\n      - Merkle root is not set for the block number in MessageQueue smart contract.\n      - Merkle proof is invalid.\n      - Message processing fails."},"functionSelector":"93eb47e9","implemented":false,"kind":"function","modifiers":[],"name":"processMessage","nameLocation":"9519:14:112","parameters":{"id":65979,"nodeType":"ParameterList","parameters":[{"constant":false,"id":65968,"mutability":"mutable","name":"blockNumber","nameLocation":"9551:11:112","nodeType":"VariableDeclaration","scope":65981,"src":"9543:19:112","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":65967,"name":"uint256","nodeType":"ElementaryTypeName","src":"9543:7:112","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":65970,"mutability":"mutable","name":"totalLeaves","nameLocation":"9580:11:112","nodeType":"VariableDeclaration","scope":65981,"src":"9572:19:112","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":65969,"name":"uint256","nodeType":"ElementaryTypeName","src":"9572:7:112","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":65972,"mutability":"mutable","name":"leafIndex","nameLocation":"9609:9:112","nodeType":"VariableDeclaration","scope":65981,"src":"9601:17:112","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":65971,"name":"uint256","nodeType":"ElementaryTypeName","src":"9601:7:112","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":65975,"mutability":"mutable","name":"message","nameLocation":"9649:7:112","nodeType":"VariableDeclaration","scope":65981,"src":"9628:28:112","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_VaraMessage_$65778_calldata_ptr","typeString":"struct VaraMessage"},"typeName":{"id":65974,"nodeType":"UserDefinedTypeName","pathNode":{"id":65973,"name":"VaraMessage","nameLocations":["9628:11:112"],"nodeType":"IdentifierPath","referencedDeclaration":65778,"src":"9628:11:112"},"referencedDeclaration":65778,"src":"9628:11:112","typeDescriptions":{"typeIdentifier":"t_struct$_VaraMessage_$65778_storage_ptr","typeString":"struct VaraMessage"}},"visibility":"internal"},{"constant":false,"id":65978,"mutability":"mutable","name":"proof","nameLocation":"9685:5:112","nodeType":"VariableDeclaration","scope":65981,"src":"9666:24:112","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":65976,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9666:7:112","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":65977,"nodeType":"ArrayTypeName","src":"9666:9:112","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"9533:163:112"},"returnParameters":{"id":65980,"nodeType":"ParameterList","parameters":[],"src":"9705:0:112"},"scope":65990,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":65989,"nodeType":"FunctionDefinition","src":"9919:72:112","nodes":[],"documentation":{"id":65982,"nodeType":"StructuredDocumentation","src":"9712:202:112","text":" @dev Checks if message was already processed.\n @param messageNonce Message nonce to check.\n @return isProcessed `true` if message was already processed, `false` otherwise."},"functionSelector":"bfe7edd7","implemented":false,"kind":"function","modifiers":[],"name":"isProcessed","nameLocation":"9928:11:112","parameters":{"id":65985,"nodeType":"ParameterList","parameters":[{"constant":false,"id":65984,"mutability":"mutable","name":"messageNonce","nameLocation":"9948:12:112","nodeType":"VariableDeclaration","scope":65989,"src":"9940:20:112","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":65983,"name":"uint256","nodeType":"ElementaryTypeName","src":"9940:7:112","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9939:22:112"},"returnParameters":{"id":65988,"nodeType":"ParameterList","parameters":[{"constant":false,"id":65987,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":65989,"src":"9985:4:112","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":65986,"name":"bool","nodeType":"ElementaryTypeName","src":"9985:4:112","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"9984:6:112"},"scope":65990,"stateMutability":"view","virtual":false,"visibility":"external"}],"abstract":false,"baseContracts":[{"baseName":{"id":65780,"name":"IPausable","nameLocations":["541:9:112"],"nodeType":"IdentifierPath","referencedDeclaration":66052,"src":"541:9:112"},"id":65781,"nodeType":"InheritanceSpecifier","src":"541:9:112"}],"canonicalName":"IMessageQueue","contractDependencies":[],"contractKind":"interface","documentation":{"id":65779,"nodeType":"StructuredDocumentation","src":"457:56:112","text":" @dev Interface for the MessageQueue contract."},"fullyImplemented":false,"linearizedBaseContracts":[65990,66052],"name":"IMessageQueue","nameLocation":"524:13:112","scope":66041,"usedErrors":[65784,65787,65790,65793,65796,65801,65806,65809,65812,65817,65820,65823,65830,65837],"usedEvents":[65842,65845,65848,65851,65858,65861,65872]},{"id":66040,"nodeType":"ContractDefinition","src":"10044:797:112","nodes":[{"id":66015,"nodeType":"FunctionDefinition","src":"10193:261:112","nodes":[],"body":{"id":66014,"nodeType":"Block","src":"10277:177:112","nodes":[],"statements":[{"documentation":"forge-lint: disable-next-line(asm-keccak256)","expression":{"arguments":[{"arguments":[{"expression":{"id":66003,"name":"message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":65995,"src":"10378:7:112","typeDescriptions":{"typeIdentifier":"t_struct$_VaraMessage_$65778_calldata_ptr","typeString":"struct VaraMessage calldata"}},"id":66004,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10386:5:112","memberName":"nonce","nodeType":"MemberAccess","referencedDeclaration":65771,"src":"10378:13:112","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":66005,"name":"message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":65995,"src":"10393:7:112","typeDescriptions":{"typeIdentifier":"t_struct$_VaraMessage_$65778_calldata_ptr","typeString":"struct VaraMessage calldata"}},"id":66006,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10401:6:112","memberName":"source","nodeType":"MemberAccess","referencedDeclaration":65773,"src":"10393:14:112","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":66007,"name":"message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":65995,"src":"10409:7:112","typeDescriptions":{"typeIdentifier":"t_struct$_VaraMessage_$65778_calldata_ptr","typeString":"struct VaraMessage calldata"}},"id":66008,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10417:11:112","memberName":"destination","nodeType":"MemberAccess","referencedDeclaration":65775,"src":"10409:19:112","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":66009,"name":"message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":65995,"src":"10430:7:112","typeDescriptions":{"typeIdentifier":"t_struct$_VaraMessage_$65778_calldata_ptr","typeString":"struct VaraMessage calldata"}},"id":66010,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10438:7:112","memberName":"payload","nodeType":"MemberAccess","referencedDeclaration":65777,"src":"10430:15:112","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"expression":{"id":66001,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"10361:3:112","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":66002,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"10365:12:112","memberName":"encodePacked","nodeType":"MemberAccess","src":"10361:16:112","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":66011,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10361:85:112","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":66000,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"10351:9:112","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":66012,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10351:96:112","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":65999,"id":66013,"nodeType":"Return","src":"10344:103:112"}]},"documentation":{"id":65992,"nodeType":"StructuredDocumentation","src":"10065:123:112","text":" @dev Hashes VaraMessage.\n @param message Message to hash.\n @return hash Hash of the message."},"implemented":true,"kind":"function","modifiers":[],"name":"hashCalldata","nameLocation":"10202:12:112","parameters":{"id":65996,"nodeType":"ParameterList","parameters":[{"constant":false,"id":65995,"mutability":"mutable","name":"message","nameLocation":"10236:7:112","nodeType":"VariableDeclaration","scope":66015,"src":"10215:28:112","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_VaraMessage_$65778_calldata_ptr","typeString":"struct VaraMessage"},"typeName":{"id":65994,"nodeType":"UserDefinedTypeName","pathNode":{"id":65993,"name":"VaraMessage","nameLocations":["10215:11:112"],"nodeType":"IdentifierPath","referencedDeclaration":65778,"src":"10215:11:112"},"referencedDeclaration":65778,"src":"10215:11:112","typeDescriptions":{"typeIdentifier":"t_struct$_VaraMessage_$65778_storage_ptr","typeString":"struct VaraMessage"}},"visibility":"internal"}],"src":"10214:30:112"},"returnParameters":{"id":65999,"nodeType":"ParameterList","parameters":[{"constant":false,"id":65998,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":66015,"src":"10268:7:112","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":65997,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10268:7:112","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"10267:9:112"},"scope":66040,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":66039,"nodeType":"FunctionDefinition","src":"10588:251:112","nodes":[],"body":{"id":66038,"nodeType":"Block","src":"10662:177:112","nodes":[],"statements":[{"documentation":"forge-lint: disable-next-line(asm-keccak256)","expression":{"arguments":[{"arguments":[{"expression":{"id":66027,"name":"message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":66019,"src":"10763:7:112","typeDescriptions":{"typeIdentifier":"t_struct$_VaraMessage_$65778_memory_ptr","typeString":"struct VaraMessage memory"}},"id":66028,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10771:5:112","memberName":"nonce","nodeType":"MemberAccess","referencedDeclaration":65771,"src":"10763:13:112","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":66029,"name":"message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":66019,"src":"10778:7:112","typeDescriptions":{"typeIdentifier":"t_struct$_VaraMessage_$65778_memory_ptr","typeString":"struct VaraMessage memory"}},"id":66030,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10786:6:112","memberName":"source","nodeType":"MemberAccess","referencedDeclaration":65773,"src":"10778:14:112","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":66031,"name":"message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":66019,"src":"10794:7:112","typeDescriptions":{"typeIdentifier":"t_struct$_VaraMessage_$65778_memory_ptr","typeString":"struct VaraMessage memory"}},"id":66032,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10802:11:112","memberName":"destination","nodeType":"MemberAccess","referencedDeclaration":65775,"src":"10794:19:112","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":66033,"name":"message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":66019,"src":"10815:7:112","typeDescriptions":{"typeIdentifier":"t_struct$_VaraMessage_$65778_memory_ptr","typeString":"struct VaraMessage memory"}},"id":66034,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10823:7:112","memberName":"payload","nodeType":"MemberAccess","referencedDeclaration":65777,"src":"10815:15:112","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":66025,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"10746:3:112","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":66026,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"10750:12:112","memberName":"encodePacked","nodeType":"MemberAccess","src":"10746:16:112","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":66035,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10746:85:112","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":66024,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"10736:9:112","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":66036,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10736:96:112","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":66023,"id":66037,"nodeType":"Return","src":"10729:103:112"}]},"documentation":{"id":66016,"nodeType":"StructuredDocumentation","src":"10460:123:112","text":" @dev Hashes VaraMessage.\n @param message Message to hash.\n @return hash Hash of the message."},"implemented":true,"kind":"function","modifiers":[],"name":"hash","nameLocation":"10597:4:112","parameters":{"id":66020,"nodeType":"ParameterList","parameters":[{"constant":false,"id":66019,"mutability":"mutable","name":"message","nameLocation":"10621:7:112","nodeType":"VariableDeclaration","scope":66039,"src":"10602:26:112","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_VaraMessage_$65778_memory_ptr","typeString":"struct VaraMessage"},"typeName":{"id":66018,"nodeType":"UserDefinedTypeName","pathNode":{"id":66017,"name":"VaraMessage","nameLocations":["10602:11:112"],"nodeType":"IdentifierPath","referencedDeclaration":65778,"src":"10602:11:112"},"referencedDeclaration":65778,"src":"10602:11:112","typeDescriptions":{"typeIdentifier":"t_struct$_VaraMessage_$65778_storage_ptr","typeString":"struct VaraMessage"}},"visibility":"internal"}],"src":"10601:28:112"},"returnParameters":{"id":66023,"nodeType":"ParameterList","parameters":[{"constant":false,"id":66022,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":66039,"src":"10653:7:112","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":66021,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10653:7:112","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"10652:9:112"},"scope":66040,"stateMutability":"pure","virtual":false,"visibility":"internal"}],"abstract":false,"baseContracts":[],"canonicalName":"Hasher","contractDependencies":[],"contractKind":"library","documentation":{"id":65991,"nodeType":"StructuredDocumentation","src":"9995:48:112","text":" @dev Library for hashing VaraMessage."},"fullyImplemented":true,"linearizedBaseContracts":[66040],"name":"Hasher","nameLocation":"10052:6:112","scope":66041,"usedErrors":[],"usedEvents":[]}],"license":"GPL-3.0-or-later WITH Classpath-exception-2.0"},"id":112}