/// Config that should be provided to this service on initialization.
type InitConfig = struct {
  /// Address of the gear-eth-bridge built-in actor.
  gear_bridge_builtin: actor_id,
  /// Address of the `historical-proxy` program.
  /// 
  /// For more info see [State::historical_proxy_address].
  historical_proxy_address: actor_id,
  /// Config that will be used to send messages to the other programs.
  /// 
  /// For more info see [Config].
  config: Config,
};

/// Config that will be used to send messages to the other programs.
type Config = struct {
  /// Gas limit for token operations. Token operations include:
  /// - Mint
  /// - Burn
  /// - TransferFrom
  gas_for_token_ops: u64,
  /// Gas to reserve for reply processing.
  gas_for_reply_deposit: u64,
  /// Gas limit for gear-eth-bridge built-in actor request.
  gas_to_send_request_to_builtin: u64,
  /// Required gas to commit changes in [VftManager::update_vfts].
  gas_for_swap_token_maps: u64,
  /// Timeout in blocks that current program will wait for reply from
  /// the other programs such as VFT and `gear-eth-bridge` built-in actor.
  reply_timeout: u32,
  /// Fee to pay `gear-eth-bridge` built-in actor.
  fee_bridge: u128,
  /// Incoming fee.
  fee_incoming: u128,
};

/// Type of the token supply.
type TokenSupply = enum {
  /// Token supply is located on Ethereum.
  /// 
  /// This means that we're working with some pre-existing `ERC20` token on Ethereum and with
  /// wrapped `VFT` token on Gear.
  /// 
  /// When this type of token supply is activated corresponding tokens will be minted/burned
  /// on the gear side and locked/unlocked on the Ethereum side.
  /// 
  /// For example this type of token supply can be used to work with
  /// `USDT ERC20 token`/`wrappedUSDT VFT token` pair.
  Ethereum,
  /// Token supply is located on Gear.
  /// 
  /// This means that we're working with some pre-existing `VFT` token on Gear and with
  /// wrapped `ERC20` token on Ethereum.
  /// 
  /// When this type of token supply is activated corresponding tokens will be locked/unlocked
  /// on the gear side and minted/burned on the Gear side.
  /// 
  /// For example this type of token supply can be used to work with
  /// `VARA VFT token`/`wrappedVARA ERC20 token` pair.
  Gear,
};

/// Error types for VFT Manageer service.
type Error = enum {
  /// Error sending message to the program.
  SendFailure,
  /// Error while waiting for reply from the program.
  ReplyFailure,
  /// Failed to set reply timeout.
  ReplyTimeout,
  /// Failed to set reply hook.
  ReplyHook,
  /// Failed to extract the reply code from a reply message.
  NoReplyCode,
  /// Original `MessageId` wasn't found in message tracker when processing reply.
  MessageNotFound,
  /// Invalid message status was found in the message tracker when processing reply.
  InvalidMessageStatus,
  /// Message sent to the program failed.
  MessageFailed,
  /// Failed to decode Burn reply.
  BurnTokensDecode,
  /// Failed to decode TransferFrom reply.
  TransferFromDecode,
  /// Failed to decode Mint reply.
  MintTokensDecode,
  /// Failed to decode payload from gear-eth-bridge built-in actor.
  BuiltinDecode,
  /// Gas reservation for reply is too low.
  GasForReplyTooLow,
  /// `ERC20` address wasn't found in the token mapping.
  NoCorrespondingEthAddress,
  /// `VFT` address wasn't found in the token mapping.
  NoCorrespondingVaraAddress,
  /// `submit_receipt` can only be called by `historical-proxy` program.
  NotHistoricalProxy,
  /// Ethereum transaction receipt is not supported.
  NotSupportedEvent,
  /// Ethereum transaction is too old and already have been removed from storage.
  TransactionTooOld,
  /// Ethereum transaction was already processed by VFT Manager service.
  AlreadyProcessed,
  /// Vft-manager is paused and cannot process the request.
  Paused,
  /// Failed to burn tokens from the receiver in VftVara.
  BurnFromFailed: str,
  /// Internal unspecified VFT error
  Internal: vec u8,
  /// Invalid or unexpected reply received from a VFT program.
  InvalidReply,
};

/// State in which message processing can be.
type MessageStatus = enum {
  /// Message to deposit tokens is sent.
  SendingMessageToDepositTokens,
  /// Reply is received for a token deposit message.
  TokenDepositCompleted: bool,
  /// Message to the `pallet-gear-eth-bridge` is sent.
  SendingMessageToBridgeBuiltin,
  /// Reply is received for a message to the `pallet-gear-eth-bridge`.
  BridgeResponseReceived: opt u256,
  /// Message to refund tokens is sent.
  SendingMessageToReturnTokens,
  /// Reply is received for a token refund message.
  TokensReturnComplete: bool,
};

/// Details about a request associated with a message stored in [MessageTracker].
type TxDetails = struct {
  /// Address of the `VFT` token which is being bridged.
  vara_token_id: actor_id,
  /// Original `VFT` token owner.
  sender: actor_id,
  /// Bridged tokens amount.
  amount: u256,
  /// `ERC20` token receiver on Ethereum.
  receiver: h160,
  /// [TokenSupply] type of the token being bridged.
  token_supply: TokenSupply,
};

/// Entry for a single message in [MessageTracker].
type MessageInfo = struct {
  /// State of the message.
  status: MessageStatus,
  /// Request details.
  details: TxDetails,
};

type Order = enum {
  Direct,
  Reverse,
};

constructor {
  /// The constructor is intended for test purposes and is available only when the feature
  /// `mocks` is enabled.
  GasCalculation : (_init_config: InitConfig, _slot_first: u64, _count: opt u32);
  New : (init_config: InitConfig);
};

service VftManager {
  /// The method is intended for tests and is available only when the feature `mocks`
  /// is enabled. Sends a VFT-message to the sender to mint/unlock tokens depending
  /// on the `_supply_type`.
  /// 
  /// Designed for benchmarking gas consumption by the VFT-response processing function.
  CalculateGasForReply : (_slot: u64, _transaction_index: u64, _supply_type: TokenSupply) -> result (null, Error);
  /// The method is intended for tests and is available only when the feature `mocks`
  /// is enabled.
  /// 
  /// Swaps internal hash maps of the TokenMap instance.
  CalculateGasForTokenMapSwap : () -> null;
  /// The method is intended for tests and is available only when the feature `mocks`
  /// is enabled. Populates the collection with processed transactions.
  /// 
  /// Returns false when the collection is populated.
  FillTransactions : () -> bool;
  /// Process message further if some error was encountered during the `request_bridging`.
  /// 
  /// This method should be called only to recover funds that were stuck in the middle of the bridging
  /// and is not a part of a normal workflow.
  /// 
  /// There can be several reasons for `request_bridging` to fail:
  /// - Gas attached to a message wasn't enough to execute entire logic in `request_bridging`.
  /// - Network was heavily loaded and some message was stuck so `request_bridging` failed.
  HandleRequestBridgingInterruptedTransfer : (msg_id: message_id) -> result (null, Error);
  /// The method is intended for tests and is available only when the feature `mocks`
  /// is enabled. Inserts the message info into the corresponding collection.
  InsertMessageInfo : (_msg_id: message_id, _status: MessageStatus, _details: TxDetails) -> null;
  InsertTransactions : (data: vec struct { u64, u64 }) -> null;
  /// Add a new token pair to a [State::token_map]. Can be called only by a [State::admin].
  MapVaraToEthAddress : (vara_token_id: actor_id, eth_token_id: h160, supply_type: TokenSupply) -> null;
  /// Pause the `vft-manager`.
  /// 
  /// When `vft-manager` is paused it means that any requests to
  /// `submit_receipt`, `request_bridging` and `handle_request_bridging_interrupted_transfer`
  /// will be rejected.
  /// 
  /// Can be called only by a [State::admin] or [State::pause_admin].
  Pause : () -> null;
  /// Remove the token pair from [State::token_map]. Can be called only by a [State::admin].
  RemoveVaraToEthAddress : (vara_token_id: actor_id) -> null;
  /// Request bridging of tokens from Gear to Ethereum.
  /// 
  /// Allowance should be granted to the current program to spend `amount` tokens
  /// from the source address.
  RequestBridging : (vara_token_id: actor_id, amount: u256, receiver: h160) -> result (struct { u256, h160 }, Error);
  /// Change [State::admin]. Can be called only by a [State::admin].
  SetAdmin : (new_admin: actor_id) -> null;
  /// Change [State::pause_admin]. Can be called only by a [State::admin].
  SetPauseAdmin : (new_pause_admin: actor_id) -> null;
  /// Submit rlp-encoded transaction receipt.
  /// 
  /// This receipt is decoded under the hood and checked that it's a valid receipt from tx
  /// sent to `ERC20Manager` contract.
  /// 
  /// This method can be called only by [State::historical_proxy_address] program.
  SubmitReceipt : (slot: u64, transaction_index: u64, receipt_rlp: vec u8) -> result (null, Error);
  /// Unpause the `vft-manager`.
  /// 
  /// It will effectively cancel effect of the [VftManager::pause].
  /// 
  /// Can be called only by a [State::admin] or [State::pause_admin].
  Unpause : () -> null;
  /// Change [Config]. Can be called only by a [State::admin].
  /// 
  /// For more info see [Config] docs.
  UpdateConfig : (config: Config) -> null;
  /// Change [State::erc20_manager_address]. Can be called only by a [State::admin].
  UpdateErc20ManagerAddress : (erc20_manager_address_new: h160) -> null;
  /// Change [State::historical_proxy_address]. Can be called only by a [State::admin].
  UpdateHistoricalProxyAddress : (historical_proxy_address_new: actor_id) -> null;
  UpdateVfts : (vft_map: vec struct { actor_id, actor_id }) -> null;
  Upgrade : (vft_manager_new: actor_id) -> null;
  /// Get current [State::admin] address.
  query Admin : () -> actor_id;
  /// Get current [State::erc20_manager_address] address.
  query Erc20ManagerAddress : () -> opt h160;
  /// Get current [State::gear_bridge_builtin] address.
  query GearBridgeBuiltin : () -> actor_id;
  /// Get current [Config].
  query GetConfig : () -> Config;
  /// Get current [State::historical_proxy_address].
  query HistoricalProxyAddress : () -> actor_id;
  /// Check if `vft-manager` is currently paused.
  query IsPaused : () -> bool;
  /// Get current [State::pause_admin] address.
  query PauseAdmin : () -> actor_id;
  /// Get state of a `request_bridging` message tracker.
  query RequestBridingMsgTrackerState : (start: u32, count: u32) -> vec struct { message_id, MessageInfo };
  query Transactions : (order: Order, start: u32, count: u32) -> vec struct { u64, u64 };
  /// Get current [token mapping](State::token_map).
  query VaraToEthAddresses : () -> vec struct { actor_id, h160, TokenSupply };

  events {
    /// Token mapping was added.
    /// 
    /// This means that VFT Manager service now supports specified
    /// [vara_token_id](Event::TokenMappingAdded::vara_token_id)/[eth_token_id](Event::TokenMappingAdded::eth_token_id) pair.
    TokenMappingAdded: struct {
      /// `VFT` token address that was added into mapping.
      vara_token_id: actor_id,
      /// `ERC20` token address that was added into mapping.
      eth_token_id: h160,
      /// Type of the token supply.
      supply_type: TokenSupply,
    };
    /// Token mapping was removed.
    /// 
    /// This means that VFT Manager service doesn't support specified
    /// [vara_token_id](Event::TokenMappingRemoved::vara_token_id)/[eth_token_id](Event::TokenMappingRemoved::eth_token_id)
    /// pair anymore.
    TokenMappingRemoved: struct {
      /// `VFT` token address that was removed from mapping.
      vara_token_id: actor_id,
      /// `ERC20` token address that was removed from mapping.
      eth_token_id: h160,
      /// Type of the token supply.
      supply_type: TokenSupply,
    };
    /// Bridging of tokens from Gear to Ethereum was requested.
    /// 
    /// When this event is emitted it means that `VFT` tokens were locked/burned and
    /// a message to the gear-eth-bridge built-in actor was successfully submitted.
    BridgingRequested: struct {
      /// Nonce that gear-eth-bridge built-in actor have returned.
      nonce: u256,
      /// `VFT` token address that was locked/burned.
      vara_token_id: actor_id,
      /// Amount of tokens that should be bridged.
      amount: u256,
      /// Original token owner on the Gear side.
      sender: actor_id,
      /// Receiver of the tokens on the Ethereum side.
      receiver: h160,
    };
    /// Vft-manager was paused by an admin.
    /// 
    /// It means that any user requests to it will be rejected.
    Paused;
    /// Vft-manager was unpaused by an admin.
    /// 
    /// It means that normal operation is continued after the pause.
    Unpaused;
    /// Address of the `historical-proxy` program was changed.
    HistoricalProxyAddressChanged: struct {
      old: actor_id,
      new: actor_id,
    };
    /// Address of the `ERC20Manager` contract address on Ethereum was changed.
    Erc20ManagerAddressChanged: struct {
      old: h160,
      new: h160,
    };
    /// Transaction receipt submitted via [VftManager::submit_receipt] processed successfully.
    BridgingAccepted: struct {
        /// The recipient
        to: ActorId,
        /// The sender on Ethereum side
        from: H160,
        /// The amount bridged
        amount: U256,
        /// Respective Vara token Id
        token: ActorId,
    };
  }
};

