enum Network {
  Ethereum
  Vara
}

enum Status {
  AwaitingPayment
  Bridging
  Completed
  Failed
}

type Transfer @entity {
  id: ID!
  txHash: String!
  blockNumber: BigInt!
  timestamp: DateTime! @index
  completedAt: DateTime
  nonce: String! @index
  sourceNetwork: Network!
  source: String! @index
  destNetwork: Network!
  destination: String! @index
  status: Status!
  sender: String! @index
  receiver: String! @index
  amount: BigInt!
}

type InitiatedTransfer @entity {
  id: ID!
  txHash: String!
  blockNumber: BigInt!
}

type Pair @entity {
  id: ID!
  varaToken: String! @index
  varaTokenSymbol: String!
  varaTokenDecimals: Int!
  varaTokenName: String!
  ethToken: String! @index
  ethTokenSymbol: String!
  ethTokenDecimals: Int!
  ethTokenName: String!
  tokenSupply: Network!
  isRemoved: Boolean!
  activeSinceBlock: BigInt!
  upgradedTo: String
  activeToBlock: BigInt
  isActive: Boolean!
}

type CompletedTransfer @entity {
  id: ID!
  nonce: String! @index @unique
  destNetwork: Network!
  timestamp: DateTime
}

type VaraBridgeProgram @entity {
  id: ID!
  name: String! @unique
}

type EthBridgeProgram @entity {
  id: ID!
  name: String! @unique
}
