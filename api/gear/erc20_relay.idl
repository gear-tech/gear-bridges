type EthToVaraEvent = struct {
  proof_block: BlockInclusionProof,
  proof: vec vec u8,
  transaction_index: u64,
  receipt_rlp: vec u8,
};

type BlockInclusionProof = struct {
  block: Block,
  headers: vec BlockHeader,
};

type Block = struct {
  slot: u64,
  proposer_index: u64,
  parent_root: h256,
  state_root: h256,
  body: BlockBody,
};

type BlockBody = struct {
  randao_reveal: h256,
  eth1_data: h256,
  graffiti: BytesFixed1,
  proposer_slashings: h256,
  attester_slashings: h256,
  attestations: h256,
  deposits: h256,
  voluntary_exits: h256,
  sync_aggregate: h256,
  execution_payload: ExecutionPayload,
  bls_to_execution_changes: h256,
  blob_kzg_commitments: h256,
};

type BytesFixed1 = struct {
  FixedArray1ForU8,
};

type FixedArray1ForU8 = struct {
  [u8, 32],
};

type ExecutionPayload = struct {
  parent_hash: BytesFixed1,
  fee_recipient: BytesFixed2,
  state_root: BytesFixed1,
  receipts_root: BytesFixed1,
  logs_bloom: h256,
  prev_randao: BytesFixed1,
  block_number: u64,
  gas_limit: u64,
  gas_used: u64,
  timestamp: u64,
  extra_data: ByteList,
  base_fee_per_gas: u256,
  block_hash: BytesFixed1,
  transactions: h256,
  withdrawals: h256,
  blob_gas_used: u64,
  excess_blob_gas: u64,
};

type BytesFixed2 = struct {
  FixedArray2ForU8,
};

type FixedArray2ForU8 = struct {
  [u8, 20],
};

type ByteList = struct {
  ListForU8,
};

/// A homogenous collection of a variable number of values.
type ListForU8 = struct {
  data: vec u8,
};

type BlockHeader = struct {
  slot: u64,
  proposer_index: u64,
  parent_root: h256,
  state_root: h256,
  body_root: h256,
};

type CheckedProofs = struct {
  receipt_rlp: vec u8,
  transaction_index: u64,
  block_number: u64,
};

type Error = enum {
  DecodeReceiptEnvelopeFailure,
  FailedEthTransaction,
  AlreadyProcessed,
  SendFailure,
  ReplyFailure,
  HandleResultDecodeFailure,
  MissingCheckpoint,
  InvalidBlockProof,
  TrieDbFailure,
  InvalidReceiptProof,
  ReplyTimeout,
  ReplyHook,
  InvalidMessage,
};

constructor {
  New : (checkpoint_light_client_address: actor_id);
};

service Erc20Relay {
  /// Check proofs and return receipt if successfull, error otherwise.
  CheckProofs : (message: EthToVaraEvent) -> result (CheckedProofs, Error);
  query Admin : () -> actor_id;
  query CheckpointLightClientAddress : () -> actor_id;
};

