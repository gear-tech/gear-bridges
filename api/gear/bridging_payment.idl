/// Global state of the Bridging Payment service.
type State = struct {
  /// Admin of this service. Admin is in charge of:
  /// - Changing fee
  /// - Withdrawing collected fees from the program address
  /// - Updating [State] of this service
  admin_address: actor_id,
  /// Fee amount that will be charged from users.
  fee: u128,
};

constructor {
  /// Create Bridging Payment program.
  New : (initial_state: State);
};

service BridgingPayment {
  /// Pay fees for message processing to the admin.
  /// 
  /// This method requires that **exactly** [Config::fee] must
  /// be attached as a value when sending message to this method.
  /// 
  /// Current fee amount can be retreived by calling `get_state`.
  PayFees : (nonce: u256) -> null;
  /// Withdraw fees that were collected from user requests.
  /// 
  /// This method can be called only by admin.
  ReclaimFee : () -> null;
  /// Set new admin.
  /// 
  /// This method can be called only by admin.
  SetAdmin : (new_admin: actor_id) -> null;
  /// Set fee that this program will take from incoming requests.
  /// 
  /// This method can be called only by admin.
  SetFee : (fee: u128) -> null;
  /// Upgrades the program to the provided new address.
  Upgrade : (new: actor_id) -> null;
  /// Get current service [State].
  query GetState : () -> State;

  events {
    /// Fee for the message processing by relayer was paid.
    BridgingPaid: struct {
      /// Nonce of the message that was paid for.
      nonce: u256
    };
  }
};

