{"abi":[{"type":"function","name":"isProcessed","inputs":[{"name":"messageNonce","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"processMessage","inputs":[{"name":"blockNumber","type":"uint256","internalType":"uint256"},{"name":"totalLeaves","type":"uint256","internalType":"uint256"},{"name":"leafIndex","type":"uint256","internalType":"uint256"},{"name":"message","type":"tuple","internalType":"struct VaraMessage","components":[{"name":"nonce","type":"uint256","internalType":"uint256"},{"name":"source","type":"bytes32","internalType":"bytes32"},{"name":"destination","type":"address","internalType":"address"},{"name":"payload","type":"bytes","internalType":"bytes"}]},{"name":"proof","type":"bytes32[]","internalType":"bytes32[]"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"event","name":"MessageProcessed","inputs":[{"name":"blockNumber","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"messageHash","type":"bytes32","indexed":true,"internalType":"bytes32"},{"name":"messageNonce","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"messageDestination","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"error","name":"InvalidMerkleProof","inputs":[]},{"type":"error","name":"MerkleRootNotSet","inputs":[{"name":"blockNumber","type":"uint256","internalType":"uint256"}]},{"type":"error","name":"MessageAlreadyProcessed","inputs":[{"name":"messageNonce","type":"uint256","internalType":"uint256"}]},{"type":"error","name":"RelayerEmergencyStop","inputs":[]}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"isProcessed(uint256)":"bfe7edd7","processMessage(uint256,uint256,uint256,(uint256,bytes32,address,bytes),bytes32[])":"93eb47e9"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidMerkleProof\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"MerkleRootNotSet\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"messageNonce\",\"type\":\"uint256\"}],\"name\":\"MessageAlreadyProcessed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RelayerEmergencyStop\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"messageHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"messageNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"messageDestination\",\"type\":\"address\"}],\"name\":\"MessageProcessed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"messageNonce\",\"type\":\"uint256\"}],\"name\":\"isProcessed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLeaves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"leafIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"source\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"internalType\":\"struct VaraMessage\",\"name\":\"message\",\"type\":\"tuple\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"processMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the MessageQueue contract.\",\"errors\":{\"InvalidMerkleProof()\":[{\"details\":\"Merkle proof is invalid.\"}],\"MerkleRootNotSet(uint256)\":[{\"details\":\"Merkle root is not set for the block number in Relayer smart contract.\"}],\"MessageAlreadyProcessed(uint256)\":[{\"details\":\"Message nonce is already processed.\"}],\"RelayerEmergencyStop()\":[{\"details\":\"Relayer emergency stop status is set.\"}]},\"events\":{\"MessageProcessed(uint256,bytes32,uint256,address)\":{\"details\":\"Emitted when message is processed.\"}},\"kind\":\"dev\",\"methods\":{\"isProcessed(uint256)\":{\"details\":\"Checks if message was already processed.\",\"params\":{\"messageNonce\":\"Message nonce to check.\"},\"returns\":{\"_0\":\"isProcessed `true` if message was already processed, `false` otherwise.\"}},\"processMessage(uint256,uint256,uint256,(uint256,bytes32,address,bytes),bytes32[])\":{\"details\":\"Verifies and processes message originated from Vara Network.      In this process, MessageQueue smart contract will calculate Merkle root      for message and validate that it corresponds to Merkle root which is already stored      in Relayer smart contract for same block number. If proof is correct, nonce of received      message will be stored in smart contract and message will be forwarded to adequate message      processor, either ERC20Manager or Governance smart contract.      Upon successful processing of the message MessageProcessed event is emited.      It is important to note that anyone can submit a message because all messages      will be validated against previously stored Merkle roots in the Relayer smart contract.Reverts if:      - MessageQueue is paused and message source is not any governance address.      - Relayer emergency stop status is set.      - Message nonce is already processed.      - Merkle root is not set for the block number in Relayer smart contract.      - Merkle proof is invalid.      - Message processing fails.\",\"params\":{\"blockNumber\":\"Block number of block containing target merkle tree.\",\"leafIndex\":\"Index of leaf containing target message.\",\"message\":\"Target message.\",\"proof\":\"Merkle proof of inclusion of leaf #`leafIndex` into target merkle tree that              was included into `blockNumber`.\",\"totalLeaves\":\"Number of leaves in target merkle tree.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/interfaces/IMessageQueue.sol\":\"IMessageQueue\"},\"debug\":{\"revertStrings\":\"strip\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"appendCBOR\":false,\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin-foundry-upgrades/=lib/openzeppelin-foundry-upgrades/src/\"],\"viaIR\":true},\"sources\":{\"src/interfaces/IMessageQueue.sol\":{\"keccak256\":\"0x475c15b796468c997eb1b389b9921991e25448d0add6df0a50094ae3b6bb2fbb\",\"license\":\"GPL-3.0-or-later WITH Classpath-exception-2.0\",\"urls\":[\"bzz-raw://fbe3b0063ba34509adccadbdeb59c6c1f5b71bb2371a6381fde155d9c3382098\",\"dweb:/ipfs/QmdbHCFiu3P4yvkVbMyX7LTx4Jxx616jNQqWgyTQUFRzXV\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.30+commit.73712a01"},"language":"Solidity","output":{"abi":[{"inputs":[],"type":"error","name":"InvalidMerkleProof"},{"inputs":[{"internalType":"uint256","name":"blockNumber","type":"uint256"}],"type":"error","name":"MerkleRootNotSet"},{"inputs":[{"internalType":"uint256","name":"messageNonce","type":"uint256"}],"type":"error","name":"MessageAlreadyProcessed"},{"inputs":[],"type":"error","name":"RelayerEmergencyStop"},{"inputs":[{"internalType":"uint256","name":"blockNumber","type":"uint256","indexed":true},{"internalType":"bytes32","name":"messageHash","type":"bytes32","indexed":true},{"internalType":"uint256","name":"messageNonce","type":"uint256","indexed":true},{"internalType":"address","name":"messageDestination","type":"address","indexed":false}],"type":"event","name":"MessageProcessed","anonymous":false},{"inputs":[{"internalType":"uint256","name":"messageNonce","type":"uint256"}],"stateMutability":"view","type":"function","name":"isProcessed","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"uint256","name":"blockNumber","type":"uint256"},{"internalType":"uint256","name":"totalLeaves","type":"uint256"},{"internalType":"uint256","name":"leafIndex","type":"uint256"},{"internalType":"struct VaraMessage","name":"message","type":"tuple","components":[{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes32","name":"source","type":"bytes32"},{"internalType":"address","name":"destination","type":"address"},{"internalType":"bytes","name":"payload","type":"bytes"}]},{"internalType":"bytes32[]","name":"proof","type":"bytes32[]"}],"stateMutability":"nonpayable","type":"function","name":"processMessage"}],"devdoc":{"kind":"dev","methods":{"isProcessed(uint256)":{"details":"Checks if message was already processed.","params":{"messageNonce":"Message nonce to check."},"returns":{"_0":"isProcessed `true` if message was already processed, `false` otherwise."}},"processMessage(uint256,uint256,uint256,(uint256,bytes32,address,bytes),bytes32[])":{"details":"Verifies and processes message originated from Vara Network.      In this process, MessageQueue smart contract will calculate Merkle root      for message and validate that it corresponds to Merkle root which is already stored      in Relayer smart contract for same block number. If proof is correct, nonce of received      message will be stored in smart contract and message will be forwarded to adequate message      processor, either ERC20Manager or Governance smart contract.      Upon successful processing of the message MessageProcessed event is emited.      It is important to note that anyone can submit a message because all messages      will be validated against previously stored Merkle roots in the Relayer smart contract.Reverts if:      - MessageQueue is paused and message source is not any governance address.      - Relayer emergency stop status is set.      - Message nonce is already processed.      - Merkle root is not set for the block number in Relayer smart contract.      - Merkle proof is invalid.      - Message processing fails.","params":{"blockNumber":"Block number of block containing target merkle tree.","leafIndex":"Index of leaf containing target message.","message":"Target message.","proof":"Merkle proof of inclusion of leaf #`leafIndex` into target merkle tree that              was included into `blockNumber`.","totalLeaves":"Number of leaves in target merkle tree."}}},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/","openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts/=lib/openzeppelin-contracts/","openzeppelin-foundry-upgrades/=lib/openzeppelin-foundry-upgrades/src/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"none","appendCBOR":false},"compilationTarget":{"src/interfaces/IMessageQueue.sol":"IMessageQueue"},"evmVersion":"prague","libraries":{},"viaIR":true},"sources":{"src/interfaces/IMessageQueue.sol":{"keccak256":"0x475c15b796468c997eb1b389b9921991e25448d0add6df0a50094ae3b6bb2fbb","urls":["bzz-raw://fbe3b0063ba34509adccadbdeb59c6c1f5b71bb2371a6381fde155d9c3382098","dweb:/ipfs/QmdbHCFiu3P4yvkVbMyX7LTx4Jxx616jNQqWgyTQUFRzXV"],"license":"GPL-3.0-or-later WITH Classpath-exception-2.0"}},"version":1},"storageLayout":{"storage":[],"types":{}},"ast":{"absolutePath":"src/interfaces/IMessageQueue.sol","id":56518,"exportedSymbols":{"Hasher":[56517],"IMessageQueue":[56451],"VaraMessage":[56398]},"nodeType":"SourceUnit","src":"74:4410:95","nodes":[{"id":56388,"nodeType":"PragmaDirective","src":"74:24:95","nodes":[],"literals":["solidity","^","0.8",".30"]},{"id":56398,"nodeType":"StructDefinition","src":"306:105:95","nodes":[],"canonicalName":"VaraMessage","documentation":{"id":56389,"nodeType":"StructuredDocumentation","src":"100:205:95","text":" @dev Type representing message being bridged from Gear-based chain (Vara Network) to Ethereum.\n      - https://github.com/gear-tech/gear/blob/v1.8.1/pallets/gear-eth-bridge/src/internal.rs#L58"},"members":[{"constant":false,"id":56391,"mutability":"mutable","name":"nonce","nameLocation":"339:5:95","nodeType":"VariableDeclaration","scope":56398,"src":"331:13:95","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":56390,"name":"uint256","nodeType":"ElementaryTypeName","src":"331:7:95","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":56393,"mutability":"mutable","name":"source","nameLocation":"358:6:95","nodeType":"VariableDeclaration","scope":56398,"src":"350:14:95","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":56392,"name":"bytes32","nodeType":"ElementaryTypeName","src":"350:7:95","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":56395,"mutability":"mutable","name":"destination","nameLocation":"378:11:95","nodeType":"VariableDeclaration","scope":56398,"src":"370:19:95","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":56394,"name":"address","nodeType":"ElementaryTypeName","src":"370:7:95","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":56397,"mutability":"mutable","name":"payload","nameLocation":"401:7:95","nodeType":"VariableDeclaration","scope":56398,"src":"395:13:95","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":56396,"name":"bytes","nodeType":"ElementaryTypeName","src":"395:5:95","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"VaraMessage","nameLocation":"313:11:95","scope":56518,"visibility":"public"},{"id":56451,"nodeType":"ContractDefinition","src":"470:2849:95","nodes":[{"id":56402,"nodeType":"ErrorDefinition","src":"566:29:95","nodes":[],"documentation":{"id":56400,"nodeType":"StructuredDocumentation","src":"500:61:95","text":" @dev Relayer emergency stop status is set."},"errorSelector":"dfe54af3","name":"RelayerEmergencyStop","nameLocation":"572:20:95","parameters":{"id":56401,"nodeType":"ParameterList","parameters":[],"src":"592:2:95"}},{"id":56407,"nodeType":"ErrorDefinition","src":"665:52:95","nodes":[],"documentation":{"id":56403,"nodeType":"StructuredDocumentation","src":"601:59:95","text":" @dev Message nonce is already processed."},"errorSelector":"e140f8cc","name":"MessageAlreadyProcessed","nameLocation":"671:23:95","parameters":{"id":56406,"nodeType":"ParameterList","parameters":[{"constant":false,"id":56405,"mutability":"mutable","name":"messageNonce","nameLocation":"703:12:95","nodeType":"VariableDeclaration","scope":56407,"src":"695:20:95","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":56404,"name":"uint256","nodeType":"ElementaryTypeName","src":"695:7:95","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"694:22:95"}},{"id":56412,"nodeType":"ErrorDefinition","src":"822:44:95","nodes":[],"documentation":{"id":56408,"nodeType":"StructuredDocumentation","src":"723:94:95","text":" @dev Merkle root is not set for the block number in Relayer smart contract."},"errorSelector":"a9c5da5a","name":"MerkleRootNotSet","nameLocation":"828:16:95","parameters":{"id":56411,"nodeType":"ParameterList","parameters":[{"constant":false,"id":56410,"mutability":"mutable","name":"blockNumber","nameLocation":"853:11:95","nodeType":"VariableDeclaration","scope":56412,"src":"845:19:95","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":56409,"name":"uint256","nodeType":"ElementaryTypeName","src":"845:7:95","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"844:21:95"}},{"id":56415,"nodeType":"ErrorDefinition","src":"925:27:95","nodes":[],"documentation":{"id":56413,"nodeType":"StructuredDocumentation","src":"872:48:95","text":" @dev Merkle proof is invalid."},"errorSelector":"b05e92fa","name":"InvalidMerkleProof","nameLocation":"931:18:95","parameters":{"id":56414,"nodeType":"ParameterList","parameters":[],"src":"949:2:95"}},{"id":56426,"nodeType":"EventDefinition","src":"1021:177:95","nodes":[],"anonymous":false,"documentation":{"id":56416,"nodeType":"StructuredDocumentation","src":"958:58:95","text":" @dev Emitted when message is processed."},"eventSelector":"994c669cfd9c0453d42c933a11c002a34d12d85563aebe99ca525fffc45454f8","name":"MessageProcessed","nameLocation":"1027:16:95","parameters":{"id":56425,"nodeType":"ParameterList","parameters":[{"constant":false,"id":56418,"indexed":true,"mutability":"mutable","name":"blockNumber","nameLocation":"1069:11:95","nodeType":"VariableDeclaration","scope":56426,"src":"1053:27:95","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":56417,"name":"uint256","nodeType":"ElementaryTypeName","src":"1053:7:95","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":56420,"indexed":true,"mutability":"mutable","name":"messageHash","nameLocation":"1106:11:95","nodeType":"VariableDeclaration","scope":56426,"src":"1090:27:95","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":56419,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1090:7:95","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":56422,"indexed":true,"mutability":"mutable","name":"messageNonce","nameLocation":"1143:12:95","nodeType":"VariableDeclaration","scope":56426,"src":"1127:28:95","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":56421,"name":"uint256","nodeType":"ElementaryTypeName","src":"1127:7:95","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":56424,"indexed":false,"mutability":"mutable","name":"messageDestination","nameLocation":"1173:18:95","nodeType":"VariableDeclaration","scope":56426,"src":"1165:26:95","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":56423,"name":"address","nodeType":"ElementaryTypeName","src":"1165:7:95","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1043:154:95"}},{"id":56442,"nodeType":"FunctionDefinition","src":"2836:196:95","nodes":[],"documentation":{"id":56427,"nodeType":"StructuredDocumentation","src":"1204:1627:95","text":" @dev Verifies and processes message originated from Vara Network.\n      In this process, MessageQueue smart contract will calculate Merkle root\n      for message and validate that it corresponds to Merkle root which is already stored\n      in Relayer smart contract for same block number. If proof is correct, nonce of received\n      message will be stored in smart contract and message will be forwarded to adequate message\n      processor, either ERC20Manager or Governance smart contract.\n      Upon successful processing of the message MessageProcessed event is emited.\n      It is important to note that anyone can submit a message because all messages\n      will be validated against previously stored Merkle roots in the Relayer smart contract.\n @param blockNumber Block number of block containing target merkle tree.\n @param totalLeaves Number of leaves in target merkle tree.\n @param leafIndex Index of leaf containing target message.\n @param message Target message.\n @param proof Merkle proof of inclusion of leaf #`leafIndex` into target merkle tree that\n              was included into `blockNumber`.\n @dev Reverts if:\n      - MessageQueue is paused and message source is not any governance address.\n      - Relayer emergency stop status is set.\n      - Message nonce is already processed.\n      - Merkle root is not set for the block number in Relayer smart contract.\n      - Merkle proof is invalid.\n      - Message processing fails."},"functionSelector":"93eb47e9","implemented":false,"kind":"function","modifiers":[],"name":"processMessage","nameLocation":"2845:14:95","parameters":{"id":56440,"nodeType":"ParameterList","parameters":[{"constant":false,"id":56429,"mutability":"mutable","name":"blockNumber","nameLocation":"2877:11:95","nodeType":"VariableDeclaration","scope":56442,"src":"2869:19:95","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":56428,"name":"uint256","nodeType":"ElementaryTypeName","src":"2869:7:95","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":56431,"mutability":"mutable","name":"totalLeaves","nameLocation":"2906:11:95","nodeType":"VariableDeclaration","scope":56442,"src":"2898:19:95","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":56430,"name":"uint256","nodeType":"ElementaryTypeName","src":"2898:7:95","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":56433,"mutability":"mutable","name":"leafIndex","nameLocation":"2935:9:95","nodeType":"VariableDeclaration","scope":56442,"src":"2927:17:95","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":56432,"name":"uint256","nodeType":"ElementaryTypeName","src":"2927:7:95","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":56436,"mutability":"mutable","name":"message","nameLocation":"2975:7:95","nodeType":"VariableDeclaration","scope":56442,"src":"2954:28:95","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_VaraMessage_$56398_calldata_ptr","typeString":"struct VaraMessage"},"typeName":{"id":56435,"nodeType":"UserDefinedTypeName","pathNode":{"id":56434,"name":"VaraMessage","nameLocations":["2954:11:95"],"nodeType":"IdentifierPath","referencedDeclaration":56398,"src":"2954:11:95"},"referencedDeclaration":56398,"src":"2954:11:95","typeDescriptions":{"typeIdentifier":"t_struct$_VaraMessage_$56398_storage_ptr","typeString":"struct VaraMessage"}},"visibility":"internal"},{"constant":false,"id":56439,"mutability":"mutable","name":"proof","nameLocation":"3011:5:95","nodeType":"VariableDeclaration","scope":56442,"src":"2992:24:95","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":56437,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2992:7:95","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":56438,"nodeType":"ArrayTypeName","src":"2992:9:95","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"2859:163:95"},"returnParameters":{"id":56441,"nodeType":"ParameterList","parameters":[],"src":"3031:0:95"},"scope":56451,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":56450,"nodeType":"FunctionDefinition","src":"3245:72:95","nodes":[],"documentation":{"id":56443,"nodeType":"StructuredDocumentation","src":"3038:202:95","text":" @dev Checks if message was already processed.\n @param messageNonce Message nonce to check.\n @return isProcessed `true` if message was already processed, `false` otherwise."},"functionSelector":"bfe7edd7","implemented":false,"kind":"function","modifiers":[],"name":"isProcessed","nameLocation":"3254:11:95","parameters":{"id":56446,"nodeType":"ParameterList","parameters":[{"constant":false,"id":56445,"mutability":"mutable","name":"messageNonce","nameLocation":"3274:12:95","nodeType":"VariableDeclaration","scope":56450,"src":"3266:20:95","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":56444,"name":"uint256","nodeType":"ElementaryTypeName","src":"3266:7:95","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3265:22:95"},"returnParameters":{"id":56449,"nodeType":"ParameterList","parameters":[{"constant":false,"id":56448,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":56450,"src":"3311:4:95","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":56447,"name":"bool","nodeType":"ElementaryTypeName","src":"3311:4:95","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3310:6:95"},"scope":56451,"stateMutability":"view","virtual":false,"visibility":"external"}],"abstract":false,"baseContracts":[],"canonicalName":"IMessageQueue","contractDependencies":[],"contractKind":"interface","documentation":{"id":56399,"nodeType":"StructuredDocumentation","src":"413:56:95","text":" @dev Interface for the MessageQueue contract."},"fullyImplemented":false,"linearizedBaseContracts":[56451],"name":"IMessageQueue","nameLocation":"480:13:95","scope":56518,"usedErrors":[56402,56407,56412,56415],"usedEvents":[56426]},{"id":56517,"nodeType":"ContractDefinition","src":"3370:1113:95","nodes":[{"id":56484,"nodeType":"FunctionDefinition","src":"3519:419:95","nodes":[],"body":{"id":56483,"nodeType":"Block","src":"3603:335:95","nodes":[],"statements":[{"assignments":[56462],"declarations":[{"constant":false,"id":56462,"mutability":"mutable","name":"hash1","nameLocation":"3621:5:95","nodeType":"VariableDeclaration","scope":56483,"src":"3613:13:95","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":56461,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3613:7:95","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":56476,"initialValue":{"arguments":[{"arguments":[{"expression":{"id":56466,"name":"message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":56456,"src":"3656:7:95","typeDescriptions":{"typeIdentifier":"t_struct$_VaraMessage_$56398_calldata_ptr","typeString":"struct VaraMessage calldata"}},"id":56467,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3664:5:95","memberName":"nonce","nodeType":"MemberAccess","referencedDeclaration":56391,"src":"3656:13:95","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":56468,"name":"message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":56456,"src":"3671:7:95","typeDescriptions":{"typeIdentifier":"t_struct$_VaraMessage_$56398_calldata_ptr","typeString":"struct VaraMessage calldata"}},"id":56469,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3679:6:95","memberName":"source","nodeType":"MemberAccess","referencedDeclaration":56393,"src":"3671:14:95","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":56470,"name":"message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":56456,"src":"3687:7:95","typeDescriptions":{"typeIdentifier":"t_struct$_VaraMessage_$56398_calldata_ptr","typeString":"struct VaraMessage calldata"}},"id":56471,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3695:11:95","memberName":"destination","nodeType":"MemberAccess","referencedDeclaration":56395,"src":"3687:19:95","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":56472,"name":"message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":56456,"src":"3708:7:95","typeDescriptions":{"typeIdentifier":"t_struct$_VaraMessage_$56398_calldata_ptr","typeString":"struct VaraMessage calldata"}},"id":56473,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3716:7:95","memberName":"payload","nodeType":"MemberAccess","referencedDeclaration":56397,"src":"3708:15:95","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"expression":{"id":56464,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3639:3:95","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":56465,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3643:12:95","memberName":"encodePacked","nodeType":"MemberAccess","src":"3639:16:95","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":56474,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3639:85:95","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":56463,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"3629:9:95","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":56475,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3629:96:95","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"3613:112:95"},{"assignments":[56478],"declarations":[{"constant":false,"id":56478,"mutability":"mutable","name":"hash2","nameLocation":"3783:5:95","nodeType":"VariableDeclaration","scope":56483,"src":"3775:13:95","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":56477,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3775:7:95","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":56479,"nodeType":"VariableDeclarationStatement","src":"3775:13:95"},{"AST":{"nativeSrc":"3823:86:95","nodeType":"YulBlock","src":"3823:86:95","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3844:4:95","nodeType":"YulLiteral","src":"3844:4:95","type":"","value":"0x00"},{"name":"hash1","nativeSrc":"3850:5:95","nodeType":"YulIdentifier","src":"3850:5:95"}],"functionName":{"name":"mstore","nativeSrc":"3837:6:95","nodeType":"YulIdentifier","src":"3837:6:95"},"nativeSrc":"3837:19:95","nodeType":"YulFunctionCall","src":"3837:19:95"},"nativeSrc":"3837:19:95","nodeType":"YulExpressionStatement","src":"3837:19:95"},{"nativeSrc":"3869:30:95","nodeType":"YulAssignment","src":"3869:30:95","value":{"arguments":[{"kind":"number","nativeSrc":"3888:4:95","nodeType":"YulLiteral","src":"3888:4:95","type":"","value":"0x00"},{"kind":"number","nativeSrc":"3894:4:95","nodeType":"YulLiteral","src":"3894:4:95","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nativeSrc":"3878:9:95","nodeType":"YulIdentifier","src":"3878:9:95"},"nativeSrc":"3878:21:95","nodeType":"YulFunctionCall","src":"3878:21:95"},"variableNames":[{"name":"hash2","nativeSrc":"3869:5:95","nodeType":"YulIdentifier","src":"3869:5:95"}]}]},"evmVersion":"prague","externalReferences":[{"declaration":56462,"isOffset":false,"isSlot":false,"src":"3850:5:95","valueSize":1},{"declaration":56478,"isOffset":false,"isSlot":false,"src":"3869:5:95","valueSize":1}],"flags":["memory-safe"],"id":56480,"nodeType":"InlineAssembly","src":"3798:111:95"},{"expression":{"id":56481,"name":"hash2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":56478,"src":"3926:5:95","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":56460,"id":56482,"nodeType":"Return","src":"3919:12:95"}]},"documentation":{"id":56453,"nodeType":"StructuredDocumentation","src":"3391:123:95","text":" @dev Hashes VaraMessage.\n @param message Message to hash.\n @return hash Hash of the message."},"implemented":true,"kind":"function","modifiers":[],"name":"hashCalldata","nameLocation":"3528:12:95","parameters":{"id":56457,"nodeType":"ParameterList","parameters":[{"constant":false,"id":56456,"mutability":"mutable","name":"message","nameLocation":"3562:7:95","nodeType":"VariableDeclaration","scope":56484,"src":"3541:28:95","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_VaraMessage_$56398_calldata_ptr","typeString":"struct VaraMessage"},"typeName":{"id":56455,"nodeType":"UserDefinedTypeName","pathNode":{"id":56454,"name":"VaraMessage","nameLocations":["3541:11:95"],"nodeType":"IdentifierPath","referencedDeclaration":56398,"src":"3541:11:95"},"referencedDeclaration":56398,"src":"3541:11:95","typeDescriptions":{"typeIdentifier":"t_struct$_VaraMessage_$56398_storage_ptr","typeString":"struct VaraMessage"}},"visibility":"internal"}],"src":"3540:30:95"},"returnParameters":{"id":56460,"nodeType":"ParameterList","parameters":[{"constant":false,"id":56459,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":56484,"src":"3594:7:95","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":56458,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3594:7:95","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3593:9:95"},"scope":56517,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":56516,"nodeType":"FunctionDefinition","src":"4072:409:95","nodes":[],"body":{"id":56515,"nodeType":"Block","src":"4146:335:95","nodes":[],"statements":[{"assignments":[56494],"declarations":[{"constant":false,"id":56494,"mutability":"mutable","name":"hash1","nameLocation":"4164:5:95","nodeType":"VariableDeclaration","scope":56515,"src":"4156:13:95","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":56493,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4156:7:95","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":56508,"initialValue":{"arguments":[{"arguments":[{"expression":{"id":56498,"name":"message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":56488,"src":"4199:7:95","typeDescriptions":{"typeIdentifier":"t_struct$_VaraMessage_$56398_memory_ptr","typeString":"struct VaraMessage memory"}},"id":56499,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4207:5:95","memberName":"nonce","nodeType":"MemberAccess","referencedDeclaration":56391,"src":"4199:13:95","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":56500,"name":"message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":56488,"src":"4214:7:95","typeDescriptions":{"typeIdentifier":"t_struct$_VaraMessage_$56398_memory_ptr","typeString":"struct VaraMessage memory"}},"id":56501,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4222:6:95","memberName":"source","nodeType":"MemberAccess","referencedDeclaration":56393,"src":"4214:14:95","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":56502,"name":"message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":56488,"src":"4230:7:95","typeDescriptions":{"typeIdentifier":"t_struct$_VaraMessage_$56398_memory_ptr","typeString":"struct VaraMessage memory"}},"id":56503,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4238:11:95","memberName":"destination","nodeType":"MemberAccess","referencedDeclaration":56395,"src":"4230:19:95","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":56504,"name":"message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":56488,"src":"4251:7:95","typeDescriptions":{"typeIdentifier":"t_struct$_VaraMessage_$56398_memory_ptr","typeString":"struct VaraMessage memory"}},"id":56505,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4259:7:95","memberName":"payload","nodeType":"MemberAccess","referencedDeclaration":56397,"src":"4251:15:95","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":56496,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4182:3:95","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":56497,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4186:12:95","memberName":"encodePacked","nodeType":"MemberAccess","src":"4182:16:95","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":56506,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4182:85:95","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":56495,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"4172:9:95","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":56507,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4172:96:95","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"4156:112:95"},{"assignments":[56510],"declarations":[{"constant":false,"id":56510,"mutability":"mutable","name":"hash2","nameLocation":"4326:5:95","nodeType":"VariableDeclaration","scope":56515,"src":"4318:13:95","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":56509,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4318:7:95","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":56511,"nodeType":"VariableDeclarationStatement","src":"4318:13:95"},{"AST":{"nativeSrc":"4366:86:95","nodeType":"YulBlock","src":"4366:86:95","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4387:4:95","nodeType":"YulLiteral","src":"4387:4:95","type":"","value":"0x00"},{"name":"hash1","nativeSrc":"4393:5:95","nodeType":"YulIdentifier","src":"4393:5:95"}],"functionName":{"name":"mstore","nativeSrc":"4380:6:95","nodeType":"YulIdentifier","src":"4380:6:95"},"nativeSrc":"4380:19:95","nodeType":"YulFunctionCall","src":"4380:19:95"},"nativeSrc":"4380:19:95","nodeType":"YulExpressionStatement","src":"4380:19:95"},{"nativeSrc":"4412:30:95","nodeType":"YulAssignment","src":"4412:30:95","value":{"arguments":[{"kind":"number","nativeSrc":"4431:4:95","nodeType":"YulLiteral","src":"4431:4:95","type":"","value":"0x00"},{"kind":"number","nativeSrc":"4437:4:95","nodeType":"YulLiteral","src":"4437:4:95","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nativeSrc":"4421:9:95","nodeType":"YulIdentifier","src":"4421:9:95"},"nativeSrc":"4421:21:95","nodeType":"YulFunctionCall","src":"4421:21:95"},"variableNames":[{"name":"hash2","nativeSrc":"4412:5:95","nodeType":"YulIdentifier","src":"4412:5:95"}]}]},"evmVersion":"prague","externalReferences":[{"declaration":56494,"isOffset":false,"isSlot":false,"src":"4393:5:95","valueSize":1},{"declaration":56510,"isOffset":false,"isSlot":false,"src":"4412:5:95","valueSize":1}],"flags":["memory-safe"],"id":56512,"nodeType":"InlineAssembly","src":"4341:111:95"},{"expression":{"id":56513,"name":"hash2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":56510,"src":"4469:5:95","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":56492,"id":56514,"nodeType":"Return","src":"4462:12:95"}]},"documentation":{"id":56485,"nodeType":"StructuredDocumentation","src":"3944:123:95","text":" @dev Hashes VaraMessage.\n @param message Message to hash.\n @return hash Hash of the message."},"implemented":true,"kind":"function","modifiers":[],"name":"hash","nameLocation":"4081:4:95","parameters":{"id":56489,"nodeType":"ParameterList","parameters":[{"constant":false,"id":56488,"mutability":"mutable","name":"message","nameLocation":"4105:7:95","nodeType":"VariableDeclaration","scope":56516,"src":"4086:26:95","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_VaraMessage_$56398_memory_ptr","typeString":"struct VaraMessage"},"typeName":{"id":56487,"nodeType":"UserDefinedTypeName","pathNode":{"id":56486,"name":"VaraMessage","nameLocations":["4086:11:95"],"nodeType":"IdentifierPath","referencedDeclaration":56398,"src":"4086:11:95"},"referencedDeclaration":56398,"src":"4086:11:95","typeDescriptions":{"typeIdentifier":"t_struct$_VaraMessage_$56398_storage_ptr","typeString":"struct VaraMessage"}},"visibility":"internal"}],"src":"4085:28:95"},"returnParameters":{"id":56492,"nodeType":"ParameterList","parameters":[{"constant":false,"id":56491,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":56516,"src":"4137:7:95","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":56490,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4137:7:95","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4136:9:95"},"scope":56517,"stateMutability":"pure","virtual":false,"visibility":"internal"}],"abstract":false,"baseContracts":[],"canonicalName":"Hasher","contractDependencies":[],"contractKind":"library","documentation":{"id":56452,"nodeType":"StructuredDocumentation","src":"3321:48:95","text":" @dev Library for hashing VaraMessage."},"fullyImplemented":true,"linearizedBaseContracts":[56517],"name":"Hasher","nameLocation":"3378:6:95","scope":56518,"usedErrors":[],"usedEvents":[]}],"license":"GPL-3.0-or-later WITH Classpath-exception-2.0"},"id":95}