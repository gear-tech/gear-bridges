name: Deploy Frontend to k8s

on:
  push:
    branches: ['main']
    paths:
      - js/frontend/**
  workflow_dispatch:
    inputs:
      network:
        description: 'Select target network (for release branch only)'
        required: true
        type: choice
        options:
          - mainnet
          - testnet

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
  KUBECTL_VERSION: 'v1.22.17'
  KUBE_NAMESPACE: zk-bridge
  KUBE_DEPLOYMENT_PREFIX: zk-bridge
  REGISTRY: ghcr.io/${{ github.repository }}

jobs:
  prepair:
    if: github.ref == 'refs/heads/main' || (github.ref == 'refs/heads/release' && github.event_name == 'workflow_dispatch')
    runs-on: ubuntu-latest
    outputs:
      image_name: ${{ steps.image.outputs.image_name }}
      environment: ${{ steps.set-env.outputs.environment }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get short SHA
        id: sha
        run: |
          echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Determine environment
        id: set-env
        run: |
          if [ "${GITHUB_REF#refs/heads/}" = "main" ]; then
            echo "environment=stg" >> $GITHUB_OUTPUT
          elif [ "${GITHUB_REF#refs/heads/}" = "release" ]; then
            if [ "${{ github.event.inputs.network }}" = "mainnet" ]; then
              echo "environment=mainnet-prod" >> $GITHUB_OUTPUT
            else
              echo "environment=testnet-prod" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Set IMAGE_NAME
        id: image
        run: |
          branch_name=${GITHUB_REF#refs/heads/}
          sha_short=${{ env.sha_short }}

          if [ "$branch_name" = "main" ]; then
            image_name="${{ env.REGISTRY }}:${branch_name}-${sha_short}"
          elif [ "$branch_name" = "release" ]; then
            if [ "${{ github.event.inputs.network }}" = "mainnet" ]; then
              image_name="${{ env.REGISTRY }}:mainnet-${sha_short}"
            else
              image_name="${{ env.REGISTRY }}:testnet-${sha_short}"
            fi
          fi

          echo "image_name=$image_name" >> $GITHUB_OUTPUT

  build-and-push-image:
    needs: [prepair]
    runs-on: ubuntu-latest
    environment: ${{ needs.prepair.outputs.environment }}
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push image
        uses: docker/build-push-action@v6
        with:
          file: js/frontend/Dockerfile
          tags: ${{ needs.prepair.outputs.image_name }}
          push: true
          build-args: |
            VITE_NETWORK_TYPE=${{ secrets.VITE_NETWORK_TYPE }}
            VITE_VARA_NODE_ADDRESS=${{ secrets.VITE_VARA_NODE_ADDRESS }}
            VITE_ETH_NODE_ADDRESS=${{ secrets.VITE_ETH_NODE_ADDRESS }}
            VITE_ETH_CHAIN_ID=${{ secrets.VITE_ETH_CHAIN_ID }}
            VITE_WALLET_CONNECT_PROJECT_ID=${{ secrets.VITE_WALLET_CONNECT_PROJECT_ID }}
            VITE_INDEXER_ADDRESS=${{ secrets.VITE_INDEXER_ADDRESS }}
            VITE_BRIDGING_PAYMENT_CONTRACT_ADDRESS=${{ secrets.VITE_BRIDGING_PAYMENT_CONTRACT_ADDRESS }}
            VITE_VFT_MANAGER_CONTRACT_ADDRESS=${{ secrets.VITE_VFT_MANAGER_CONTRACT_ADDRESS }}
            VITE_ETH_BRIDGING_PAYMENT_CONTRACT_ADDRESS=${{ secrets.VITE_ETH_BRIDGING_PAYMENT_CONTRACT_ADDRESS }}
            VITE_ERC20_MANAGER_CONTRACT_ADDRESS=${{ secrets.VITE_ERC20_MANAGER_CONTRACT_ADDRESS }}
            VITE_TOKEN_PRICE_API_URL=${{ secrets.VITE_TOKEN_PRICE_API_URL }}
            VITE_FAUCET_API_URL=${{ secrets.VITE_FAUCET_API_URL }}
            VITE_HCAPTCHA_SITEKEY=${{ secrets.VITE_HCAPTCHA_SITEKEY }}
            VITE_VARA_ARCHIVE_NODE_ADDRESS=${{ secrets.VITE_VARA_ARCHIVE_NODE_ADDRESS }}
            VITE_ETH_BEACON_NODE_ADDRESS=${{ secrets.VITE_ETH_BEACON_NODE_ADDRESS }}
            VITE_ETH_MESSAGE_QUEUE_CONTRACT_ADDRESS=${{ secrets.VITE_ETH_MESSAGE_QUEUE_CONTRACT_ADDRESS }}
            VITE_CHECKPOINT_CLIENT_CONTRACT_ADDRESS=${{ secrets.VITE_CHECKPOINT_CLIENT_CONTRACT_ADDRESS }}
            VITE_HISTORICAL_PROXY_CONTRACT_ADDRESS=${{ secrets.VITE_HISTORICAL_PROXY_CONTRACT_ADDRESS }}
            VITE_GTM_ID=${{ secrets.VITE_GTM_ID }}

  deploy-to-k8s:
    needs: [prepair, build-and-push-image]
    runs-on: ubuntu-latest
    environment: ${{ needs.prepair.outputs.environment }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update deployment image
        uses: kodermax/kubectl-aws-eks@main
        with:
          args: |
            set image deployment/${{ env.KUBE_DEPLOYMENT_PREFIX }}-${{ needs.prepair.outputs.environment }} \
            ${{ env.KUBE_DEPLOYMENT_PREFIX }}-${{ needs.prepair.outputs.environment }}=${{ needs.prepair.outputs.image_name }} \
            -n ${{ env.KUBE_NAMESPACE }}

      - name: Restart deployment
        uses: kodermax/kubectl-aws-eks@main
        with:
          args: |
            rollout restart deployment/${{ env.KUBE_DEPLOYMENT_PREFIX }}-${{ needs.prepair.outputs.environment }} \
            -n ${{ env.KUBE_NAMESPACE }}

      - name: Check deployment
        uses: kodermax/kubectl-aws-eks@main
        with:
          args: |
            rollout status deployment/${{ env.KUBE_DEPLOYMENT_PREFIX }}-${{ needs.prepair.outputs.environment }} \
            --timeout=120s \
            -n ${{ env.KUBE_NAMESPACE }}
