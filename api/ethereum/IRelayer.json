{"abi":[{"type":"function","name":"emergencyStop","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"getBlockNumber","inputs":[{"name":"merkleRoot","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getMerkleRoot","inputs":[{"name":"blockNumber","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"},{"type":"function","name":"submitMerkleRoot","inputs":[{"name":"blockNumber","type":"uint256","internalType":"uint256"},{"name":"merkleRoot","type":"bytes32","internalType":"bytes32"},{"name":"proof","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"event","name":"EmergencyStopSet","inputs":[],"anonymous":false},{"type":"event","name":"MerkleRoot","inputs":[{"name":"blockNumber","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"merkleRoot","type":"bytes32","indexed":true,"internalType":"bytes32"}],"anonymous":false},{"type":"error","name":"EmergencyStop","inputs":[]},{"type":"error","name":"InvalidPlonkProof","inputs":[]}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"emergencyStop()":"63a599a4","getBlockNumber(bytes32)":"47378145","getMerkleRoot(uint256)":"0aab8ba5","submitMerkleRoot(uint256,bytes32,bytes)":"cca66a9d"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"EmergencyStop\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPlonkProof\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EmergencyStopSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"MerkleRoot\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"emergencyStop\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"getBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getMerkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"submitMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the Relayer contract.\",\"errors\":{\"EmergencyStop()\":[{\"details\":\"Emergency stop status is active.\"}],\"InvalidPlonkProof()\":[{\"details\":\"The plonk proof is invalid.\"}]},\"events\":{\"EmergencyStopSet()\":{\"details\":\"Emitted when emergency stop status is set.\"},\"MerkleRoot(uint256,bytes32)\":{\"details\":\"Emitted when block number and merkle root are stored.\"}},\"kind\":\"dev\",\"methods\":{\"emergencyStop()\":{\"details\":\"Returns emergency stop status.\",\"returns\":{\"_0\":\"emergencyStop emergency stop status.\"}},\"getBlockNumber(bytes32)\":{\"details\":\"Returns block number for provided merkle root.      Returns `uint256(0)` if block number was not provided for specified merkle root.\",\"params\":{\"merkleRoot\":\"Target merkle root.\"},\"returns\":{\"_0\":\"blockNumber Block number for provided merkle root.\"}},\"getMerkleRoot(uint256)\":{\"details\":\"Returns merkle root for specified block number.      Returns `bytes32(0)` if merkle root was not provided for specified block number.\",\"params\":{\"blockNumber\":\"Target block number.\"},\"returns\":{\"_0\":\"merkleRoot Merkle root for specified block number.\"}},\"submitMerkleRoot(uint256,bytes32,bytes)\":{\"details\":\"Receives, verifies and stores Merkle roots from Vara Network.      Upon successfully storing data about block number and corresponding Merkle root,      Relayer smart contract will emit a `MerkleRoot` event.      It is important to note that anyone can submit a Merkle root because only      validated Merkle roots will be stored in the Relayer smart contract.Reverts if emergency stop status is set with `EmergencyStop` error.Reverts if `proof` or `publicInputs` are malformed with `InvalidPlonkProof` error.\",\"params\":{\"blockNumber\":\"Block number on Vara Network\",\"merkleRoot\":\"Merkle root of transactions included in block with corresponding block number\",\"proof\":\"Serialised Plonk proof (using gnark's `MarshalSolidity`).\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/interfaces/IRelayer.sol\":\"IRelayer\"},\"debug\":{\"revertStrings\":\"strip\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"appendCBOR\":false,\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin-foundry-upgrades/=lib/openzeppelin-foundry-upgrades/src/\"],\"viaIR\":true},\"sources\":{\"src/interfaces/IRelayer.sol\":{\"keccak256\":\"0x823cd6314e73d9a69717de2463825a3ac80340909381942df419c480c416f1fe\",\"license\":\"GPL-3.0-or-later WITH Classpath-exception-2.0\",\"urls\":[\"bzz-raw://7bee43aeda53c46e4c90f32088abdafb6bffd2b5b8bd2d818350324003f60ca8\",\"dweb:/ipfs/QmajhETAC68WhTZ2gy4BqNAYixZtm5ah99RFq5w4UQc443\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.30+commit.73712a01"},"language":"Solidity","output":{"abi":[{"inputs":[],"type":"error","name":"EmergencyStop"},{"inputs":[],"type":"error","name":"InvalidPlonkProof"},{"inputs":[],"type":"event","name":"EmergencyStopSet","anonymous":false},{"inputs":[{"internalType":"uint256","name":"blockNumber","type":"uint256","indexed":true},{"internalType":"bytes32","name":"merkleRoot","type":"bytes32","indexed":true}],"type":"event","name":"MerkleRoot","anonymous":false},{"inputs":[],"stateMutability":"view","type":"function","name":"emergencyStop","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"}],"stateMutability":"view","type":"function","name":"getBlockNumber","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"uint256","name":"blockNumber","type":"uint256"}],"stateMutability":"view","type":"function","name":"getMerkleRoot","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}]},{"inputs":[{"internalType":"uint256","name":"blockNumber","type":"uint256"},{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"},{"internalType":"bytes","name":"proof","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"submitMerkleRoot"}],"devdoc":{"kind":"dev","methods":{"emergencyStop()":{"details":"Returns emergency stop status.","returns":{"_0":"emergencyStop emergency stop status."}},"getBlockNumber(bytes32)":{"details":"Returns block number for provided merkle root.      Returns `uint256(0)` if block number was not provided for specified merkle root.","params":{"merkleRoot":"Target merkle root."},"returns":{"_0":"blockNumber Block number for provided merkle root."}},"getMerkleRoot(uint256)":{"details":"Returns merkle root for specified block number.      Returns `bytes32(0)` if merkle root was not provided for specified block number.","params":{"blockNumber":"Target block number."},"returns":{"_0":"merkleRoot Merkle root for specified block number."}},"submitMerkleRoot(uint256,bytes32,bytes)":{"details":"Receives, verifies and stores Merkle roots from Vara Network.      Upon successfully storing data about block number and corresponding Merkle root,      Relayer smart contract will emit a `MerkleRoot` event.      It is important to note that anyone can submit a Merkle root because only      validated Merkle roots will be stored in the Relayer smart contract.Reverts if emergency stop status is set with `EmergencyStop` error.Reverts if `proof` or `publicInputs` are malformed with `InvalidPlonkProof` error.","params":{"blockNumber":"Block number on Vara Network","merkleRoot":"Merkle root of transactions included in block with corresponding block number","proof":"Serialised Plonk proof (using gnark's `MarshalSolidity`)."}}},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/","openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts/=lib/openzeppelin-contracts/","openzeppelin-foundry-upgrades/=lib/openzeppelin-foundry-upgrades/src/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"none","appendCBOR":false},"compilationTarget":{"src/interfaces/IRelayer.sol":"IRelayer"},"evmVersion":"prague","libraries":{},"viaIR":true},"sources":{"src/interfaces/IRelayer.sol":{"keccak256":"0x823cd6314e73d9a69717de2463825a3ac80340909381942df419c480c416f1fe","urls":["bzz-raw://7bee43aeda53c46e4c90f32088abdafb6bffd2b5b8bd2d818350324003f60ca8","dweb:/ipfs/QmajhETAC68WhTZ2gy4BqNAYixZtm5ah99RFq5w4UQc443"],"license":"GPL-3.0-or-later WITH Classpath-exception-2.0"}},"version":1},"storageLayout":{"storage":[],"types":{}},"ast":{"absolutePath":"src/interfaces/IRelayer.sol","id":57338,"exportedSymbols":{"IRelayer":[57337]},"nodeType":"SourceUnit","src":"74:2390:100","nodes":[{"id":57287,"nodeType":"PragmaDirective","src":"74:24:100","nodes":[],"literals":["solidity","^","0.8",".30"]},{"id":57337,"nodeType":"ContractDefinition","src":"152:2311:100","nodes":[{"id":57291,"nodeType":"ErrorDefinition","src":"238:22:100","nodes":[],"documentation":{"id":57289,"nodeType":"StructuredDocumentation","src":"177:56:100","text":" @dev Emergency stop status is active."},"errorSelector":"4e97bcfc","name":"EmergencyStop","nameLocation":"244:13:100","parameters":{"id":57290,"nodeType":"ParameterList","parameters":[],"src":"257:2:100"}},{"id":57294,"nodeType":"ErrorDefinition","src":"322:26:100","nodes":[],"documentation":{"id":57292,"nodeType":"StructuredDocumentation","src":"266:51:100","text":" @dev The plonk proof is invalid."},"errorSelector":"d0b34d32","name":"InvalidPlonkProof","nameLocation":"328:17:100","parameters":{"id":57293,"nodeType":"ParameterList","parameters":[],"src":"345:2:100"}},{"id":57297,"nodeType":"EventDefinition","src":"425:25:100","nodes":[],"anonymous":false,"documentation":{"id":57295,"nodeType":"StructuredDocumentation","src":"354:66:100","text":" @dev Emitted when emergency stop status is set."},"eventSelector":"ae1fc94fd692bf240be219cead4601265a701df263b7045071227f1ba37f4750","name":"EmergencyStopSet","nameLocation":"431:16:100","parameters":{"id":57296,"nodeType":"ParameterList","parameters":[],"src":"447:2:100"}},{"id":57304,"nodeType":"EventDefinition","src":"538:74:100","nodes":[],"anonymous":false,"documentation":{"id":57298,"nodeType":"StructuredDocumentation","src":"456:77:100","text":" @dev Emitted when block number and merkle root are stored."},"eventSelector":"48211a20c285b6b077b7917b8bb118eaa92efdfb8fa2e3b114ffa253e0b665ae","name":"MerkleRoot","nameLocation":"544:10:100","parameters":{"id":57303,"nodeType":"ParameterList","parameters":[{"constant":false,"id":57300,"indexed":true,"mutability":"mutable","name":"blockNumber","nameLocation":"571:11:100","nodeType":"VariableDeclaration","scope":57304,"src":"555:27:100","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":57299,"name":"uint256","nodeType":"ElementaryTypeName","src":"555:7:100","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":57302,"indexed":true,"mutability":"mutable","name":"merkleRoot","nameLocation":"600:10:100","nodeType":"VariableDeclaration","scope":57304,"src":"584:26:100","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":57301,"name":"bytes32","nodeType":"ElementaryTypeName","src":"584:7:100","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"554:57:100"}},{"id":57314,"nodeType":"FunctionDefinition","src":"1467:98:100","nodes":[],"documentation":{"id":57305,"nodeType":"StructuredDocumentation","src":"618:844:100","text":" @dev Receives, verifies and stores Merkle roots from Vara Network.\n      Upon successfully storing data about block number and corresponding Merkle root,\n      Relayer smart contract will emit a `MerkleRoot` event.\n      It is important to note that anyone can submit a Merkle root because only\n      validated Merkle roots will be stored in the Relayer smart contract.\n @param blockNumber Block number on Vara Network\n @param merkleRoot Merkle root of transactions included in block with corresponding block number\n @param proof Serialised Plonk proof (using gnark's `MarshalSolidity`).\n @dev Reverts if emergency stop status is set with `EmergencyStop` error.\n @dev Reverts if `proof` or `publicInputs` are malformed with `InvalidPlonkProof` error."},"functionSelector":"cca66a9d","implemented":false,"kind":"function","modifiers":[],"name":"submitMerkleRoot","nameLocation":"1476:16:100","parameters":{"id":57312,"nodeType":"ParameterList","parameters":[{"constant":false,"id":57307,"mutability":"mutable","name":"blockNumber","nameLocation":"1501:11:100","nodeType":"VariableDeclaration","scope":57314,"src":"1493:19:100","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":57306,"name":"uint256","nodeType":"ElementaryTypeName","src":"1493:7:100","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":57309,"mutability":"mutable","name":"merkleRoot","nameLocation":"1522:10:100","nodeType":"VariableDeclaration","scope":57314,"src":"1514:18:100","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":57308,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1514:7:100","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":57311,"mutability":"mutable","name":"proof","nameLocation":"1549:5:100","nodeType":"VariableDeclaration","scope":57314,"src":"1534:20:100","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":57310,"name":"bytes","nodeType":"ElementaryTypeName","src":"1534:5:100","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1492:63:100"},"returnParameters":{"id":57313,"nodeType":"ParameterList","parameters":[],"src":"1564:0:100"},"scope":57337,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":57322,"nodeType":"FunctionDefinition","src":"1853:76:100","nodes":[],"documentation":{"id":57315,"nodeType":"StructuredDocumentation","src":"1571:277:100","text":" @dev Returns merkle root for specified block number.\n      Returns `bytes32(0)` if merkle root was not provided for specified block number.\n @param blockNumber Target block number.\n @return merkleRoot Merkle root for specified block number."},"functionSelector":"0aab8ba5","implemented":false,"kind":"function","modifiers":[],"name":"getMerkleRoot","nameLocation":"1862:13:100","parameters":{"id":57318,"nodeType":"ParameterList","parameters":[{"constant":false,"id":57317,"mutability":"mutable","name":"blockNumber","nameLocation":"1884:11:100","nodeType":"VariableDeclaration","scope":57322,"src":"1876:19:100","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":57316,"name":"uint256","nodeType":"ElementaryTypeName","src":"1876:7:100","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1875:21:100"},"returnParameters":{"id":57321,"nodeType":"ParameterList","parameters":[{"constant":false,"id":57320,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":57322,"src":"1920:7:100","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":57319,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1920:7:100","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1919:9:100"},"scope":57337,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":57330,"nodeType":"FunctionDefinition","src":"2214:76:100","nodes":[],"documentation":{"id":57323,"nodeType":"StructuredDocumentation","src":"1935:274:100","text":" @dev Returns block number for provided merkle root.\n      Returns `uint256(0)` if block number was not provided for specified merkle root.\n @param merkleRoot Target merkle root.\n @return blockNumber Block number for provided merkle root."},"functionSelector":"47378145","implemented":false,"kind":"function","modifiers":[],"name":"getBlockNumber","nameLocation":"2223:14:100","parameters":{"id":57326,"nodeType":"ParameterList","parameters":[{"constant":false,"id":57325,"mutability":"mutable","name":"merkleRoot","nameLocation":"2246:10:100","nodeType":"VariableDeclaration","scope":57330,"src":"2238:18:100","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":57324,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2238:7:100","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2237:20:100"},"returnParameters":{"id":57329,"nodeType":"ParameterList","parameters":[{"constant":false,"id":57328,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":57330,"src":"2281:7:100","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":57327,"name":"uint256","nodeType":"ElementaryTypeName","src":"2281:7:100","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2280:9:100"},"scope":57337,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":57336,"nodeType":"FunctionDefinition","src":"2407:54:100","nodes":[],"documentation":{"id":57331,"nodeType":"StructuredDocumentation","src":"2296:106:100","text":" @dev Returns emergency stop status.\n @return emergencyStop emergency stop status."},"functionSelector":"63a599a4","implemented":false,"kind":"function","modifiers":[],"name":"emergencyStop","nameLocation":"2416:13:100","parameters":{"id":57332,"nodeType":"ParameterList","parameters":[],"src":"2429:2:100"},"returnParameters":{"id":57335,"nodeType":"ParameterList","parameters":[{"constant":false,"id":57334,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":57336,"src":"2455:4:100","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":57333,"name":"bool","nodeType":"ElementaryTypeName","src":"2455:4:100","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2454:6:100"},"scope":57337,"stateMutability":"view","virtual":false,"visibility":"external"}],"abstract":false,"baseContracts":[],"canonicalName":"IRelayer","contractDependencies":[],"contractKind":"interface","documentation":{"id":57288,"nodeType":"StructuredDocumentation","src":"100:51:100","text":" @dev Interface for the Relayer contract."},"fullyImplemented":false,"linearizedBaseContracts":[57337],"name":"IRelayer","nameLocation":"162:8:100","scope":57338,"usedErrors":[57291,57294],"usedEvents":[57297,57304]}],"license":"GPL-3.0-or-later WITH Classpath-exception-2.0"},"id":100}