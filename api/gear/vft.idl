constructor {
  New : (name: str, symbol: str, decimals: u8);
};

service Vft {
  Approve : (spender: actor_id, value: u256) -> bool;
  Transfer : (to: actor_id, value: u256) -> bool;
  TransferFrom : (from: actor_id, to: actor_id, value: u256) -> bool;
  query Allowance : (owner: actor_id, spender: actor_id) -> u256;
  query BalanceOf : (account: actor_id) -> u256;
  query TotalSupply : () -> u256;

  events {
    Approval: struct {
      owner: actor_id,
      spender: actor_id,
      value: u256,
    };
    Transfer: struct {
      from: actor_id,
      to: actor_id,
      value: u256,
    };
  }
};

service VftAdmin {
  AppendAllowancesShard : (capacity: u32) -> null;
  AppendBalancesShard : (capacity: u32) -> null;
  ApproveFrom : (owner: actor_id, spender: actor_id, value: u256) -> bool;
  Burn : (from: actor_id, value: u256) -> null;
  Exit : (inheritor: actor_id) -> null;
  Mint : (to: actor_id, value: u256) -> null;
  Pause : () -> null;
  Resume : () -> null;
  SetAdmin : (admin: actor_id) -> null;
  SetBurner : (burner: actor_id) -> null;
  SetExpiryPeriod : (period: u32) -> null;
  SetMinimumBalance : (value: u256) -> null;
  SetMinter : (minter: actor_id) -> null;
  SetPauser : (pauser: actor_id) -> null;
  query Admin : () -> actor_id;
  query Burner : () -> actor_id;
  query IsPaused : () -> bool;
  query Minter : () -> actor_id;
  query Pauser : () -> actor_id;

  events {
    AdminChanged: actor_id;
    BurnerChanged: actor_id;
    MinterChanged: actor_id;
    PauserChanged: actor_id;
    BurnerTookPlace;
    MinterTookPlace;
    ExpiryPeriodChanged: u32;
    MinimumBalanceChanged: u256;
    Exited: actor_id;
    Paused;
    Resumed;
  }
};

service VftExtension {
  AllocateNextAllowancesShard : () -> bool;
  AllocateNextBalancesShard : () -> bool;
  RemoveExpiredAllowance : (owner: actor_id, spender: actor_id) -> bool;
  TransferAll : (to: actor_id) -> bool;
  TransferAllFrom : (from: actor_id, to: actor_id) -> bool;
  query AllowanceOf : (owner: actor_id, spender: actor_id) -> opt struct { u256, u32 };
  query Allowances : (cursor: u32, len: u32) -> vec struct { struct { actor_id, actor_id }, struct { u256, u32 } };
  query BalanceOf : (account: actor_id) -> opt u256;
  query Balances : (cursor: u32, len: u32) -> vec struct { actor_id, u256 };
  query ExpiryPeriod : () -> u32;
  query MinimumBalance : () -> u256;
  query UnusedValue : () -> u256;
};

service VftMetadata {
  /// Returns the number of decimals of the VFT.
  query Decimals : () -> u8;
  /// Returns the name of the VFT.
  query Name : () -> str;
  /// Returns the symbol of the VFT.
  query Symbol : () -> str;
};

